(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _game = require('./states/game.js');

var _game2 = _interopRequireDefault(_game);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var phaser = new Phaser.Game(760, 650, Phaser.CANVAS, 'game');

phaser.state.add('game', (0, _game2.default)(phaser));

phaser.state.start('game');

},{"./states/game.js":2}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = gameState;
function gameState(phaser) {
	var data = {};

	function drawRect(x, y) {
		var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '#ff0000';

		var bmp = phaser.add.bitmapData(32, 32);
		bmp.draw('letter_empty', 0, 0, 32, 32);
		//    // draw to the canvas context like normal
		//    bmd.ctx.beginPath();
		//    bmd.ctx.rect(0,0,32,32);
		//    bmd.ctx.fillStyle = color;
		//    bmd.ctx.fill();

		// use the bitmap data as the texture for the sprite
		var sprite = phaser.add.sprite(x * 32, y * 32, bmp); //48
	}

	return {
		preload: function preload() {
			phaser.load.image('bg', './data/Background.png'); //t2
			phaser.load.image('bg_fot', './data/BackgroundFot.png');
			phaser.load.image('letter_empty', './data/Letter8x8.png');

			//gui
			phaser.load.image('gui_game_btn', './data/ButtonsNormal.png');

			phaser.load.xml('level', './data/levels/901.xml', false);
		},
		create: function create() {
			phaser.add.sprite(0, 0, 'bg');

			var photoCont = phaser.add.group();
			photoCont.create(0, 0, 'bg_fot');
			photoCont.x = 750 - 304;
			photoCont.y = 70;
			//phaser.add.sprite(750-304, 0, 'bg_fot'); //304


			var btnCont = phaser.add.group();
			btnCont.create(0, 0, 'gui_game_btn');
			btnCont.create(96 + 12, 0, 'gui_game_btn');
			btnCont.create((96 + 12) * 2, 0, 'gui_game_btn');
			btnCont.create((96 + 12) * 3, 0, 'gui_game_btn');
			btnCont.x = 750 - 304;
			btnCont.y = 70 + 304 + 14;
			btnCont.scale.setTo(0.72, 0.72);

			var letterCont = phaser.add.group();
			letterCont.create(0, 0, 'letter_empty');
			letterCont.create(48 + 4, 0, 'letter_empty');
			letterCont.create((48 + 4) * 2, 0, 'letter_empty');
			letterCont.create((48 + 4) * 3, 0, 'letter_empty');
			letterCont.create((48 + 4) * 4, 0, 'letter_empty');
			letterCont.create((48 + 4) * 5, 0, 'letter_empty');
			letterCont.create((48 + 4) * 6, 0, 'letter_empty');
			letterCont.create((48 + 4) * 7, 0, 'letter_empty');
			letterCont.create((48 + 4) * 8, 0, 'letter_empty');
			letterCont.create((48 + 4) * 9, 0, 'letter_empty');
			letterCont.x = 150;
			letterCont.y = 650 - 110;

			var xml = phaser.cache.getXML('level');

			var count = 0;
			xml.querySelectorAll('crossword>word').forEach(function (word) {
				console.log(word);
				var img = word.querySelector('image1').textContent;
				var label = word.querySelector('word').textContent;
				var pos = {
					x: parseInt(word.querySelector('xp1').textContent) + 1,
					y: parseInt(word.querySelector('yp1').textContent) + 1,
					x2: parseInt(word.querySelector('xp2').textContent) + 1,
					y2: parseInt(word.querySelector('yp2').textContent) + 1
				};

				if (img && label) {
					//data[label] = 'pic'+(++count);
					phaser.load.image('pic' + ++count, './data/imgs/' + img);

					drawRect(pos.x, pos.y);
					drawRect(pos.x2, pos.y2, '#00ff00');

					var length = label.length - 1;
					console.log(pos.x, pos.y, pos.x2, pos.y2, length);
					if (pos.x == pos.x2) {

						while (--length) {
							drawRect(pos.x, pos.y < pos.y2 ? pos.y + length : pos.y - length, '#aa0000');
						}
					} else {
						while (--length) {
							drawRect(pos.x < pos.x2 ? pos.x + length : pos.x - length, pos.y, '#aa0000');
						}
					}
				}
			});

			phaser.load.onLoadComplete.add(function () {
				//var s = phaser.add.sprite(80, 0, 'pic1');
				var s = photoCont.create(0, 0, 'pic1');
				s.x = 4;
				s.y = 4;
				s.scale.setTo(0.98, 0.98);
			}, this);

			phaser.load.start();

			//s.rotation = 0.14;
			//s.x=0;
			//s.y=0
		},
		update: function update() {},
		render: function render() {
			//phaser.debug.text('BIBA BIBA BIBA', 360, 96, 'rgb(255,0,0)');
		}
	};
}

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

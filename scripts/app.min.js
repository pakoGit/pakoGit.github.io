(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = require('./lib/axios');
},{"./lib/axios":3}],2:[function(require,module,exports){
(function (process){
'use strict';

var utils = require('./../utils');
var settle = require('./../core/settle');
var buildURL = require('./../helpers/buildURL');
var parseHeaders = require('./../helpers/parseHeaders');
var isURLSameOrigin = require('./../helpers/isURLSameOrigin');
var createError = require('../core/createError');
var btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || require('./../helpers/btoa');

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();
    var loadEvent = 'onreadystatechange';
    var xDomain = false;

    // For IE 8/9 CORS support
    // Only supports POST and GET calls and doesn't returns the response headers.
    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
    if (process.env.NODE_ENV !== 'test' &&
        typeof window !== 'undefined' &&
        window.XDomainRequest && !('withCredentials' in request) &&
        !isURLSameOrigin(config.url)) {
      request = new window.XDomainRequest();
      loadEvent = 'onload';
      xDomain = true;
      request.onprogress = function handleProgress() {};
      request.ontimeout = function handleTimeout() {};
    }

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request[loadEvent] = function handleLoad() {
      if (!request || (request.readyState !== 4 && !xDomain)) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)
        status: request.status === 1223 ? 204 : request.status,
        statusText: request.status === 1223 ? 'No Content' : request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies = require('./../helpers/cookies');

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
          cookies.read(config.xsrfCookieName) :
          undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (config.withCredentials) {
      request.withCredentials = true;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};

}).call(this,require('_process'))

},{"../core/createError":9,"./../core/settle":12,"./../helpers/btoa":16,"./../helpers/buildURL":17,"./../helpers/cookies":19,"./../helpers/isURLSameOrigin":21,"./../helpers/parseHeaders":23,"./../utils":25,"_process":27}],3:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var bind = require('./helpers/bind');
var Axios = require('./core/Axios');
var defaults = require('./defaults');

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(utils.merge(defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = require('./cancel/Cancel');
axios.CancelToken = require('./cancel/CancelToken');
axios.isCancel = require('./cancel/isCancel');

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = require('./helpers/spread');

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;

},{"./cancel/Cancel":4,"./cancel/CancelToken":5,"./cancel/isCancel":6,"./core/Axios":7,"./defaults":14,"./helpers/bind":15,"./helpers/spread":24,"./utils":25}],4:[function(require,module,exports){
'use strict';

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;

},{}],5:[function(require,module,exports){
'use strict';

var Cancel = require('./Cancel');

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;

},{"./Cancel":4}],6:[function(require,module,exports){
'use strict';

module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

},{}],7:[function(require,module,exports){
'use strict';

var defaults = require('./../defaults');
var utils = require('./../utils');
var InterceptorManager = require('./InterceptorManager');
var dispatchRequest = require('./dispatchRequest');

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = utils.merge({
      url: arguments[0]
    }, arguments[1]);
  }

  config = utils.merge(defaults, this.defaults, { method: 'get' }, config);
  config.method = config.method.toLowerCase();

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;

},{"./../defaults":14,"./../utils":25,"./InterceptorManager":8,"./dispatchRequest":10}],8:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;

},{"./../utils":25}],9:[function(require,module,exports){
'use strict';

var enhanceError = require('./enhanceError');

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};

},{"./enhanceError":11}],10:[function(require,module,exports){
'use strict';

var utils = require('./../utils');
var transformData = require('./transformData');
var isCancel = require('../cancel/isCancel');
var defaults = require('../defaults');
var isAbsoluteURL = require('./../helpers/isAbsoluteURL');
var combineURLs = require('./../helpers/combineURLs');

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Support baseURL config
  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  }

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers || {}
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};

},{"../cancel/isCancel":6,"../defaults":14,"./../helpers/combineURLs":18,"./../helpers/isAbsoluteURL":20,"./../utils":25,"./transformData":13}],11:[function(require,module,exports){
'use strict';

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }
  error.request = request;
  error.response = response;
  return error;
};

},{}],12:[function(require,module,exports){
'use strict';

var createError = require('./createError');

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  // Note: status is not exposed by XDomainRequest
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};

},{"./createError":9}],13:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};

},{"./../utils":25}],14:[function(require,module,exports){
(function (process){
'use strict';

var utils = require('./utils');
var normalizeHeaderName = require('./helpers/normalizeHeaderName');

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = require('./adapters/xhr');
  } else if (typeof process !== 'undefined') {
    // For node use HTTP adapter
    adapter = require('./adapters/http');
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

}).call(this,require('_process'))

},{"./adapters/http":2,"./adapters/xhr":2,"./helpers/normalizeHeaderName":22,"./utils":25,"_process":27}],15:[function(require,module,exports){
'use strict';

module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};

},{}],16:[function(require,module,exports){
'use strict';

// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

function E() {
  this.message = 'String contains an invalid character';
}
E.prototype = new Error;
E.prototype.code = 5;
E.prototype.name = 'InvalidCharacterError';

function btoa(input) {
  var str = String(input);
  var output = '';
  for (
    // initialize result and counter
    var block, charCode, idx = 0, map = chars;
    // if the next str index does not exist:
    //   change the mapping table to "="
    //   check if d has no fractional digits
    str.charAt(idx | 0) || (map = '=', idx % 1);
    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
  ) {
    charCode = str.charCodeAt(idx += 3 / 4);
    if (charCode > 0xFF) {
      throw new E();
    }
    block = block << 8 | charCode;
  }
  return output;
}

module.exports = btoa;

},{}],17:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

function encode(val) {
  return encodeURIComponent(val).
    replace(/%40/gi, '@').
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      }

      if (!utils.isArray(val)) {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

},{"./../utils":25}],18:[function(require,module,exports){
'use strict';

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};

},{}],19:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
  (function standardBrowserEnv() {
    return {
      write: function write(name, value, expires, path, domain, secure) {
        var cookie = [];
        cookie.push(name + '=' + encodeURIComponent(value));

        if (utils.isNumber(expires)) {
          cookie.push('expires=' + new Date(expires).toGMTString());
        }

        if (utils.isString(path)) {
          cookie.push('path=' + path);
        }

        if (utils.isString(domain)) {
          cookie.push('domain=' + domain);
        }

        if (secure === true) {
          cookie.push('secure');
        }

        document.cookie = cookie.join('; ');
      },

      read: function read(name) {
        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
        return (match ? decodeURIComponent(match[3]) : null);
      },

      remove: function remove(name) {
        this.write(name, '', Date.now() - 86400000);
      }
    };
  })() :

  // Non standard browser env (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return {
      write: function write() {},
      read: function read() { return null; },
      remove: function remove() {}
    };
  })()
);

},{"./../utils":25}],20:[function(require,module,exports){
'use strict';

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};

},{}],21:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement('a');
    var originURL;

    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      var href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                  urlParsingNode.pathname :
                  '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })()
);

},{"./../utils":25}],22:[function(require,module,exports){
'use strict';

var utils = require('../utils');

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

},{"../utils":25}],23:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};

},{"./../utils":25}],24:[function(require,module,exports){
'use strict';

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

},{}],25:[function(require,module,exports){
'use strict';

var bind = require('./helpers/bind');
var isBuffer = require('is-buffer');

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim
};

},{"./helpers/bind":15,"is-buffer":26}],26:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],27:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],28:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.App = undefined;

var _mainMenu = require('./states/mainMenu.js');

var _mainMenu2 = _interopRequireDefault(_mainMenu);

var _game = require('./states/game.js');

var _game2 = _interopRequireDefault(_game);

var _Net = require('./net/Net');

var _Net2 = _interopRequireDefault(_Net);

var _AssetService = require('./utils/AssetService');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var App = function App() {
    _classCallCheck(this, App);

    App.phaser = new Phaser.Game(760, 650, Phaser.CANVAS, 'game', {
        preload: preload,
        create: create
    });
};

function preload() {
    App.net = new _Net2.default();
    App.storage = { onGeneralData: new Phaser.Signal() };
    App.assetService = new _AssetService.AssetService();
}

function create() {
    App.phaser.state.add('mainMenu', (0, _mainMenu2.default)());
    App.phaser.state.add('game', (0, _game2.default)());

    App.phaser.state.start('mainMenu');

    App.net.getGeneralData(function (resp) {
        App.storage.generalData = resp[0][1];
        App.storage.onGeneralData.dispatch(App.storage.generalData);
        console.log('ok:' + resp); // ['method', {data}]
    }, function (e) {
        console.log('err:' + e);
    });
}

exports.App = App;


new App();

},{"./net/Net":45,"./states/game.js":46,"./states/mainMenu.js":47,"./utils/AssetService":48}],29:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = FadeOutIn;
function FadeOutIn(phaser, target) {
    var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    var tween = phaser.add.tween(target).to({ alpha: 0 }, 200, Phaser.Easing.Linear.None);
    tween.onComplete.add(function () {
        if (callback) callback();

        phaser.add.tween(target).to({ alpha: 1 }, 200, Phaser.Easing.Linear.None, true);
    });
    tween.start();
}

},{}],30:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _app = require('../app');

var _letter = require('./letter');

var _letter2 = _interopRequireDefault(_letter);

var _word = require('./word');

var _word2 = _interopRequireDefault(_word);

var _crossword = require('./crossword');

var _crossword2 = _interopRequireDefault(_crossword);

var _letterPalette = require('./letterPalette');

var _letterPalette2 = _interopRequireDefault(_letterPalette);

var _cluePhoto = require('./cluePhoto');

var _cluePhoto2 = _interopRequireDefault(_cluePhoto);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GOFactory = function () {
	function GOFactory() {
		_classCallCheck(this, GOFactory);

		this.phaser = _app.App.phaser;
	}

	_createClass(GOFactory, [{
		key: 'letter',
		value: function letter(x, y) {
			var label = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

			var letter = new _letter2.default(label);
			var l = letter.render();

			l.x = x;
			l.y = y;

			return letter;
		}
	}, {
		key: 'letterPalette',
		value: function letterPalette(x, y, columnNum, rowNum) {
			var lp = new _letterPalette2.default(columnNum, rowNum);
			var graph = lp.render(this.phaser);

			graph.x = x;
			graph.y = y;

			return lp;
		}
	}, {
		key: 'photo',
		value: function photo(x, y) {
			var cp = new _cluePhoto2.default();
			cp.render();

			cp.graph.x = x;
			cp.graph.y = y;

			return cp;
		}
	}, {
		key: 'crossword',
		value: function crossword(words) {
			var crossword = new _crossword2.default();
			crossword.render(words);

			return crossword;
		}
	}]);

	return GOFactory;
}();

exports.default = GOFactory;

},{"../app":28,"./cluePhoto":31,"./crossword":32,"./letter":33,"./letterPalette":34,"./word":35}],31:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _app = require("../app");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CluePhoto = function () {
    function CluePhoto() {
        _classCallCheck(this, CluePhoto);

        this.graph = null;
        this.photo = null; // pointer to phaser.sprite
    }

    _createClass(CluePhoto, [{
        key: "setPhoto",
        value: function setPhoto(val) {
            if (!this.photo) {
                this.photo = this.graph.create(0, 0, val);

                this.photo.x = 4;
                this.photo.y = 4;
                this.photo.scale.setTo(0.98, 0.98);
            } else {
                this.photo.loadTexture(val);
            }
        }
    }, {
        key: "render",
        value: function render() {
            this.graph = _app.App.phaser.add.group();
            this.graph.create(0, 0, 'bg_fot');

            return this.graph;
        }
    }]);

    return CluePhoto;
}();

exports.default = CluePhoto;

},{"../app":28}],32:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _app = require('./../app');

var _word = require('./word');

var _word2 = _interopRequireDefault(_word);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Crossword = function () {
    function Crossword() {
        _classCallCheck(this, Crossword);

        this.map = [];
        this.graph = null;
    }

    _createClass(Crossword, [{
        key: 'render',
        value: function render(words) {
            var _this = this;

            var cont = _app.App.phaser.add.group();
            var x = void 0,
                y = void 0;

            words.forEach(function (word) {
                var w = new _word2.default(word.text, word.direction);
                w.id = word.id;

                cont.add(w.render(_this.phaser));
                w.graph.x = word.pos.x * 32;
                w.graph.y = word.pos.y * 32;

                for (var i = 0; i < word.text.length; i++) {
                    x = word.pos.x + i * word.direction;
                    y = word.pos.y + i * !word.direction;

                    if (!_this.map[x]) _this.map[x] = [];

                    if (_this.map[x][y]) _this.map[x][y].push(w.graph.children[i]);else _this.map[x][y] = [w.graph.children[i]];
                }
            });

            words.forEach(function (word) {
                x = word.pos.x;
                y = word.pos.y;
                _this.map[x][y].forEach(function (letter) {
                    var ids = words.filter(function (w) {
                        return w.pos.x == x && w.pos.y == y;
                    }).map(function (w) {
                        return w.id;
                    });
                    letter.data.instance.setPrefix(ids.join('\\'));
                });
            });

            cont.data = { instance: this };
            this.graph = cont;
            return cont;
        }
    }]);

    return Crossword;
}();

exports.default = Crossword;

},{"./../app":28,"./word":35}],33:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _app = require('./../app');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Letter = function () {
	function Letter() {
		var label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
		var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

		_classCallCheck(this, Letter);

		this.label = label; // string
		this.prefix = prefix;
		this.state = 'default';

		this.id = null;
		this.graph = null; // pointer to phaser.group
		this._palette = null;
		this._label = null; // pointer to phaser.text
		this._prefix = null;
	}

	_createClass(Letter, [{
		key: 'render',
		value: function render() {
			var asset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'letter_empty';

			var bmp = _app.App.phaser.add.bitmapData(32, 32);
			bmp.draw(asset, 0, 0, 32, 32);

			var style = { font: "24px Arial", fill: "#000000", align: "center" };
			var group = _app.App.phaser.add.group();
			//group.inputEnableChildren = true;
			var sprite = group.create(0, 0, bmp);
			sprite.inputEnabled = true;
			sprite.input.useHandCursor = true;

			this._label = _app.App.phaser.add.text(6, 3, this.label, style, group);
			if (this.prefix != '') this._prefix = _app.App.phaser.add.text(1, 1, this.prefix, { font: "12px Arial", fill: "#000000", align: "center" }, group);

			this.graph = group;

			group.data = { instance: this };
			this._label.inputEnabled = false;

			return group; //48
		}
	}, {
		key: 'setPrefix',
		value: function setPrefix(prefix) {
			this.prefix = prefix;

			if (!this._prefix) this._prefix = _app.App.phaser.add.text(2, 0, this.prefix, { font: "12px Arial", fill: "#000000", align: "center" }, this.graph);else this._prefix.setText(this.prefix);
		}
	}, {
		key: 'hide',
		value: function hide() {
			this.graph.visible = false;
		}
	}, {
		key: 'show',
		value: function show() {
			this.graph.visible = true;
		}
	}, {
		key: 'setState',
		value: function setState(state) {
			if (this.state == 'block') return;

			var key = void 0;
			var sprite = this.graph.children[0];

			switch (state) {
				case 'default':
					key = 'letter_empty';break;
				case 'over':
					key = 'letter_over';break;
				case 'block':
					key = 'letter_block';
					//sprite.inputEnabled = false;
					//sprite.input.useHandCursor = false;
					break;
			}

			var bmd = _app.App.phaser.add.bitmapData(32, 32);
			bmd.draw(key, 0, 0, 32, 32);
			sprite.setTexture(bmd.texture);

			this.state = state;
		}
	}, {
		key: 'text',
		set: function set(val) {
			if (this.state == 'block') return;

			this.label = val.toUpperCase();
			this._label.setText(this.label);
		}
	}]);

	return Letter;
}();

exports.default = Letter;

},{"./../app":28}],34:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _letter = require('./letter');

var _letter2 = _interopRequireDefault(_letter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LetterPalette = function () {
    function LetterPalette(columnNum, rowNum) {
        _classCallCheck(this, LetterPalette);

        this.columnNum = columnNum;
        this.rowNum = rowNum;

        this.graph = null;
    }

    _createClass(LetterPalette, [{
        key: 'render',
        value: function render(phaser) {
            var cont = phaser.add.group();

            for (var i = 0; i < this.rowNum; i++) {
                for (var j = 0; j < this.columnNum; j++) {
                    var letter = new _letter2.default(String.fromCharCode(Math.floor(Math.random() * 32) + 1072)).render();
                    letter.x = j * (32 + 4);
                    letter.y = i * (32 + 4);

                    cont.add(letter);
                }
            }cont.data = { instance: this };
            this.graph = cont;
            return cont;
        }
    }, {
        key: 'generate',
        value: function generate(word) {
            var wLength = word.length;
            var w = word.split('');
            var letters = [];

            for (var i = 0; i < this.graph.children.length; i++) {
                letters.push(i < wLength ? w.splice(Math.floor(Math.random() * w.length), 1)[0] : String.fromCharCode(Math.floor(Math.random() * 32) + 1072));
            }this.graph.children.forEach(function (letter, i) {
                letter.data.instance.text = letters.splice(Math.floor(Math.random() * letters.length), 1)[0]; //shuffle
                letter.data.instance.show();
            });
        }
    }]);

    return LetterPalette;
}();

exports.default = LetterPalette;

},{"./letter":33}],35:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _app = require('././../app');

var _fadeOutIn = require('./../effects/fadeOutIn');

var _fadeOutIn2 = _interopRequireDefault(_fadeOutIn);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Word = function () {
    function Word(text) {
        var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        _classCallCheck(this, Word);

        this.id = null;
        this.graph = null;

        this.text = text; // actual word
        this.textArr = []; // guess word
        this.direction = direction; // 0 - vertical, 1 - horizontal
    }

    _createClass(Word, [{
        key: 'render',
        value: function render() {
            var cont = _app.App.phaser.add.group();
            var length = this.text.length - 1;

            for (var i = 0; i < this.text.length; i++) {
                var letter = _app.App.factory.letter((this.direction == 0 ? 0 : i) * 32, (this.direction == 1 ? 0 : i) * 32); //this.text[i]
                letter.id = i;
                cont.add(letter.graph);
                this.textArr.push('');
            }

            cont.data = { instance: this };
            this.graph = cont;
            return cont;
        }
    }, {
        key: 'fill',
        value: function fill(letter, letterFromPalette) {
            var nextLetter = null;
            var index = void 0;

            this.graph.children.some(function (letter, i) {
                if (letter.data.instance.label.length == 0) {
                    nextLetter = letter.data.instance;
                    index = i;
                }

                return nextLetter != null;
            });

            if (nextLetter) {
                nextLetter.text = letter;
                nextLetter._palette = letterFromPalette;
                this.textArr[index] = letter;

                return nextLetter;
            }

            return false;
        }
    }, {
        key: 'fillAt',
        value: function fillAt(index, letter) {
            this.graph.children[index].data.instance.text = letter;
            this.textArr[index] = letter;
        }
    }, {
        key: 'free',
        value: function free() {
            var _this = this;

            this.graph.children.forEach(function (letter) {
                var ld = letter.data.instance;
                ld.setState('default');
                _this.fillAt(ld.id, '');
            });
        }
    }, {
        key: 'isFilled',
        value: function isFilled() {
            return this.textArr.join('').length == this.text.length;
        }
    }, {
        key: 'isCorrect',
        value: function isCorrect() {
            return this.text == this.textArr.join('');
        }
    }, {
        key: 'setState',
        value: function setState(state) {
            this.graph.children.forEach(function (letter) {
                letter.data.instance.setState(state);
            });
        }
    }]);

    return Word;
}();

exports.default = Word;

},{"./../effects/fadeOutIn":29,"././../app":28}],36:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
        value: true
});
exports.Btn = undefined;

var _app = require('../app');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Btn = exports.Btn = function Btn() {
        var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 96;
        var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 96;
        var label = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
        var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

        _classCallCheck(this, Btn);

        var bd = _app.App.phaser.add.bitmapData(width, height);
        bd.draw('gui_game_btn', 0, 0, width, height);

        var group = _app.App.phaser.add.group();

        var sprite = group.create(0, 0, bd);
        sprite.inputEnabled = true;
        sprite.input.useHandCursor = true;

        this.label = _app.App.phaser.add.text(0, 0, label, { font: "24px Arial", fill: "#000000", align: "center", wordWrap: true }, group);
        //this.label.width = width;
        this.label.lineSpacing = -10;
        this.label.x = (width >> 1) - (this.label.width >> 1);
        this.label.y = (height >> 1) - (this.label.height >> 1);

        this.graph = group;

        group.onChildInputDown.add(function (target) {
                if (callback) callback();
        });
};

},{"../app":28}],37:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.HorizontalListController = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _app = require("../../app");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HorizontalListController = exports.HorizontalListController = function () {
    function HorizontalListController(pageSize, listGroup, btnPrev, btnNext) {
        var position = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

        _classCallCheck(this, HorizontalListController);

        this.position = position;
        this.pageSize = pageSize;
        this.size = 0;

        this.listGroup = listGroup;
        this.btnPrev = btnPrev.graph;
        this.btnNext = btnNext.graph;

        btnPrev.callback = this.prev.bind(this);
        btnNext.callback = this.next.bind(this);

        this.update();
    }

    _createClass(HorizontalListController, [{
        key: "update",
        value: function update() {
            this.size = this.listGroup.children.length;

            if (this.size > this.pageSize) {
                this.btnNext.x = this.listGroup.x + this.listGroup.mask.width - this.btnNext.width + 4;
                this.btnPrev.x = this.listGroup.x - this.btnPrev.width - 10;
                this.btnNext.visible = true;
                this.btnPrev.visible = true;
            } else {
                this.btnNext.visible = false;
                this.btnPrev.visible = false;
            }
        }
    }, {
        key: "next",
        value: function next() {
            if (this.position + this.pageSize < this.size) {
                ++this.position;

                _app.App.phaser.add.tween(this.listGroup).to({ x: this.listGroup.mask.x - this.listGroup.mask.width / this.pageSize * this.position }, 200, Phaser.Easing.Linear.None, true);
            }
        }
    }, {
        key: "prev",
        value: function prev() {
            if (this.position > 0) {
                --this.position;
                _app.App.phaser.add.tween(this.listGroup).to({ x: this.listGroup.mask.x - this.listGroup.mask.width / this.pageSize * this.position }, 200, Phaser.Easing.Linear.None, true);
            }
        }
    }]);

    return HorizontalListController;
}();

},{"../../app":28}],38:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ImgBtn = undefined;

var _app = require('../app');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ImgBtn = exports.ImgBtn = function ImgBtn() {
    var frameNormal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    var _this = this;

    var frameOver = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    _classCallCheck(this, ImgBtn);

    //let group = App.phaser.add.group();
    //group.inputEnableChildren = true;

    var imgData = _app.App.assetService.get(frameNormal);
    var sprite = _app.App.phaser.add.sprite(0, 0, imgData.atlas, imgData.key);
    sprite.inputEnabled = true;
    sprite.input.useHandCursor = true;

    sprite.events.onInputOver.add(function () {
        sprite.frameName = _app.App.assetService.get(frameOver).key;
    });

    sprite.events.onInputOut.add(function () {
        sprite.frameName = _app.App.assetService.get(frameNormal).key;
    });

    sprite.events.onInputDown.add(function () {
        if (_this.callback) _this.callback();
    });

    this.data = { instance: this };
    this.graph = sprite;
    this.callback = callback;

    // group.onChildInputDown.add((target)=>{
    //     if(callback)
    //         callback();
    // });
};

},{"../app":28}],39:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RightAswer = exports.WrongAnswer = undefined;

var _app = require("../app");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WrongAnswer = exports.WrongAnswer = function WrongAnswer() {
    _classCallCheck(this, WrongAnswer);

    var group = _app.App.phaser.add.group();

    this.label = _app.App.phaser.add.text(0, 0, 'Ответ неверный', { font: "24px Arial", fill: "#000000", align: "center", wordWrap: false }, group);
    //this.label.width = width;

    this.graph = group;
};

var RightAswer = exports.RightAswer = function RightAswer(word) {
    _classCallCheck(this, RightAswer);

    var graphics = _app.App.phaser.add.graphics(0, 0);
    graphics.beginFill(0x000000, 0.2);
    graphics.drawRect(0, 0, _app.App.phaser.world.width, _app.App.phaser.world.height);
    graphics.endFill();

    graphics.beginFill(0xFFFFFF, 1);
    graphics.lineStyle(2, 0xCDCDCD, 1);
    graphics.drawRect((_app.App.phaser.world.width >> 1) - 300 * 0.5, (_app.App.phaser.world.height >> 1) - 400 * 0.5, 300, 400);
    graphics.endFill();

    var group = _app.App.phaser.add.group();
    group.inputEnableChildren = true;

    group.add(graphics);
    var title = _app.App.phaser.add.text(0, 0, 'Слово разгадано!', { font: "24px Arial", fill: "#000000", align: "center" }, group);
    var answer = _app.App.phaser.add.text(0, 0, word.toUpperCase(), { font: "24px Arial", fill: "#000000", align: "center" }, group);
    //this.label.width = width;
    title.x = (_app.App.phaser.world.width >> 1) - (title.width >> 1);
    title.y = (_app.App.phaser.world.height >> 1) - 400 * 0.5 + 32;

    answer.x = (_app.App.phaser.world.width >> 1) - (answer.width >> 1);
    answer.y = (_app.App.phaser.world.height >> 1) - (answer.height >> 1);

    this.graph = group;
};

},{"../app":28}],40:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
        value: true
});
exports.MoneyBtn = undefined;

var _app = require("../app");

var _imgBtn = require("./imgBtn");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MoneyBtn = exports.MoneyBtn = function MoneyBtn() {
        _classCallCheck(this, MoneyBtn);

        this.graph = _app.App.phaser.add.group();

        var imgData = _app.App.assetService.get('img_money_back');
        this.graph.create(0, 0, imgData.atlas, imgData.key);

        var addMoney = new _imgBtn.ImgBtn('btn_add_money_normal', 'btn_add_money_over');
        this.graph.add(addMoney.graph);

        addMoney.graph.x = 130;
        addMoney.graph.y = 10;
};

},{"../app":28,"./imgBtn":38}],41:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
        value: true
});
exports.SelectLevelBtn = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _app = require('./../app');

var _imgBtn = require('./imgBtn');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SelectLevelBtn = exports.SelectLevelBtn = function () {
        function SelectLevelBtn(lvlDescription) {
                _classCallCheck(this, SelectLevelBtn);

                this.width = 200;
                this.height = 240;

                var group = _app.App.phaser.add.group();
                group.inputEnableChildren = true;

                // let graphics = App.phaser.add.graphics(0, 0);
                // graphics.beginFill(0xFFFFFF, 1);
                // graphics.lineStyle(2, 0xCDCDCD, 1);
                // graphics.drawRect(0, 0, width, height);
                // graphics.endFill();
                // group.add(graphics);
                var imgData = _app.App.assetService.get('img_category_back');
                group.create(0, 0, imgData.atlas, imgData.key);

                var btn = new _imgBtn.ImgBtn('btn_play_normal', 'btn_play_over');
                btn.graph.x = 8;
                btn.graph.y = this.height - 60;

                group.add(btn.graph);

                this.lvlMissionCount = _app.App.phaser.add.text(0, 140, '0 / 40', { font: "24px Arial", fill: "#000000", align: "center" }, group);
                this.lvlMissionCount.x = (this.width >> 1) - (this.lvlMissionCount.width >> 1);

                group.data = { instance: this };
                this.graph = group;
                this.stageId = null;
                this.missionId = 0;
        }

        _createClass(SelectLevelBtn, [{
                key: 'setProgress',
                value: function setProgress(current, all) {
                        this.lvlMissionCount.setText(current + '/' + all);
                        this.lvlMissionCount.x = (this.width >> 1) - (this.lvlMissionCount.width >> 1);
                }
        }]);

        return SelectLevelBtn;
}();

},{"./../app":28,"./imgBtn":38}],42:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
        value: true
});
exports.StagesList = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _app = require("../app");

var _selectLevelBtn = require("./selectLevelBtn");

var _horizontalListController = require("./controllers/horizontalListController");

var _imgBtn = require("./imgBtn");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var mask = null;
var controller = null;

var StagesList = exports.StagesList = function () {
        function StagesList() {
                _classCallCheck(this, StagesList);

                this.graph = _app.App.phaser.add.group();

                this.stages = _app.App.phaser.add.group();
                mask = _app.App.phaser.add.graphics(0, 0);
                this.stages.mask = mask;
                this.graph.add(this.stages);
                this.graph.add(mask);

                var prev = new _imgBtn.ImgBtn('btn_list_category_normal', 'btn_list_category_over');
                var next = new _imgBtn.ImgBtn('btn_list_category_normal', 'btn_list_category_over');
                next.graph.scale.x = -1;

                prev.graph.y = 60;
                next.graph.y = 60;

                this.graph.add(prev.graph);
                this.graph.add(next.graph);

                mask.inputEnabled = false;
                controller = new _horizontalListController.HorizontalListController(3, this.stages, prev, next);
        }

        _createClass(StagesList, [{
                key: "fill",
                value: function fill(data) {
                        var _this = this;

                        if (!data) return;

                        this.stages.removeAll();
                        this.stages.x = 0;
                        this.stages.y = 0;

                        var selectLevel = void 0;
                        data['stage_stat'].forEach(function (stage, i) {
                                selectLevel = new _selectLevelBtn.SelectLevelBtn(stage.description);

                                selectLevel.stageId = stage.id;
                                selectLevel.missionId = (data['mission_stat'].find(function (m) {
                                        return m.stage_stat_id == stage.id;
                                }) || {}).id;
                                selectLevel.setProgress(0, data['mission_stat'].filter(function (m) {
                                        return m.stage_stat_id == stage.id;
                                }).length);

                                selectLevel.graph.x = i * (selectLevel.width + 8);
                                selectLevel.graph.y = 0;

                                _this.stages.add(selectLevel.graph);

                                selectLevel.graph.onChildInputDown.add(function (target) {
                                        _app.App.storage.stageId = target.parent.data.instance.stageId;
                                        _app.App.storage.missionId = target.parent.data.instance.missionId;
                                        console.log(_app.App.storage.stageId, _app.App.storage.missionId);
                                        _app.App.phaser.state.start('game');
                                });
                        });

                        mask.beginFill(0xffffff);
                        mask.drawRect(0, 0, 3 * (selectLevel.width + 8), selectLevel.height);
                        mask.x = this.stages.x;
                        mask.y = this.stages.y;
                        controller.update();
                }
        }]);

        return StagesList;
}();

},{"../app":28,"./controllers/horizontalListController":37,"./imgBtn":38,"./selectLevelBtn":41}],43:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _MD = require('./MD5');

var _MD2 = _interopRequireDefault(_MD);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var instance = _axios2.default.create({
	//baseURL: 'https://some-domain.com/api/',
	timeout: 1000,
	headers: {
		'Content-Type': 'application/x-www-form-urlencoded',
		'Accept': 'text/json'
	}
});

function completeHandler_obf(res, callback, error) {
	if (res.error) {
		//rTracer.trace( "ERROR => DataLoader\\completeHandler_obf: " + data.response.error_code + " => " + data.response.error_message, rTracer.ERROR);

		// if (dict[event.target][1] == null)
		// {
		// 	var msg = (data.response.error_message).toString();
		// 	//rTracer.trace( msg, rTracer.ERROR);
		// } 
		// else 
		// {
		// 	error(data.response);
		// };
	} else {
		callback(res.data);
	}
}

function httpStatusHandler_obf(event) {
	//    rTracer.trace("httpStatusHandler: " + event);
}

function _ioError(ev) {
	try {
		rTracer.trace("ERROR => DataLoader\\_ioError: " + ev.text, rTracer.ERROR);

		var error = dict[ev.target][1];

		if (error != null) error(ev);

		delete dict[ev.target];
	} catch (err) {
		rTracer.trace("ERROR => DataLoader\\_ioError: " + err.message, rTracer.ERROR);
	}
}

function _secureError(ev) {
	try {
		rTracer.trace("ERROR => DataLoader\\_secureError: " + ev.text, rTracer.ERROR);

		var error = dict[ev.target][1];

		if (error != null) error(ev);

		delete dict[ev.target];
	} catch (err) {
		rTracer.trace("ERROR => DataLoader\\_secureError: " + err.message, rTracer.ERROR);
	}
}

function getData_obf(method, data) {
	return { m: '|||' + (data.uid || 'uid') + '||100200300||' + (data.s_key || 's_key') + '||-1|||m||0||0||' + method + '|||m||0||1||{}'

		// data.method 	= method;
		// data.format 	= DataLoader.RESPONSE_DATA_FORMAT;			
		// data.api_server = DataLoader.SERVER_URL; 
		// data.v 			= DataLoader.API_VERSION;

		// var sigArray = []			
		// var result = '';

		// for (var param in data)
		// {
		// 	var value = data[param];
		// 	let type = typeof value;
		// 	if (!(type = 'string') && !(Number.isInteger(value)))
		// 	{
		// 		data[param] = JSON.stringify(value);									
		// 	}			 
		// }
		// for (var p in data)
		// {
		// 	sigArray.push(`${p}=${data[p]}`);				 
		// }
		// sigArray.sort();

		// sigArray.forEach(s => result+=s);

		// data.sig = MD5.encrypt( DataLoader.api_id + result + DataLoader.secret_key);			
		// data.api_id = DataLoader.api_id;
		// data.timestamp = Date.now();
		// data.random = Math.abs( Math.round(Math.random() * 1000) - 500);	

		// var str = '';
		// for (var v in data)
		// {
		// 	str += `${v}=${data[v]}&`;			 
		// }	

	};return str.slice(0, str.length - 1);
}

var DataLoader = function () {
	function DataLoader() {
		_classCallCheck(this, DataLoader);
	}

	_createClass(DataLoader, [{
		key: 'request_obf',


		//public const VKServer:String 	= 'http://46.4.95.181/fotocrossword/ok/api.php';
		//public const VKSecret:String 	= 'F6F24DDD8B1602C25CD44455';	// Секретный ключ приложения

		//public const VKPublic:String 	= 'CBANIQFMABABABABA';			// Публичный ключ приложения

		value: function request_obf(method) {
			var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
			var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
			var error = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;


			// if (DataLoader.REQUEST_HTTP_MODE == 'POST')
			// {

			// 	instance.post(DataLoader.SERVER_URL,
			// 		getData_obf(method, data)
			// 	)
			// 	.then(function (response) {
			// 		//console.log(response);
			// 		completeHandler_obf(response, callback, error);
			// 	})
			// 	.catch(function (error) {
			// 		console.log(error);
			// 		//lr.addEventListener(IOErrorEvent.IO_ERROR, 				this._ioError);
			// 		//lr.addEventListener(SecurityErrorEvent.SECURITY_ERROR, 	this._secureError);
			// 	});
			// } 
			// else 
			// {
			// 	axios.get(DataLoader.SERVER_URL, {
			// 		// headers: {
			// 		// 	'Access-Control-Allow-Origin': '*',
			// 		//   },
			// 		params: getData_obf(method, data)
			// 	})
			// 	.then(function (response) {
			// 		//lr.addEventListener(Event.COMPLETE, completeHandler_obf); 
			// 		//console.log(response);
			// 		completeHandler_obf(response, callback, error);
			// 	})
			// 	.catch(function (error) {
			// 		console.log(error);
			// 		//lr.addEventListener(IOErrorEvent.IO_ERROR, 				this._ioError);
			// 		//lr.addEventListener(SecurityErrorEvent.SECURITY_ERROR, 	this._secureError);
			// 	});
			// }		

			//lr.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler_obf); // Возвращает код состояния HTTP запроса (не ошибка - просто состояние)


			//rTracer.trace(request.data);

			//lr.load(request);

			_axios2.default.get(DataLoader.SERVER_URL, {
				// headers: {
				// 	'Access-Control-Allow-Origin': '*',
				//   },
				params: getData_obf(method, data)
			}).then(function (response) {
				//lr.addEventListener(Event.COMPLETE, completeHandler_obf); 
				//console.log(response);
				completeHandler_obf(response, callback, error);
			}).catch(function (error) {
				console.log(error);
				//lr.addEventListener(IOErrorEvent.IO_ERROR, 				this._ioError);
				//lr.addEventListener(SecurityErrorEvent.SECURITY_ERROR, 	this._secureError);
			});
		}
	}], [{
		key: 'RESPONSE_DATA_FORMAT',
		get: function get() {
			return 'JSON';
		}
	}, {
		key: 'API_VERSION',

		//static get REQUEST_HTTP_MODE() {return 'POST'};
		get: function get() {
			return '1.0';
		}
	}, {
		key: 'SERVER_URL',
		get: function get() {
			return "https://maganza.ru/fsnew/vk/htdocs/index.php";
		}
	}, {
		key: 'api_id',
		get: function get() {
			return "3226070";
		}
	}, {
		key: 'secret_key',
		get: function get() {
			return "zyn1WEQdzV92jTYqDevK";
		}
	}]);

	return DataLoader;
}();

exports.default = DataLoader;

},{"./MD5":44,"axios":1}],44:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MD5 = function () {
    function MD5() {
        _classCallCheck(this, MD5);
    }

    _createClass(MD5, null, [{
        key: "encrypt",
        value: function encrypt(data) {
            var x = [];
            var k, AA, BB, CC, DD, a, b, c, d;
            var S11 = 7,
                S12 = 12,
                S13 = 17,
                S14 = 22;
            var S21 = 5,
                S22 = 9,
                S23 = 14,
                S24 = 20;
            var S31 = 4,
                S32 = 11,
                S33 = 16,
                S34 = 23;
            var S41 = 6,
                S42 = 10,
                S43 = 15,
                S44 = 21;

            data = MD5.Utf8Encode(data);

            x = MD5.ConvertToWordArray(data);

            a = 0x67452301;b = 0xEFCDAB89;c = 0x98BADCFE;d = 0x10325476;

            for (k = 0; k < x.length; k += 16) {
                AA = a;BB = b;CC = c;DD = d;
                a = MD5.FF(a, b, c, d, x[k + 0], S11, 0xD76AA478);
                d = MD5.FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);
                c = MD5.FF(c, d, a, b, x[k + 2], S13, 0x242070DB);
                b = MD5.FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);
                a = MD5.FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);
                d = MD5.FF(d, a, b, c, x[k + 5], S12, 0x4787C62A);
                c = MD5.FF(c, d, a, b, x[k + 6], S13, 0xA8304613);
                b = MD5.FF(b, c, d, a, x[k + 7], S14, 0xFD469501);
                a = MD5.FF(a, b, c, d, x[k + 8], S11, 0x698098D8);
                d = MD5.FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);
                c = MD5.FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);
                b = MD5.FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);
                a = MD5.FF(a, b, c, d, x[k + 12], S11, 0x6B901122);
                d = MD5.FF(d, a, b, c, x[k + 13], S12, 0xFD987193);
                c = MD5.FF(c, d, a, b, x[k + 14], S13, 0xA679438E);
                b = MD5.FF(b, c, d, a, x[k + 15], S14, 0x49B40821);
                a = MD5.GG(a, b, c, d, x[k + 1], S21, 0xF61E2562);
                d = MD5.GG(d, a, b, c, x[k + 6], S22, 0xC040B340);
                c = MD5.GG(c, d, a, b, x[k + 11], S23, 0x265E5A51);
                b = MD5.GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);
                a = MD5.GG(a, b, c, d, x[k + 5], S21, 0xD62F105D);
                d = MD5.GG(d, a, b, c, x[k + 10], S22, 0x2441453);
                c = MD5.GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);
                b = MD5.GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);
                a = MD5.GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);
                d = MD5.GG(d, a, b, c, x[k + 14], S22, 0xC33707D6);
                c = MD5.GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);
                b = MD5.GG(b, c, d, a, x[k + 8], S24, 0x455A14ED);
                a = MD5.GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);
                d = MD5.GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);
                c = MD5.GG(c, d, a, b, x[k + 7], S23, 0x676F02D9);
                b = MD5.GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);
                a = MD5.HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);
                d = MD5.HH(d, a, b, c, x[k + 8], S32, 0x8771F681);
                c = MD5.HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);
                b = MD5.HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);
                a = MD5.HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);
                d = MD5.HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);
                c = MD5.HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);
                b = MD5.HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);
                a = MD5.HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);
                d = MD5.HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);
                c = MD5.HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);
                b = MD5.HH(b, c, d, a, x[k + 6], S34, 0x4881D05);
                a = MD5.HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);
                d = MD5.HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);
                c = MD5.HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);
                b = MD5.HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);
                a = MD5.II(a, b, c, d, x[k + 0], S41, 0xF4292244);
                d = MD5.II(d, a, b, c, x[k + 7], S42, 0x432AFF97);
                c = MD5.II(c, d, a, b, x[k + 14], S43, 0xAB9423A7);
                b = MD5.II(b, c, d, a, x[k + 5], S44, 0xFC93A039);
                a = MD5.II(a, b, c, d, x[k + 12], S41, 0x655B59C3);
                d = MD5.II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);
                c = MD5.II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);
                b = MD5.II(b, c, d, a, x[k + 1], S44, 0x85845DD1);
                a = MD5.II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);
                d = MD5.II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);
                c = MD5.II(c, d, a, b, x[k + 6], S43, 0xA3014314);
                b = MD5.II(b, c, d, a, x[k + 13], S44, 0x4E0811A1);
                a = MD5.II(a, b, c, d, x[k + 4], S41, 0xF7537E82);
                d = MD5.II(d, a, b, c, x[k + 11], S42, 0xBD3AF235);
                c = MD5.II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);
                b = MD5.II(b, c, d, a, x[k + 9], S44, 0xEB86D391);
                a = MD5.AddUnsigned(a, AA);
                b = MD5.AddUnsigned(b, BB);
                c = MD5.AddUnsigned(c, CC);
                d = MD5.AddUnsigned(d, DD);
            }

            var temp = MD5.WordToHex(a) + MD5.WordToHex(b) + MD5.WordToHex(c) + MD5.WordToHex(d);

            return temp.toLowerCase();
        }
    }, {
        key: "RotateLeft",
        value: function RotateLeft(lValue, iShiftBits) {
            return lValue << iShiftBits | lValue >>> 32 - iShiftBits;
        }
    }, {
        key: "AddUnsigned",
        value: function AddUnsigned(lX, lY) {
            var lX4, lY4, lX8, lY8, lResult;
            lX8 = lX & 0x80000000;
            lY8 = lY & 0x80000000;
            lX4 = lX & 0x40000000;
            lY4 = lY & 0x40000000;
            lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);
            if (lX4 & lY4) {
                return lResult ^ 0x80000000 ^ lX8 ^ lY8;
            }
            if (lX4 | lY4) {
                if (lResult & 0x40000000) {
                    return lResult ^ 0xC0000000 ^ lX8 ^ lY8;
                } else {
                    return lResult ^ 0x40000000 ^ lX8 ^ lY8;
                }
            } else {
                return lResult ^ lX8 ^ lY8;
            }
        }
    }, {
        key: "F",
        value: function F(x, y, z) {
            return x & y | ~x & z;
        }
    }, {
        key: "G",
        value: function G(x, y, z) {
            return x & z | y & ~z;
        }
    }, {
        key: "H",
        value: function H(x, y, z) {
            return x ^ y ^ z;
        }
    }, {
        key: "I",
        value: function I(x, y, z) {
            return y ^ (x | ~z);
        }
    }, {
        key: "FF",
        value: function FF(a, b, c, d, x, s, ac) {
            a = MD5.AddUnsigned(a, MD5.AddUnsigned(MD5.AddUnsigned(MD5.F(b, c, d), x), ac));
            return MD5.AddUnsigned(MD5.RotateLeft(a, s), b);
        }
    }, {
        key: "GG",
        value: function GG(a, b, c, d, x, s, ac) {
            a = MD5.AddUnsigned(a, MD5.AddUnsigned(MD5.AddUnsigned(MD5.G(b, c, d), x), ac));
            return MD5.AddUnsigned(MD5.RotateLeft(a, s), b);
        }
    }, {
        key: "HH",
        value: function HH(a, b, c, d, x, s, ac) {
            a = MD5.AddUnsigned(a, MD5.AddUnsigned(MD5.AddUnsigned(MD5.H(b, c, d), x), ac));
            return MD5.AddUnsigned(MD5.RotateLeft(a, s), b);
        }
    }, {
        key: "II",
        value: function II(a, b, c, d, x, s, ac) {
            a = MD5.AddUnsigned(a, MD5.AddUnsigned(MD5.AddUnsigned(MD5.I(b, c, d), x), ac));
            return MD5.AddUnsigned(MD5.RotateLeft(a, s), b);
        }
    }, {
        key: "ConvertToWordArray",
        value: function ConvertToWordArray(string) {
            var lWordCount;
            var lMessageLength = string.length;
            var lNumberOfWords_temp1 = lMessageLength + 8;
            var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - lNumberOfWords_temp1 % 64) / 64;
            var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
            var lWordArray = []; //new Array(lNumberOfWords-1);
            var lBytePosition = 0;
            var lByteCount = 0;
            while (lByteCount < lMessageLength) {
                lWordCount = (lByteCount - lByteCount % 4) / 4;
                lBytePosition = lByteCount % 4 * 8;
                lWordArray[lWordCount] = lWordArray[lWordCount] | string.charCodeAt(lByteCount) << lBytePosition;
                lByteCount++;
            }
            lWordCount = (lByteCount - lByteCount % 4) / 4;
            lBytePosition = lByteCount % 4 * 8;
            lWordArray[lWordCount] = lWordArray[lWordCount] | 0x80 << lBytePosition;
            lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
            lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
            return lWordArray;
        }
    }, {
        key: "WordToHex",
        value: function WordToHex(lValue) {
            var WordToHexValue = "",
                WordToHexValue_temp = "",
                lByte,
                lCount;
            for (lCount = 0; lCount <= 3; lCount++) {
                lByte = lValue >>> lCount * 8 & 255;
                WordToHexValue_temp = "0" + lByte.toString(16);
                WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2);
            }
            return WordToHexValue;
        }
    }, {
        key: "Utf8Encode",
        value: function Utf8Encode(string) {

            var utftext = "";

            for (var n = 0; n < string.length; n++) {

                var c = string.charCodeAt(n);

                if (c < 128) {
                    utftext += String.fromCharCode(c);
                } else if (c > 127 && c < 2048) {
                    utftext += String.fromCharCode(c >> 6 | 192);
                    utftext += String.fromCharCode(c & 63 | 128);
                } else {
                    utftext += String.fromCharCode(c >> 12 | 224);
                    utftext += String.fromCharCode(c >> 6 & 63 | 128);
                    utftext += String.fromCharCode(c & 63 | 128);
                }
            }

            return utftext;
        }
    }]);

    return MD5;
}();

exports.default = MD5;

},{}],45:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataLoader = require('./DataLoader');

var _DataLoader2 = _interopRequireDefault(_DataLoader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Net = function () {
	//-----------------------/ Функции /---------------------------------------
	function Net() {
		_classCallCheck(this, Net);

		this.oDataLoader = new _DataLoader2.default();
	}

	_createClass(Net, [{
		key: 'init',
		value: function init(oGameData) {
			this.oDataLoader.SERVER_URL = oGameData.SERVER_URL;
			this.oDataLoader.api_id = String(oGameData.api_id);
			this.oDataLoader.secret_key = oGameData.secret_key;
		}
	}, {
		key: 'getGeneralData',
		value: function getGeneralData(callback) {
			var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

			//http://www.sweetbear.info/base/od/htdocs/index.php?m=|||uid||100200300|||s_key||-1|||m||0||0||general.get_data|||m||0||1||{}
			this.oDataLoader.request_obf('general.get_data', {}, callback, error);
		}

		//-------------------------------/ Общие методы /--------------------------------------------

		/**
  * Возвращает текущую стоимость boost'ов.
  * @param	callback функция обратного вызова
  */

	}, {
		key: 'getBoostCost',
		value: function getBoostCost(callback) {
			var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

			this.oDataLoader.request_obf('getBoostsCost', {}, callback, error);
		}

		/**
  * Возвращает информацию о текущем турнире.
  * @param	callback функция обратного вызова
  */

	}, {
		key: 'getGameProps',
		value: function getGameProps(callback) {
			var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

			this.oDataLoader.request_obf('getGameProps', {}, callback, error);
		}

		/**
  * Возвращает статистику по игре за последние 1000 дней исключая текущий.
  * @param	iType - Тип возвращаемой статистики (0 - топ лучших игроков, 1 - топ по городам, 2 - топ по полу игроков, 3 - топ по году рождения игроков).
  * @param	callback - функция обратного вызова
  * @param	iSourse - Источник данных (0 — максимально набранное количество очков пользователем за всю игру, 1 - максимально набранное количество очков в турнире среди друзей, 2 - максимально набранное количество очков в предыдущем турнире среди друзей).
  * @param	iLimit - Количество возвращаемых строк (максимум 1000, по умолчанию 100).
  */

	}, {
		key: 'getGameStatistic',
		value: function getGameStatistic(iType, callback) {
			var iSourse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
			var iLimit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 100;

			this.oDataLoader.request_obf('getGameStatistic', { type: iType, source: iSourse, limit: iLimit }, callback);
		}

		/**
  * Возвращает настройки приложения
  * @param	callback функция обратного вызова
  */

	}, {
		key: 'getSettings',
		value: function getSettings(callback, error) {
			this.oDataLoader.request_obf('getSettings', {}, callback, error);
		}

		/**
  * Возвращает список последних завершенных турниров с призовым фондом.
  * @param	callback - функция обратного вызова
  * @param	iAccount - Количество возвращаемых завершенных турниров (по умолчанию 1).
  */

	}, {
		key: 'getTournamentLog',
		value: function getTournamentLog(callback) {
			var iAccount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

			this.oDataLoader.request_obf('getTournamentLog', { account: iAccount }, callback);
		}

		/**
  * Возвращает рейтинг пользователей в турнире с призовым фондом.
  * @param	sUid - Идентификатор пользователя.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'getUserRating',
		value: function getUserRating(sUid, callback) {
			this.oDataLoader.request_obf('getUserRating', { uid: sUid }, callback);
		}

		/**
  * Возвращает список товаров возможных для покупки через валюту социальной сети.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'getExtendedGoods',
		value: function getExtendedGoods(callback) {
			var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

			this.oDataLoader.request_obf('getExtendedGoods', {}, callback, error);
		}
		//---------------------------------/ Игрок /-------------------------------------------------

		/**
  * Покупает указанное количество boost'ов.
  * @param	sUid - Идентификатор пользователя.
  * @param	sNums - Перечисляет через запятую номера boost'ов.
  * @param	sAccounts - Перечисляет через запятую в соответствующих позициях количество покупаемых boost'ов (по умолчанию 1).
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'buyBoostItems',
		value: function buyBoostItems(sUid, sNums, sAccounts, callback, error) {
			this.oDataLoader.request_obf('buyBoostItems', { uid: sUid, nums: sNums, accounts: sAccounts }, callback, error);
		}

		/**
  * Покупает билет для участия пользователя в турнире с призовым фондом, данный билет действует до окончания турнира.
  * @param	sUid - Идентификатор пользователя.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'buyTournamentTicket',
		value: function buyTournamentTicket(sUid, callback) {
			this.oDataLoader.request_obf('buyTournamentTicket', { uid: sUid }, callback);
		}

		/**
  * Возвращает список пользователей, которым невозможно сделать подарки boost'ов или энергии.
  * @param	sUid - Идентификатор пользователя.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'getGiftStatus',
		value: function getGiftStatus(sUid, callback) {
			var error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

			this.oDataLoader.request_obf('getGiftStatus', { uid: sUid }, callback, error);
		}

		/**
  * Возвращает список boost'от которые есть у игрока.
  * @param	sUid - Идентификатор пользователя.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'getUserBoosts',
		value: function getUserBoosts(sUid, callback) {
			this.oDataLoader.request_obf('getUserBoosts', { uid: sUid }, callback);
		}

		/**
  * Возвращает данные пользователя
  * @param	oGameUser	- пользователь
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'getUserProfile',
		value: function getUserProfile(oGameUser, callback) {
			var sFids = String(oGameUser.uid);
			for (var iIndex = 0; iIndex < oGameUser.aAppFriends.length; iIndex++) {
				sFids += ',' + String(oGameUser.aAppFriends[iIndex].uid);
			}

			this.oDataLoader.request_obf('getUserProfile', { uids: oGameUser.uid, fids: sFids, entering: { name: oGameUser.name, surname: oGameUser.surname, gender: oGameUser.gender, city: oGameUser.city, country: oGameUser.country } }, callback);
		}

		/**
  * Возвращает данные пользователя и его друзей
  * @param	oGameUser	- пользователь
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'getUserAndFriendProfile',
		value: function getUserAndFriendProfile(oGameUser, callback) {
			var sFids = String(oGameUser.uid);

			for (var iIndex = 0; iIndex < oGameUser.aAppFriends.length; iIndex++) {
				sFids += ',' + oGameUser.aAppFriends[iIndex].uid;
			}

			this.oDataLoader.request_obf('getUserProfile', { uids: sFids, fids: sFids }, callback);
		}

		/**
  * Дарит энергию другому игроку, при этом дарящий игрок никаких средств на это не тратит. Единственное ограничение — дарить энергию можно не чаще 1го раза в 10 минут.
  * @param	sFromUid - Идентификатор пользователя от кого сообщение.
  * @param	sToUid - Идентификатор пользователя которому предназначено сообщение.
  * @param	callback - функция обратного вызова
  * @param	sMessage - Текст отправляемого сообщения, максимальная длина 300 символов (по умолчанию «Принимай энергию в подарок!»).
  */

	}, {
		key: 'giftPowerItem',
		value: function giftPowerItem(sFromUid, sToUid, callback) {
			var sMessage = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "Принимай энергию в подарок";

			this.oDataLoader.request_obf('giftPowerItem', { from_uid: sFromUid, to_uid: sToUid, message: sMessage }, callback);
		}

		/**
  * Дарит boost другому игроку, при этом дарящий игрок никаких средств на этот boost не тратит. Единственное ограничение — дарить boost'ы можно не чаще 1го раза в 10 минут.
  * @param	sFromUid - Идентификатор пользователя от кого сообщение.
  * @param	sToUid - Идентификатор пользователя которому предназначено сообщение.
  * @param	iNum - Номер boost'а.
  * @param	callback - функция обратного вызова
  * @param	sMessage - Текст отправляемого сообщения, максимальная длина 300 символов (по умолчанию «Принимай энергию в подарок!»).
  */

	}, {
		key: 'giftBoostItem',
		value: function giftBoostItem(sFromUid, sToUid, iNum, callback) {
			var sMessage = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "Принимай boost в подарок!";

			this.oDataLoader.request_obf('giftBoostItem', { from_uid: sFromUid, to_uid: sToUid, num: iNum, message: sMessage }, callback);
		}

		/**
  * Списывает boost у пользователя как использованный.
  * @param	sUid - Идентификатор пользователя.
  * @param	iNum - Номер boost'а.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'useBoost',
		value: function useBoost(sUid, iNum, callback) {
			var error = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

			this.oDataLoader.request_obf('useBoost', { uid: sUid, num: iNum }, callback);
		}

		//--------------------------/ Сообщения /-------------------------------------------------

		/**
  * Возвращает список непрочитанных сообщений.
  * @param	sUid - Идентификатор пользователя.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'getUnreadMessage',
		value: function getUnreadMessage(sUid, callback) {
			var error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

			this.oDataLoader.request_obf('getUnreadMessages', { uid: sUid }, callback, error);
		}

		/**
  * Отправляет другому пользователю сообщение с просьбой прислать бустер, предыдущее сообщение об этом будет удалено.
  * @param	sFromUid - Идентификатор пользователя от кого сообщение.
  * @param	sToUids - Идентификаторы пользователей котором предназначено сообщение.( через запятую)
  * @param	iIdBoost - Идентификатор бустера который необходим.
  * @param	callback - функция обратного вызова
  * @param	sMessage - Текст отправляемого сообщения, максимальная длина 300 символов.
  */

	}, {
		key: 'sendBoostRequest',
		value: function sendBoostRequest(sFromUid, sToUids, iIdBoost, callback) {
			var sMessage = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "Не мог бы ты мне выслать boost.";

			this.oDataLoader.request_obf('sendBoostRequest', { from_uid: sFromUid, to_uid: sToUids, num: iIdBoost, message: sMessage }, callback);
		}

		/**
  * Отправляет другому пользователю сообщение с просьбой прислать энергию, предыдущее сообщение об этом будет удалено.
  * @param	sFromUid - Идентификатор пользователя от кого сообщение.
  * @param	sToUid - Идентификатор пользователя которому предназначено сообщение.
  * @param	callback - функция обратного вызова
  * @param	sMessage - Текст отправляемого сообщения, максимальная длина 300 символов.
  */

	}, {
		key: 'sendPowerRequest',
		value: function sendPowerRequest(sFromUid, sToUid, callback) {
			var sMessage = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "Не мог бы ты мне выслать энергии.";

			this.oDataLoader.request_obf('sendPowerRequest', { from_uid: sFromUid, to_uid: sToUid, message: sMessage }, callback);
		}

		/**
  * Помечает сообщения как прочитанные.
  * @param	sUid - Идентификатор пользователя.
  * @param	sMid - Перечисляет через запятую идентификаторы сообщений.
  * @param	callback - функция обратного вызова
  * @param	error - функция обработки ошибки
  */

	}, {
		key: 'setMessagesAsRead',
		value: function setMessagesAsRead(sUid, sMid, callback) {
			var error = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

			this.oDataLoader.request_obf('setMessagesAsRead', { uid: sUid, mids: sMid }, callback, error);
		}

		//-------------------------/ Мини игры /-------------------------------------------------

		/**
  * Вызывается при старте новой игровой сессии, приводит к уменьшению жизни на единицу. Если жизней нет возвращает ошибку.
  * @param	sUid - Идентификатор пользователя.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'startGame',
		value: function startGame(sUid, callback) {
			var error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

			this.oDataLoader.request_obf('startGame', { uid: sUid }, callback, error);
		}

		/**
  * Записывает результат игры пользователя.
  * @param	sUid - Идентификатор пользователя.
  * @param	iScore - Набранные пользователем очки за время игры.
  * @param	iXP - Набранный пользователем опыт за игру.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'storeGameResult',
		value: function storeGameResult(sUid, iScore, iXP, callback) {
			var error = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

			this.oDataLoader.request_obf('storeGameResult', { uid: sUid, score: iScore, experience: iXP }, callback, error);
		}

		//------------------------/ Фотозагадки /---------------------------------------------------

		/**
  * Разрешает доступ к игровой категории. Если категория платная, то осуществляется покупка доступа к ней.
  * @param	sUid - Идентификатор пользователя.
  * @param   sCatId - Идентификатор категории.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_buyCategory',
		value: function puzzle_buyCategory(sUid, sCatId, callback) {
			var error = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

			this.oDataLoader.request_obf('puzzle_buyCategory', { uid: sUid, cid: sCatId }, callback, error);
		}

		/**
  * Разрешает доступ к уровню в категории. Если уровень в категории платный, то осуществляется покупка доступа к нему.
  * @param	sUid - Идентификатор пользователя.
  * @param   sCatId - Идентификатор категории.
  * @param   sLvlId - Номер уровня в категории.
  * @param   sPayBoost - Идентификатор boost'а, которым оплачивает пользователь вместо игровой валюты.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_buyLevel',
		value: function puzzle_buyLevel(sUid, sCatId, sLvlId, sPayBoost, callback) {
			var error = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

			if (sPayBoost == "") this.oDataLoader.request_obf('puzzle_buyLevel', { uid: sUid, cid: sCatId, lid: sLvlId }, callback, error);else this.oDataLoader.request_obf('puzzle_buyLevel', { uid: sUid, cid: sCatId, lid: sLvlId, payboost: sPayBoost }, callback, error);
		}

		/**
  * Удаляет все лишние буквы.
  * @param	sUid - Идентификатор пользователя.
  * @param   sCatId - Идентификатор категории.
  * @param   sLvlId - Номер уровня в категории.
  * @param   sImgId - Номер картинки в уровне.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_clearTrash',
		value: function puzzle_clearTrash(sUid, sCatId, sLvlId, sImgId, callback) {
			var error = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

			this.oDataLoader.request_obf('puzzle_clearTrash', { uid: sUid, cid: sCatId, lid: sLvlId, iid: sImgId }, callback, error);
		}

		/**
  * Принимает от пользователя ответ и, в случае верного ответа, завершает игру.
  * @param	sUid - Идентификатор пользователя.
  * @param   sCatId - Идентификатор категории.
  * @param   sLvlId - Номер уровня в категории.
  * @param   sImgId - Номер картинки в уровне.
  * @param   sWord - Ответ на загадку.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_completedGame',
		value: function puzzle_completedGame(sUid, sCatId, sLvlId, sImgId, sWord, callback) {
			var error = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;

			this.oDataLoader.request_obf('puzzle_completedGame', { uid: sUid, cid: sCatId, lid: sLvlId, iid: sImgId, word: sWord }, callback, error);
		}

		/**
  * Возвращает список возможных категорий.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_getCategorys',
		value: function puzzle_getCategorys(callback) {
			var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

			this.oDataLoader.request_obf('puzzle_getCategorys', {}, callback, error);
		}

		/**
  * Возвращает настройки для модуля фотозагадки.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_getConfig',
		value: function puzzle_getConfig(callback) {
			var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

			this.oDataLoader.request_obf('puzzle_getConfig', {}, callback, error);
		}

		/**
  * Возвращает список картинок на уровне.
  * @param   sCatId - Идентификатор категории.
  * @param	sLvlId - Номер уровня в категории.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_getImages',
		value: function puzzle_getImages(sCatId, sLvlId, callback) {
			var error = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

			this.oDataLoader.request_obf('puzzle_getImages', { lid: sLvlId, cid: sCatId }, callback, error);
		}

		/**
  * Возвращает список уровней для указанной категории.
  * @param   sCatId - Идентификатор категории.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_getLevels',
		value: function puzzle_getLevels(sCatId, callback) {
			var error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

			this.oDataLoader.request_obf('puzzle_getLevels', { cid: sCatId }, callback, error);
		}

		/**
  * Показывает подписи к картинкам.
  * @param	sUid - Идентификатор пользователя.
  * @param   sCatId - Идентификатор категории.
  * @param   sLvlId - Номер уровня в категории.
  * @param   sImgId - Номер картинки в уровне.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_getTitles',
		value: function puzzle_getTitles(sUid, sCatId, sLvlId, sImgId, callback) {
			var error = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

			this.oDataLoader.request_obf('puzzle_getTitles', { uid: sUid, cid: sCatId, lid: sLvlId, iid: sImgId }, callback, error);
		}

		/**
  * Возвращает список категорий пользователя, которые он купил и/или начал играть.
  * @param	sUid - Идентификатор пользователя.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_getUserCategorys',
		value: function puzzle_getUserCategorys(sUid, callback) {
			var error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

			this.oDataLoader.request_obf('puzzle_getUserCategorys', { uid: sUid }, callback, error);
		}

		/**
  * Возвращает список картинок (начатые или законченные на уровне) имеющихся у пользователя.
  * @param	sUid - Идентификатор пользователя.
  * @param   sCatId - Идентификатор категории.
  * @param   sLvlId - Номер уровня в категории.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_getUserImage',
		value: function puzzle_getUserImage(sUid, sCatId, sLvlId, callback) {
			var error = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

			this.oDataLoader.request_obf('puzzle_getUserImages', { uid: sUid, cid: sCatId, lid: sLvlId }, callback, error);
		}

		/**
  * Возвращает список уровней для указанной категории пройденных/доступных пользователю.
  * @param	sUid - Идентификатор пользователя.
  * @param   sCatId - Идентификатор категории.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_getUserLevels',
		value: function puzzle_getUserLevels(sUid, sCatId, callback) {
			var error = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

			this.oDataLoader.request_obf('puzzle_getUserLevels', { uid: sUid, cid: sCatId }, callback, error);
		}

		/**
  * Открывает случайную не открытую букву.
  * @param	sUid - Идентификатор пользователя.
  * @param   sCatId - Идентификатор категории.
  * @param   sLvlId - Номер уровня в категории.
  * @param   sImgId - Номер картинки в уровне.
  * @param   excl - Маска исключений: длина маски должна совпадать с длиной слова, в позиции где символ выдавать не надо должен стоять 0, где возможно 1.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_openChar',
		value: function puzzle_openChar(sUid, sCatId, sLvlId, sImgId, sExcl, callback) {
			var error = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;

			this.oDataLoader.request_obf('puzzle_openChar', { uid: sUid, cid: sCatId, lid: sLvlId, iid: sImgId, excl: sExcl }, callback, error);
		}

		/**
  * Начинает новую игру или возвращает данные начатой игры, если такая имеется.
  * @param	sUid - Идентификатор пользователя.
  * @param   sCatId - Идентификатор категории.
  * @param   sLvlId - Номер уровня в категории.
  * @param   sImgId - Номер картинки в уровне.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_openGame',
		value: function puzzle_openGame(sUid, sCatId, sLvlId, sImgId, callback) {
			var error = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

			this.oDataLoader.request_obf('puzzle_openGame', { uid: sUid, cid: sCatId, lid: sLvlId, iid: sImgId }, callback, error);
		}

		/**
  * Открывает указанную часть картинки.
  * @param	sUid - Идентификатор пользователя.
  * @param   sCatId - Идентификатор категории.
  * @param   sLvlId - Номер уровня в категории.
  * @param   sImgId - Номер картинки в уровне.
  * @param   tick - Номер открываемого кусочка картинки.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_openTick',
		value: function puzzle_openTick(sUid, sCatId, sLvlId, sImgId, iTick, callback) {
			var error = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;

			this.oDataLoader.request_obf('puzzle_openTick', { uid: sUid, cid: sCatId, lid: sLvlId, iid: sImgId, tick: iTick }, callback, error);
		}

		/**
  * Пропускает начатую игру.
  * @param	sUid - Идентификатор пользователя.
  * @param   sCatId - Идентификатор категории.
  * @param   sLvlId - Номер уровня в категории.
  * @param   sImgId - Номер картинки в уровне.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_skipGame',
		value: function puzzle_skipGame(sUid, sCatId, sLvlId, sImgId, callback) {
			var error = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

			this.oDataLoader.request_obf('puzzle_skipGame', { uid: sUid, cid: sCatId, lid: sLvlId, iid: sImgId }, callback, error);
		}

		/**
  * Пропускает уровень в категории (вызывается вручную пользователем, если он хочет перейти к следующему уровню не доигрывая текущий, при этом возможность давать ответы в пропущенном уровне остается).
  * @param	sUid - Идентификатор пользователя.
  * @param   sCatId - Идентификатор категории.
  * @param   sLvlId - Номер уровня в категории.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_skipLevel',
		value: function puzzle_skipLevel(sUid, sCatId, sLvlId, callback) {
			var error = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

			this.oDataLoader.request_obf('puzzle_skipLevel', { uid: sUid, cid: sCatId, lid: sLvlId }, callback, error);
		}

		/**
  * Возвращает список завершенных картинок пользователями.
  * @param	sUids - Идентификаторы пользователей.
  * @param   sCatId - Идентификатор категории.
  * @param   sLvlId - Номер уровня в категории.
  * @param   sImageId - Номер картинки в уровне.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_getCompletedGames',
		value: function puzzle_getCompletedGames(sUids, sCatId, sLvlId, sImageId, callback) {
			var error = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

			if (sLvlId != "" && sImageId != "") {
				this.oDataLoader.request_obf('puzzle_getCompletedGames', { uids: sUids, cid: sCatId, lid: sLvlId, iid: sImageId }, callback, error);
			} else {
				this.oDataLoader.request_obf('puzzle_getCompletedGames', { uids: sUids, cid: sCatId }, callback, error);
			}
		}
	}]);

	return Net;
}();

exports.default = Net;

},{"./DataLoader":43}],46:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = gameState;

var _app = require('./../app');

var _GOFactory = require('./../fotoCross/GOFactory');

var _GOFactory2 = _interopRequireDefault(_GOFactory);

var _fadeOutIn = require('./../effects/fadeOutIn');

var _fadeOutIn2 = _interopRequireDefault(_fadeOutIn);

var _btn = require('../gui/btn');

var _message = require('../gui/message');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function gameState() {
	var selectedWord = null;

	var data = {};

	var factory = new _GOFactory2.default(_app.App.phaser);
	_app.App.factory = factory;

	return {
		preload: function preload() {
			//phaser.load.image('bg', './data/Background.png');//t2
			_app.App.phaser.load.image('bg_fot', './data/BackgroundFot.png');
			_app.App.phaser.load.image('letter_empty', './data/Letter8x8.png');
			_app.App.phaser.load.image('letter_over', './data/Letter8x8selected.png');
			_app.App.phaser.load.image('letter_block', './data/Letter8x8blocked.png');
			//gui
			//phaser.load.image('gui_game_btn', './data/ButtonsNormal.png');
			var mission_stat = _app.App.storage.generalData['mission_stat'].find(function (m) {
				return m.id == _app.App.storage.missionId;
			});
			//${mission_stat.path}
			//App.phaser.load.xml('level', './data/levels/901.xml', false);
			_app.App.phaser.load.xml('level', 'lvl/' + mission_stat.path, false);
		},
		create: function create() {
			_app.App.phaser.add.sprite(0, 0, 'bg');

			var cluePhoto = factory.photo(750 - 304, 70);

			var btnCont = _app.App.phaser.add.group();
			btnCont.create(0, 0, 'gui_game_btn');
			btnCont.create(96 + 12, 0, 'gui_game_btn');
			btnCont.create((96 + 12) * 2, 0, 'gui_game_btn');
			btnCont.create((96 + 12) * 3, 0, 'gui_game_btn');
			btnCont.x = 750 - 304;
			btnCont.y = 70 + 304 + 14;
			btnCont.scale.setTo(0.72, 0.72);

			var xml = _app.App.phaser.cache.getXML('level');

			var parsedLevel = [];
			var count = 0;
			xml.querySelectorAll('crossword>word').forEach(function (word, i) {
				//console.log(word);
				var w = {
					id: i + 1,
					img: word.querySelector('image1').textContent,
					text: word.querySelector('word').textContent,
					pos: {
						x: parseInt(word.querySelector('xp1').textContent),
						y: parseInt(word.querySelector('yp1').textContent),
						x2: parseInt(word.querySelector('xp2').textContent),
						y2: parseInt(word.querySelector('yp2').textContent)
					}
				};

				w.direction = w.pos.x == w.pos.x2 ? 0 : 1; // 0 - vertical, 1 - horizontal

				parsedLevel.push(w);
				_app.App.phaser.load.image('pic' + ++count, './img/' + w.img);
			});

			var cw = factory.crossword(parsedLevel);
			var crossword = cw.graph;
			crossword.x = 16;
			crossword.y = 70;
			//add mouseDown event handler (phaser way)
			crossword.children.forEach(function (wordGr) {
				wordGr.children.forEach(function (letterGr) {
					letterGr.onChildInputDown.add(function (s, l) {
						var targetWord = s.parent.parent.data.instance;

						if (selectedWord == targetWord) {
							var letter = s.parent.data.instance;

							if (letter.label.length == 0 || letter.state == 'block') return;

							selectedWord.fillAt(letter.id, '');
							letter._palette.show();

							return;
						}

						if (selectedWord) {
							selectedWord.free();
						}

						selectedWord = targetWord;
						selectedWord.setState('over');
						crossword.bringToTop(selectedWord.graph);
						letterPalette.generate(selectedWord.text);
						console.log(selectedWord.text);

						(0, _fadeOutIn2.default)(_app.App.phaser, cluePhoto.photo, function () {
							return cluePhoto.setPhoto('pic' + selectedWord.id);
						});
					});
				});
			});

			var letterPalette = factory.letterPalette(150, 650 - 140, 10, 2);

			letterPalette.graph.children.forEach(function (letter) {
				letter.onChildInputDown.add(function (s, l) {
					var nextLetter = selectedWord.fill(letter.data.instance.label, letter.data.instance);
					if (nextLetter) {
						var cross = cw.map[(nextLetter.graph.parent.x + nextLetter.graph.x) / 32][(nextLetter.graph.parent.y + nextLetter.graph.y) / 32];
						//console.log(cross);

						letter.data.instance.hide();
					}

					if (selectedWord.isFilled() && nextLetter) {
						if (selectedWord.isCorrect()) {
							selectedWord.setState('block');

							var _loop = function _loop(i) {
								var cross = cw.map[selectedWord.graph.x / 32 + i * selectedWord.direction][selectedWord.graph.y / 32 + i * !selectedWord.direction];
								var orig = cross.find(function (letter) {
									return letter.parent.data.instance.id == selectedWord.id;
								});

								cross.forEach(function (letter) {
									if (letter.parent.data.instance.id != selectedWord.id) {
										letter.parent.data.instance.fillAt(letter.data.instance.id, orig.data.instance.label);
										letter.data.instance.setState('block');
									}
								});
							};

							for (var i = 0; i < selectedWord.text.length; i++) {
								_loop(i);
							}

							var m = new _message.RightAswer(selectedWord.text);
							m.graph.x = 0;
							m.graph.y = 0;
							setTimeout(function () {
								m.graph.destroy();m = null;
							}, 1000);
						} else {
							var _m = new _message.WrongAnswer();
							_m.graph.x = 200;
							_m.graph.y = 460;

							setTimeout(function () {
								_m.graph.destroy();_m = null;
							}, 1000);
						}
					}
				});
			});

			_app.App.phaser.load.onLoadComplete.addOnce(function () {
				selectedWord = crossword.children[0].data.instance;
				selectedWord.setState('over');
				crossword.bringToTop(selectedWord.graph);
				letterPalette.generate(selectedWord.text);
				cluePhoto.setPhoto('pic' + selectedWord.id);

				console.log(selectedWord.text);
			}, this);

			var saleBtn = new _btn.Btn(120, 60, 'Акция', function () {});
			saleBtn.graph.x = 4;
			saleBtn.graph.y = 4;

			var backBtn = new _btn.Btn(100, 40, 'В меню', function () {
				_app.App.phaser.state.start('mainMenu');
			});
			backBtn.graph.x = 4;
			backBtn.graph.y = 600;

			_app.App.phaser.load.start();
		},
		update: function update() {},
		render: function render() {}
	};
}

},{"../gui/btn":36,"../gui/message":39,"./../app":28,"./../effects/fadeOutIn":29,"./../fotoCross/GOFactory":30}],47:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
			value: true
});

exports.default = function () {
			return {
						preload: function preload() {
									_app.App.phaser.load.image('bg', './data/Background.png'); //t2

									//gui
									_app.App.phaser.load.image('gui_game_btn', './data/ButtonsNormal.png');
									_app.App.phaser.load.image('gui_game_btn_over', './data/ButtonsOver.png');
						},
						create: function create() {
									_app.App.phaser.add.sprite(0, 0, 'bg');

									var stages = new _stagesList.StagesList();

									stages.graph.x = 70;
									stages.graph.y = 200;

									stages.fill(_app.App.storage.generalData);
									_app.App.storage.onGeneralData.addOnce(function (data) {
												return stages.fill(data);
									});

									var saleBtn = new _imgBtn.ImgBtn('btn_action_normal', 'btn_action_over');
									saleBtn.graph.x = 10;
									saleBtn.graph.y = 10;

									var faqBtn = new _imgBtn.ImgBtn('btn_help_normal', 'btn_help_over');
									faqBtn.graph.x = 568;
									faqBtn.graph.y = 10;

									var sndBtn = new _imgBtn.ImgBtn('btn_sound_on_normal', 'btn_sound_on_over');
									sndBtn.graph.x = 704;
									sndBtn.graph.y = 10;

									var moneyBtn = new _moneyBtn.MoneyBtn();
									moneyBtn.graph.x = 280;
									moneyBtn.graph.y = 10;
						},
						update: function update() {},
						render: function render() {}
			};
};

var _app = require("../app");

var _assetService = require("./../utils/assetService");

var _selectLevelBtn = require("../gui/selectLevelBtn");

var _btn = require("../gui/btn");

var _stagesList = require("../gui/stagesList");

var _imgBtn = require("../gui/imgBtn");

var _moneyBtn = require("../gui/moneyBtn");

},{"../app":28,"../gui/btn":36,"../gui/imgBtn":38,"../gui/moneyBtn":40,"../gui/selectLevelBtn":41,"../gui/stagesList":42,"./../utils/assetService":49}],48:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AssetService = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _app = require('./../app');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var instance = null;

var AssetService = exports.AssetService = function () {
    function AssetService() {
        _classCallCheck(this, AssetService);

        if (instance) return instance;

        instance = this;
        _app.App.phaser.load.atlasXML('assets', './data/sprites.png', './data/sprites.xml');

        return instance;
    }

    _createClass(AssetService, [{
        key: 'get',
        value: function get(name) {
            return { atlas: 'assets', key: name + '.png' };
        }
    }]);

    return AssetService;
}();

},{"./../app":28}],49:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AssetService = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _app = require('./../app');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var instance = null;

var AssetService = exports.AssetService = function () {
    function AssetService() {
        _classCallCheck(this, AssetService);

        if (instance) return instance;

        instance = this;
        _app.App.phaser.load.atlasXML('assets', './data/sprites.png', './data/sprites.xml');

        return instance;
    }

    _createClass(AssetService, [{
        key: 'get',
        value: function get(name) {
            return { atlas: 'assets', key: name + '.png' };
        }
    }]);

    return AssetService;
}();

},{"./../app":28}]},{},[28])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = require('./lib/axios');
},{"./lib/axios":3}],2:[function(require,module,exports){
(function (process){
'use strict';

var utils = require('./../utils');
var settle = require('./../core/settle');
var buildURL = require('./../helpers/buildURL');
var parseHeaders = require('./../helpers/parseHeaders');
var isURLSameOrigin = require('./../helpers/isURLSameOrigin');
var createError = require('../core/createError');
var btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || require('./../helpers/btoa');

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();
    var loadEvent = 'onreadystatechange';
    var xDomain = false;

    // For IE 8/9 CORS support
    // Only supports POST and GET calls and doesn't returns the response headers.
    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
    if (process.env.NODE_ENV !== 'test' &&
        typeof window !== 'undefined' &&
        window.XDomainRequest && !('withCredentials' in request) &&
        !isURLSameOrigin(config.url)) {
      request = new window.XDomainRequest();
      loadEvent = 'onload';
      xDomain = true;
      request.onprogress = function handleProgress() {};
      request.ontimeout = function handleTimeout() {};
    }

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request[loadEvent] = function handleLoad() {
      if (!request || (request.readyState !== 4 && !xDomain)) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)
        status: request.status === 1223 ? 204 : request.status,
        statusText: request.status === 1223 ? 'No Content' : request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies = require('./../helpers/cookies');

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
          cookies.read(config.xsrfCookieName) :
          undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (config.withCredentials) {
      request.withCredentials = true;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};

}).call(this,require('_process'))

},{"../core/createError":9,"./../core/settle":12,"./../helpers/btoa":16,"./../helpers/buildURL":17,"./../helpers/cookies":19,"./../helpers/isURLSameOrigin":21,"./../helpers/parseHeaders":23,"./../utils":25,"_process":27}],3:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var bind = require('./helpers/bind');
var Axios = require('./core/Axios');
var defaults = require('./defaults');

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(utils.merge(defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = require('./cancel/Cancel');
axios.CancelToken = require('./cancel/CancelToken');
axios.isCancel = require('./cancel/isCancel');

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = require('./helpers/spread');

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;

},{"./cancel/Cancel":4,"./cancel/CancelToken":5,"./cancel/isCancel":6,"./core/Axios":7,"./defaults":14,"./helpers/bind":15,"./helpers/spread":24,"./utils":25}],4:[function(require,module,exports){
'use strict';

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;

},{}],5:[function(require,module,exports){
'use strict';

var Cancel = require('./Cancel');

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;

},{"./Cancel":4}],6:[function(require,module,exports){
'use strict';

module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

},{}],7:[function(require,module,exports){
'use strict';

var defaults = require('./../defaults');
var utils = require('./../utils');
var InterceptorManager = require('./InterceptorManager');
var dispatchRequest = require('./dispatchRequest');

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = utils.merge({
      url: arguments[0]
    }, arguments[1]);
  }

  config = utils.merge(defaults, this.defaults, { method: 'get' }, config);
  config.method = config.method.toLowerCase();

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;

},{"./../defaults":14,"./../utils":25,"./InterceptorManager":8,"./dispatchRequest":10}],8:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;

},{"./../utils":25}],9:[function(require,module,exports){
'use strict';

var enhanceError = require('./enhanceError');

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};

},{"./enhanceError":11}],10:[function(require,module,exports){
'use strict';

var utils = require('./../utils');
var transformData = require('./transformData');
var isCancel = require('../cancel/isCancel');
var defaults = require('../defaults');
var isAbsoluteURL = require('./../helpers/isAbsoluteURL');
var combineURLs = require('./../helpers/combineURLs');

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Support baseURL config
  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  }

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers || {}
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};

},{"../cancel/isCancel":6,"../defaults":14,"./../helpers/combineURLs":18,"./../helpers/isAbsoluteURL":20,"./../utils":25,"./transformData":13}],11:[function(require,module,exports){
'use strict';

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }
  error.request = request;
  error.response = response;
  return error;
};

},{}],12:[function(require,module,exports){
'use strict';

var createError = require('./createError');

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  // Note: status is not exposed by XDomainRequest
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};

},{"./createError":9}],13:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};

},{"./../utils":25}],14:[function(require,module,exports){
(function (process){
'use strict';

var utils = require('./utils');
var normalizeHeaderName = require('./helpers/normalizeHeaderName');

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = require('./adapters/xhr');
  } else if (typeof process !== 'undefined') {
    // For node use HTTP adapter
    adapter = require('./adapters/http');
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

}).call(this,require('_process'))

},{"./adapters/http":2,"./adapters/xhr":2,"./helpers/normalizeHeaderName":22,"./utils":25,"_process":27}],15:[function(require,module,exports){
'use strict';

module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};

},{}],16:[function(require,module,exports){
'use strict';

// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

function E() {
  this.message = 'String contains an invalid character';
}
E.prototype = new Error;
E.prototype.code = 5;
E.prototype.name = 'InvalidCharacterError';

function btoa(input) {
  var str = String(input);
  var output = '';
  for (
    // initialize result and counter
    var block, charCode, idx = 0, map = chars;
    // if the next str index does not exist:
    //   change the mapping table to "="
    //   check if d has no fractional digits
    str.charAt(idx | 0) || (map = '=', idx % 1);
    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
  ) {
    charCode = str.charCodeAt(idx += 3 / 4);
    if (charCode > 0xFF) {
      throw new E();
    }
    block = block << 8 | charCode;
  }
  return output;
}

module.exports = btoa;

},{}],17:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

function encode(val) {
  return encodeURIComponent(val).
    replace(/%40/gi, '@').
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      }

      if (!utils.isArray(val)) {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

},{"./../utils":25}],18:[function(require,module,exports){
'use strict';

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};

},{}],19:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
  (function standardBrowserEnv() {
    return {
      write: function write(name, value, expires, path, domain, secure) {
        var cookie = [];
        cookie.push(name + '=' + encodeURIComponent(value));

        if (utils.isNumber(expires)) {
          cookie.push('expires=' + new Date(expires).toGMTString());
        }

        if (utils.isString(path)) {
          cookie.push('path=' + path);
        }

        if (utils.isString(domain)) {
          cookie.push('domain=' + domain);
        }

        if (secure === true) {
          cookie.push('secure');
        }

        document.cookie = cookie.join('; ');
      },

      read: function read(name) {
        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
        return (match ? decodeURIComponent(match[3]) : null);
      },

      remove: function remove(name) {
        this.write(name, '', Date.now() - 86400000);
      }
    };
  })() :

  // Non standard browser env (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return {
      write: function write() {},
      read: function read() { return null; },
      remove: function remove() {}
    };
  })()
);

},{"./../utils":25}],20:[function(require,module,exports){
'use strict';

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};

},{}],21:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement('a');
    var originURL;

    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      var href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                  urlParsingNode.pathname :
                  '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })()
);

},{"./../utils":25}],22:[function(require,module,exports){
'use strict';

var utils = require('../utils');

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

},{"../utils":25}],23:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};

},{"./../utils":25}],24:[function(require,module,exports){
'use strict';

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

},{}],25:[function(require,module,exports){
'use strict';

var bind = require('./helpers/bind');
var isBuffer = require('is-buffer');

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim
};

},{"./helpers/bind":15,"is-buffer":26}],26:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],27:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],28:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.App = undefined;

var _mainMenu = require('./states/mainMenu.js');

var _mainMenu2 = _interopRequireDefault(_mainMenu);

var _game = require('./states/game.js');

var _game2 = _interopRequireDefault(_game);

var _Net = require('./net/Net');

var _Net2 = _interopRequireDefault(_Net);

var _AssetService = require('./utils/AssetService');

var _GOFactory = require('./fotoCross/GOFactory');

var _GOFactory2 = _interopRequireDefault(_GOFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var App = function App() {
    _classCallCheck(this, App);

    App.phaser = new Phaser.Game(760, 650, Phaser.CANVAS, 'game', {
        preload: preload,
        create: create
    });
};

function preload() {
    App.net = new _Net2.default();
    App.storage = { onGeneralData: new Phaser.Signal() };
    App.assetService = new _AssetService.AssetService();
    App.factory = new _GOFactory2.default();
}

function create() {
    App.phaser.state.add('mainMenu', (0, _mainMenu2.default)());
    App.phaser.state.add('game', (0, _game2.default)());

    App.phaser.state.start('mainMenu');

    App.net.firstLoad(function (resp) {
        App.storage.generalData = resp.general[0][1];
        App.storage.onGeneralData.dispatch(App.storage.generalData);
        console.log('ok:' + resp); // ['method', {data}]
    });

    // App.net.getGeneralData( resp => {
    //     App.storage.generalData = resp[0][1];
    //     App.storage.onGeneralData.dispatch(App.storage.generalData);
    //     console.log(`ok:${resp}`); // ['method', {data}]
    // }, e => {
    //     console.log(`err:${e}`);
    // });
}

exports.App = App;


new App();

},{"./fotoCross/GOFactory":30,"./net/Net":47,"./states/game.js":48,"./states/mainMenu.js":49,"./utils/AssetService":50}],29:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = FadeOutIn;
function FadeOutIn(phaser, target) {
    var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    var tween = phaser.add.tween(target).to({ alpha: 0 }, 200, Phaser.Easing.Linear.None);
    tween.onComplete.add(function () {
        if (callback) callback();

        phaser.add.tween(target).to({ alpha: 1 }, 200, Phaser.Easing.Linear.None, true);
    });
    tween.start();
}

},{}],30:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _app = require('../app');

var _letter = require('./letter');

var _letter2 = _interopRequireDefault(_letter);

var _word = require('./word');

var _word2 = _interopRequireDefault(_word);

var _crossword = require('./crossword');

var _crossword2 = _interopRequireDefault(_crossword);

var _letterPalette = require('./letterPalette');

var _letterPalette2 = _interopRequireDefault(_letterPalette);

var _cluePhoto = require('./cluePhoto');

var _cluePhoto2 = _interopRequireDefault(_cluePhoto);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GOFactory = function () {
	function GOFactory() {
		_classCallCheck(this, GOFactory);

		this.phaser = _app.App.phaser;
	}

	_createClass(GOFactory, [{
		key: 'letter',
		value: function letter(x, y) {
			var label = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

			var letter = new _letter2.default(label);
			var l = letter.render();

			l.x = x;
			l.y = y;

			return letter;
		}
	}, {
		key: 'letterPalette',
		value: function letterPalette(x, y, columnNum, rowNum) {
			var lp = new _letterPalette2.default(columnNum, rowNum);
			var graph = lp.render(this.phaser);

			graph.x = x;
			graph.y = y;

			return lp;
		}
	}, {
		key: 'photo',
		value: function photo(x, y) {
			var cp = new _cluePhoto2.default();
			cp.render();

			cp.graph.x = x;
			cp.graph.y = y;

			return cp;
		}
	}, {
		key: 'crossword',
		value: function crossword(words) {
			var crossword = new _crossword2.default();
			crossword.render(words);

			return crossword;
		}
	}]);

	return GOFactory;
}();

exports.default = GOFactory;

},{"../app":28,"./cluePhoto":31,"./crossword":32,"./letter":34,"./letterPalette":36,"./word":37}],31:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _app = require("../app");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CluePhoto = function () {
    function CluePhoto() {
        _classCallCheck(this, CluePhoto);

        this.graph = null;
        this.photo = null; // pointer to phaser.sprite
    }

    _createClass(CluePhoto, [{
        key: "setPhoto",
        value: function setPhoto(val) {
            if (!this.photo) {
                this.photo = this.graph.create(0, 0, val);

                this.photo.x = 4;
                this.photo.y = 4;
                this.photo.scale.setTo(0.98, 0.98);
            } else {
                this.photo.loadTexture(val);
            }
        }
    }, {
        key: "render",
        value: function render() {
            this.graph = _app.App.phaser.add.group();
            this.graph.create(0, 0, 'bg_fot');

            return this.graph;
        }
    }]);

    return CluePhoto;
}();

exports.default = CluePhoto;

},{"../app":28}],32:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _app = require('./../app');

var _word = require('./word');

var _word2 = _interopRequireDefault(_word);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Crossword = function () {
    function Crossword() {
        _classCallCheck(this, Crossword);

        this.map = [];
        this.graph = null;
    }

    _createClass(Crossword, [{
        key: 'render',
        value: function render(words) {
            var _this = this;

            var cont = _app.App.phaser.add.group();
            var x = void 0,
                y = void 0;

            words.forEach(function (word) {
                var w = new _word2.default(word.text, word.direction);
                w.id = word.id;

                cont.add(w.render(_this.phaser));
                w.graph.x = word.pos.x * w.lw;
                w.graph.y = word.pos.y * w.lh;

                for (var i = 0; i < word.text.length; i++) {
                    x = word.pos.x + i * word.direction;
                    y = word.pos.y + i * !word.direction;

                    if (!_this.map[x]) _this.map[x] = [];

                    if (_this.map[x][y]) _this.map[x][y].push(w.graph.children[i]);else _this.map[x][y] = [w.graph.children[i]];
                }
            });

            words.forEach(function (word) {
                x = word.pos.x;
                y = word.pos.y;
                _this.map[x][y].forEach(function (letter) {
                    var ids = words.filter(function (w) {
                        return w.pos.x == x && w.pos.y == y;
                    }).map(function (w) {
                        return w.id;
                    });
                    letter.data.instance.setPrefix(ids.join('\\'));
                });
            });

            cont.data = { instance: this };
            this.graph = cont;
            return cont;
        }
    }]);

    return Crossword;
}();

exports.default = Crossword;

},{"./../app":28,"./word":37}],33:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.GameFaq = undefined;

var _app = require("../app");

var _imgBtn = require("../gui/imgBtn");

var _axios = require("axios");

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GameFaq = exports.GameFaq = function GameFaq(word) {
    var _this = this;

    _classCallCheck(this, GameFaq);

    var graphics = _app.App.phaser.add.graphics(0, 0);
    graphics.beginFill(0x000000, 0.2);
    graphics.drawRect(0, 0, _app.App.phaser.world.width, _app.App.phaser.world.height);
    graphics.endFill();

    var group = _app.App.phaser.add.group();
    group.inputEnableChildren = true;
    group.add(graphics);

    var bg = group.create(0, 0, 'tut_bg');
    bg.x = (_app.App.phaser.world.width >> 1) - (bg.width >> 1);
    bg.y = (_app.App.phaser.world.height >> 1) - (bg.height >> 1);

    var prev = new _imgBtn.ImgBtn('btn_list_category_normal', 'btn_list_category_over');
    var next = new _imgBtn.ImgBtn('btn_list_category_normal', 'btn_list_category_over');
    next.graph.scale.x = -1;

    var closeBtn = new _imgBtn.ImgBtn('btn_exit_game_normal', 'btn_exit_game_over', function () {
        if (_this.onClose) _this.onClose();
    });

    prev.graph.visible = false;
    next.graph.visible = false;
    closeBtn.graph.visible = false;

    group.add(prev.graph);
    group.add(next.graph);
    group.add(closeBtn.graph);

    var render = function render() {
        var current = 0;
        var img = group.create(0, 0, imgs[current]);

        img.x = (_app.App.phaser.world.width >> 1) - (img.width >> 1);
        img.y = (_app.App.phaser.world.height >> 1) - (img.height >> 1);

        if (imgs.length > 1) {
            prev.graph.x = img.x - prev.graph.width - 4;
            prev.graph.y = img.y + (img.height >> 1) - (prev.graph.height >> 1);
            prev.callback = function () {
                if (current - 1 >= 0) img.loadTexture(imgs[--current]);
            };

            next.graph.x = img.x + img.width + prev.graph.width + 4;
            next.graph.y = img.y + (img.height >> 1) - (prev.graph.height >> 1);
            next.callback = function () {
                if (current + 1 < imgs.length) img.loadTexture(imgs[++current]);
            };

            prev.graph.visible = true;
            next.graph.visible = true;
        }

        closeBtn.graph.x = img.x + (img.width >> 1) - (closeBtn.graph.width >> 1);
        closeBtn.graph.y = img.y + img.height + 4;
        closeBtn.graph.visible = true;
    };

    var imgs = [];
    var json = _app.App.phaser.cache.getJSON('tutorial');

    if (_app.App.phaser.cache.checkImageKey('tutorial_0')) {
        json.imgs.forEach(function (img, i) {
            imgs.push("tutorial_" + i);
        });

        render();
    } else {
        _app.App.phaser.load.onLoadComplete.addOnce(function () {
            render();
        }, this);

        json.imgs.forEach(function (img, i) {
            _app.App.phaser.load.image("tutorial_" + i, './data/tutorial/' + img);
            imgs.push("tutorial_" + i);
        });

        _app.App.phaser.load.start();
    }

    this.graph = group;
};

},{"../app":28,"../gui/imgBtn":40,"axios":1}],34:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _app = require('./../app');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Letter = function () {
	function Letter() {
		var label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
		var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

		_classCallCheck(this, Letter);

		this.label = label; // string
		this.prefix = prefix;
		this.state = 'default';

		this.id = null;
		this.graph = null; // pointer to phaser.group
		this._palette = null;
		this._label = null; // pointer to phaser.text
		this._prefix = null;
	}

	_createClass(Letter, [{
		key: 'render',
		value: function render() {
			var style = { font: "24px Arial", fill: "#000000", align: "center" };
			var group = _app.App.phaser.add.group();
			//group.inputEnableChildren = true;
			var imgData = _app.App.assetService.get('12х12-letter_word_normal');
			var sprite = group.create(0, 0, imgData.atlas, imgData.key);
			sprite.inputEnabled = true;
			sprite.input.useHandCursor = true;

			this._label = _app.App.phaser.add.text(6, 3, this.label, style, group);
			if (this.prefix != '') this._prefix = _app.App.phaser.add.text(1, 1, this.prefix, { font: "12px Arial", fill: "#000000", align: "center" }, group);

			this.graph = group;

			group.data = { instance: this };
			this._label.inputEnabled = false;

			return group; //48
		}
	}, {
		key: 'setPrefix',
		value: function setPrefix(prefix) {
			this.prefix = prefix;

			if (!this._prefix) this._prefix = _app.App.phaser.add.text(2, 0, this.prefix, { font: "12px Arial", fill: "#000000", align: "center" }, this.graph);else this._prefix.setText(this.prefix);
		}
	}, {
		key: 'hide',
		value: function hide() {
			this.graph.visible = false;
		}
	}, {
		key: 'show',
		value: function show() {
			this.graph.visible = true;
		}
	}, {
		key: 'setState',
		value: function setState(state) {
			if (this.state == 'block') return;

			var key = void 0;
			var sprite = this.graph.children[0];

			switch (state) {
				case 'default':
					key = '12х12-letter_word_normal';break;
				case 'over':
					key = '12х12-letter_word_selected';break;
				case 'block':
					key = '12х12-letter_word_completed';
					//sprite.inputEnabled = false;
					//sprite.input.useHandCursor = false;
					break;
			}

			sprite.frameName = _app.App.assetService.get(key).key;

			this.state = state;
		}
	}, {
		key: 'text',
		set: function set(val) {
			if (this.state == 'block') return;

			this.label = val.toUpperCase();
			this._label.setText(this.label);
		}
	}]);

	return Letter;
}();

exports.default = Letter;

},{"./../app":28}],35:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LetterCandidate = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _app = require('./../app');

var _imgBtn = require('../gui/imgBtn');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LetterCandidate = exports.LetterCandidate = function () {
    function LetterCandidate() {
        var label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

        _classCallCheck(this, LetterCandidate);

        this.label = label; // string

        this.id = null;
        this.graph = null; // pointer to phaser.group
        this._palette = null;
        this._label = null; // pointer to phaser.text
    }

    _createClass(LetterCandidate, [{
        key: 'render',
        value: function render() {
            var style = { font: "28px Arial", fill: "#000000", align: "center" };
            var group = _app.App.phaser.add.group();

            var bg = new _imgBtn.ImgBtn('letter_candidate_normal', 'letter_candidate_over');
            group.add(bg.graph);

            this._label = _app.App.phaser.add.text(14, 8, this.label, style, group);
            this.graph = group;

            group.data = { instance: this };
            this._label.inputEnabled = false;

            return group;
        }
    }, {
        key: 'hide',
        value: function hide() {
            this.graph.visible = false;
        }
    }, {
        key: 'show',
        value: function show() {
            this.graph.visible = true;
        }
    }, {
        key: 'text',
        set: function set(val) {
            this.label = val.toUpperCase();
            this._label.setText(this.label);
        }
    }]);

    return LetterCandidate;
}();

},{"../gui/imgBtn":40,"./../app":28}],36:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _letterCandidate = require('./letterCandidate');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LetterPalette = function () {
    function LetterPalette(columnNum, rowNum) {
        _classCallCheck(this, LetterPalette);

        this.columnNum = columnNum;
        this.rowNum = rowNum;

        this.graph = null;
    }

    _createClass(LetterPalette, [{
        key: 'render',
        value: function render(phaser) {
            var cont = phaser.add.group();

            for (var i = 0; i < this.rowNum; i++) {
                for (var j = 0; j < this.columnNum; j++) {
                    var letter = new _letterCandidate.LetterCandidate(String.fromCharCode(Math.floor(Math.random() * 32) + 1072)).render();
                    letter.x = j * (letter.width + 5);
                    letter.y = i * (letter.height + 4);

                    cont.add(letter);
                }
            }cont.data = { instance: this };
            this.graph = cont;
            return cont;
        }
    }, {
        key: 'generate',
        value: function generate(word) {
            var wLength = word.length;
            var w = word.split('');
            var letters = [];

            for (var i = 0; i < this.graph.children.length; i++) {
                letters.push(i < wLength ? w.splice(Math.floor(Math.random() * w.length), 1)[0] : String.fromCharCode(Math.floor(Math.random() * 32) + 1072));
            }this.graph.children.forEach(function (letter, i) {
                letter.data.instance.text = letters.splice(Math.floor(Math.random() * letters.length), 1)[0]; //shuffle
                letter.data.instance.show();
            });
        }
    }]);

    return LetterPalette;
}();

exports.default = LetterPalette;

},{"./letterCandidate":35}],37:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _app = require('././../app');

var _fadeOutIn = require('./../effects/fadeOutIn');

var _fadeOutIn2 = _interopRequireDefault(_fadeOutIn);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Word = function () {
    function Word(text) {
        var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        _classCallCheck(this, Word);

        this.id = null;
        this.graph = null;

        this.text = text; // actual word
        this.textArr = []; // guess word
        this.direction = direction; // 0 - vertical, 1 - horizontal

        this.lw = 34; // letter width
        this.lh = 34; // letter height
    }

    _createClass(Word, [{
        key: 'render',
        value: function render() {
            var cont = _app.App.phaser.add.group();
            var length = this.text.length - 1;

            for (var i = 0; i < this.text.length; i++) {
                var letter = _app.App.factory.letter((this.direction == 0 ? 0 : i) * this.lw, (this.direction == 1 ? 0 : i) * this.lh); //this.text[i]
                letter.id = i;
                cont.add(letter.graph);
                this.textArr.push('');
            }

            cont.data = { instance: this };
            this.graph = cont;
            return cont;
        }
    }, {
        key: 'fill',
        value: function fill(letter, letterFromPalette) {
            var nextLetter = null;
            var index = void 0;

            this.graph.children.some(function (letter, i) {
                if (letter.data.instance.label.length == 0) {
                    nextLetter = letter.data.instance;
                    index = i;
                }

                return nextLetter != null;
            });

            if (nextLetter) {
                nextLetter.text = letter;
                nextLetter._palette = letterFromPalette;
                this.textArr[index] = letter;

                return nextLetter;
            }

            return false;
        }
    }, {
        key: 'fillAt',
        value: function fillAt(index, letter) {
            this.graph.children[index].data.instance.text = letter;
            this.textArr[index] = letter;
        }
    }, {
        key: 'free',
        value: function free() {
            var _this = this;

            this.graph.children.forEach(function (letter) {
                var ld = letter.data.instance;
                ld.setState('default');
                _this.fillAt(ld.id, '');
            });
        }
    }, {
        key: 'isFilled',
        value: function isFilled() {
            return this.textArr.join('').length == this.text.length;
        }
    }, {
        key: 'isCorrect',
        value: function isCorrect() {
            return this.text == this.textArr.join('');
        }
    }, {
        key: 'setState',
        value: function setState(state) {
            this.graph.children.forEach(function (letter) {
                letter.data.instance.setState(state);
            });
        }
    }]);

    return Word;
}();

exports.default = Word;

},{"./../effects/fadeOutIn":29,"././../app":28}],38:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
        value: true
});
exports.Btn = undefined;

var _app = require('../app');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Btn = exports.Btn = function Btn() {
        var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 96;
        var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 96;
        var label = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
        var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

        _classCallCheck(this, Btn);

        var bd = _app.App.phaser.add.bitmapData(width, height);
        bd.draw('gui_game_btn', 0, 0, width, height);

        var group = _app.App.phaser.add.group();

        var sprite = group.create(0, 0, bd);
        sprite.inputEnabled = true;
        sprite.input.useHandCursor = true;

        this.label = _app.App.phaser.add.text(0, 0, label, { font: "24px Arial", fill: "#000000", align: "center", wordWrap: true }, group);
        //this.label.width = width;
        this.label.lineSpacing = -10;
        this.label.x = (width >> 1) - (this.label.width >> 1);
        this.label.y = (height >> 1) - (this.label.height >> 1);

        this.graph = group;

        group.onChildInputDown.add(function (target) {
                if (callback) callback();
        });
};

},{"../app":28}],39:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.HorizontalListController = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _app = require("../../app");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HorizontalListController = exports.HorizontalListController = function () {
    function HorizontalListController(pageSize, listGroup, btnPrev, btnNext) {
        var position = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

        _classCallCheck(this, HorizontalListController);

        this.position = position;
        this.pageSize = pageSize;
        this.size = 0;

        this.listGroup = listGroup;
        this.btnPrev = btnPrev.graph;
        this.btnNext = btnNext.graph;

        btnPrev.callback = this.prev.bind(this);
        btnNext.callback = this.next.bind(this);

        this.update();
    }

    _createClass(HorizontalListController, [{
        key: "update",
        value: function update() {
            this.size = this.listGroup.children.length;

            if (this.size > this.pageSize) {
                this.btnNext.x = this.listGroup.x + this.listGroup.mask.width - this.btnNext.width + 4;
                this.btnPrev.x = this.listGroup.x - this.btnPrev.width - 10;
                this.btnNext.visible = true;
                this.btnPrev.visible = true;
            } else {
                this.btnNext.visible = false;
                this.btnPrev.visible = false;
            }
        }
    }, {
        key: "next",
        value: function next() {
            if (this.position + this.pageSize < this.size) {
                ++this.position;

                _app.App.phaser.add.tween(this.listGroup).to({ x: this.listGroup.mask.x - this.listGroup.mask.width / this.pageSize * this.position }, 200, Phaser.Easing.Linear.None, true);
            }
        }
    }, {
        key: "prev",
        value: function prev() {
            if (this.position > 0) {
                --this.position;
                _app.App.phaser.add.tween(this.listGroup).to({ x: this.listGroup.mask.x - this.listGroup.mask.width / this.pageSize * this.position }, 200, Phaser.Easing.Linear.None, true);
            }
        }
    }]);

    return HorizontalListController;
}();

},{"../../app":28}],40:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ImgBtn = undefined;

var _app = require('../app');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ImgBtn = exports.ImgBtn = function ImgBtn() {
    var frameNormal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    var _this = this;

    var frameOver = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    _classCallCheck(this, ImgBtn);

    //let group = App.phaser.add.group();
    //group.inputEnableChildren = true;

    var imgData = _app.App.assetService.get(frameNormal);
    var sprite = _app.App.phaser.add.sprite(0, 0, imgData.atlas, imgData.key);
    sprite.inputEnabled = true;
    sprite.input.useHandCursor = true;

    sprite.events.onInputOver.add(function () {
        sprite.frameName = _app.App.assetService.get(frameOver).key;
    });

    sprite.events.onInputOut.add(function () {
        sprite.frameName = _app.App.assetService.get(frameNormal).key;
    });

    sprite.events.onInputDown.add(function () {
        if (_this.callback) _this.callback();
    });

    this.data = { instance: this };
    this.graph = sprite;
    this.callback = callback;

    // group.onChildInputDown.add((target)=>{
    //     if(callback)
    //         callback();
    // });
};

},{"../app":28}],41:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RightAswer = exports.WrongAnswer = undefined;

var _app = require("../app");

var _imgBtn = require("./imgBtn");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WrongAnswer = exports.WrongAnswer = function WrongAnswer() {
    _classCallCheck(this, WrongAnswer);

    this.graph = new _imgBtn.ImgBtn('btn_word_wrong_normal', 'btn_word_wrong_over');
};

var RightAswer = exports.RightAswer = function RightAswer(word) {
    _classCallCheck(this, RightAswer);

    var graphics = _app.App.phaser.add.graphics(0, 0);
    graphics.beginFill(0x000000, 0.2);
    graphics.drawRect(0, 0, _app.App.phaser.world.width, _app.App.phaser.world.height);
    graphics.endFill();

    graphics.beginFill(0xFFFFFF, 1);
    graphics.lineStyle(2, 0xCDCDCD, 1);
    graphics.drawRect((_app.App.phaser.world.width >> 1) - 300 * 0.5, (_app.App.phaser.world.height >> 1) - 400 * 0.5, 300, 400);
    graphics.endFill();

    var group = _app.App.phaser.add.group();
    group.inputEnableChildren = true;

    group.add(graphics);
    var title = _app.App.phaser.add.text(0, 0, 'Слово разгадано!', { font: "24px Arial", fill: "#000000", align: "center" }, group);
    var answer = _app.App.phaser.add.text(0, 0, word.toUpperCase(), { font: "24px Arial", fill: "#000000", align: "center" }, group);
    //this.label.width = width;
    title.x = (_app.App.phaser.world.width >> 1) - (title.width >> 1);
    title.y = (_app.App.phaser.world.height >> 1) - 400 * 0.5 + 32;

    answer.x = (_app.App.phaser.world.width >> 1) - (answer.width >> 1);
    answer.y = (_app.App.phaser.world.height >> 1) - (answer.height >> 1);

    this.graph = group;
};

},{"../app":28,"./imgBtn":40}],42:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MoneyBtn = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _app = require("../app");

var _imgBtn = require("./imgBtn");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MoneyBtn = exports.MoneyBtn = function () {
    function MoneyBtn() {
        _classCallCheck(this, MoneyBtn);

        this.graph = _app.App.phaser.add.group();

        var imgData = _app.App.assetService.get('img_money_back');
        this.graph.create(0, 0, imgData.atlas, imgData.key);

        this.label = _app.App.phaser.add.text(54, 14, '150', { font: "24px Arial", fill: "#000000", align: "center" }, this.graph);
        this.label.x = 54 + 30 - (this.label.width >> 1);

        var addMoney = new _imgBtn.ImgBtn('btn_add_money_normal', 'btn_add_money_over');
        this.graph.add(addMoney.graph);

        addMoney.graph.x = 130;
        addMoney.graph.y = 10;
    }

    _createClass(MoneyBtn, [{
        key: "setMoney",
        value: function setMoney(value) {
            this.label.setText(value);
        }
    }]);

    return MoneyBtn;
}();

},{"../app":28,"./imgBtn":40}],43:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
        value: true
});
exports.SelectLevelBtn = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _app = require('./../app');

var _imgBtn = require('./imgBtn');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SelectLevelBtn = exports.SelectLevelBtn = function () {
        function SelectLevelBtn(lvlDescription) {
                _classCallCheck(this, SelectLevelBtn);

                this.width = 200;
                this.height = 240;

                var group = _app.App.phaser.add.group();
                group.inputEnableChildren = true;

                // let graphics = App.phaser.add.graphics(0, 0);
                // graphics.beginFill(0xFFFFFF, 1);
                // graphics.lineStyle(2, 0xCDCDCD, 1);
                // graphics.drawRect(0, 0, width, height);
                // graphics.endFill();
                // group.add(graphics);
                var imgData = _app.App.assetService.get('img_category_back');
                group.create(0, 0, imgData.atlas, imgData.key);

                var btn = new _imgBtn.ImgBtn('btn_play_normal', 'btn_play_over');
                btn.graph.x = 8;
                btn.graph.y = this.height - 60;

                group.add(btn.graph);

                this.lvlMissionCount = _app.App.phaser.add.text(0, 140, '0 / 40', { font: "24px Arial", fill: "#000000", align: "center" }, group);
                this.lvlMissionCount.x = (this.width >> 1) - (this.lvlMissionCount.width >> 1);

                group.data = { instance: this };
                this.graph = group;
                this.stageId = null;
                this.missionId = 0;
        }

        _createClass(SelectLevelBtn, [{
                key: 'setProgress',
                value: function setProgress(current, all) {
                        this.lvlMissionCount.setText(current + '/' + all);
                        this.lvlMissionCount.x = (this.width >> 1) - (this.lvlMissionCount.width >> 1);
                }
        }]);

        return SelectLevelBtn;
}();

},{"./../app":28,"./imgBtn":40}],44:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
        value: true
});
exports.StagesList = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _app = require("../app");

var _selectLevelBtn = require("./selectLevelBtn");

var _horizontalListController = require("./controllers/horizontalListController");

var _imgBtn = require("./imgBtn");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var mask = null;
var controller = null;

var StagesList = exports.StagesList = function () {
        function StagesList() {
                _classCallCheck(this, StagesList);

                this.graph = _app.App.phaser.add.group();

                this.stages = _app.App.phaser.add.group();
                mask = _app.App.phaser.add.graphics(0, 0);
                this.stages.mask = mask;
                this.graph.add(this.stages);
                this.graph.add(mask);

                var prev = new _imgBtn.ImgBtn('btn_list_category_normal', 'btn_list_category_over');
                var next = new _imgBtn.ImgBtn('btn_list_category_normal', 'btn_list_category_over');
                next.graph.scale.x = -1;

                prev.graph.y = 60;
                next.graph.y = 60;

                this.graph.add(prev.graph);
                this.graph.add(next.graph);

                mask.inputEnabled = false;
                controller = new _horizontalListController.HorizontalListController(3, this.stages, prev, next);
        }

        _createClass(StagesList, [{
                key: "fill",
                value: function fill(data) {
                        var _this = this;

                        if (!data) return;

                        this.stages.removeAll();
                        this.stages.x = 0;
                        this.stages.y = 0;

                        var selectLevel = void 0;
                        data['stage_stat'].forEach(function (stage, i) {
                                selectLevel = new _selectLevelBtn.SelectLevelBtn(stage.description);

                                selectLevel.stageId = stage.id;
                                selectLevel.missionId = (data['mission_stat'].find(function (m) {
                                        return m.stage_stat_id == stage.id;
                                }) || {}).id;
                                selectLevel.setProgress(0, data['mission_stat'].filter(function (m) {
                                        return m.stage_stat_id == stage.id;
                                }).length);

                                selectLevel.graph.x = i * (selectLevel.width + 8);
                                selectLevel.graph.y = 0;

                                _this.stages.add(selectLevel.graph);

                                selectLevel.graph.onChildInputDown.add(function (target) {
                                        _app.App.storage.stageId = target.parent.data.instance.stageId;
                                        _app.App.storage.missionId = target.parent.data.instance.missionId;
                                        console.log(_app.App.storage.stageId, _app.App.storage.missionId);
                                        _app.App.phaser.state.start('game');
                                });
                        });

                        mask.beginFill(0xffffff);
                        mask.drawRect(0, 0, 3 * (selectLevel.width + 8), selectLevel.height);
                        mask.x = this.stages.x;
                        mask.y = this.stages.y;
                        controller.update();
                }
        }]);

        return StagesList;
}();

},{"../app":28,"./controllers/horizontalListController":39,"./imgBtn":40,"./selectLevelBtn":43}],45:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.DataLoader = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _MD = require('./MD5');

var _MD2 = _interopRequireDefault(_MD);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function completeHandler_obf(res, callback, error) {
	if (res.error) {
		//rTracer.trace( "ERROR => DataLoader\\completeHandler_obf: " + data.response.error_code + " => " + data.response.error_message, rTracer.ERROR);

		// if (dict[event.target][1] == null)
		// {
		// 	var msg = (data.response.error_message).toString();
		// 	//rTracer.trace( msg, rTracer.ERROR);
		// } 
		// else 
		// {
		// 	error(data.response);
		// };
	} else {
		callback(res.data);
	}
}

function httpStatusHandler_obf(event) {
	//    rTracer.trace("httpStatusHandler: " + event);
}

function _ioError(ev) {
	try {
		rTracer.trace("ERROR => DataLoader\\_ioError: " + ev.text, rTracer.ERROR);

		var error = dict[ev.target][1];

		if (error != null) error(ev);

		delete dict[ev.target];
	} catch (err) {
		rTracer.trace("ERROR => DataLoader\\_ioError: " + err.message, rTracer.ERROR);
	}
}

function _secureError(ev) {
	try {
		rTracer.trace("ERROR => DataLoader\\_secureError: " + ev.text, rTracer.ERROR);

		var error = dict[ev.target][1];

		if (error != null) error(ev);

		delete dict[ev.target];
	} catch (err) {
		rTracer.trace("ERROR => DataLoader\\_secureError: " + err.message, rTracer.ERROR);
	}
}

function getData_obf(method, data) {
	//m=|||uid||100200710|||s_key||-1|||m||0||0||user.init|||m||0||1||{}
	return { m: '|||' + (data.uid || 'uid') + '||100200300|||' + (data.s_key || 's_key') + '||-1|||m||0||0||' + method + '|||m||0||1||{}'

		// data.method 	= method;
		// data.format 	= DataLoader.RESPONSE_DATA_FORMAT;			
		// data.api_server = DataLoader.SERVER_URL; 
		// data.v 			= DataLoader.API_VERSION;

		// var sigArray = []			
		// var result = '';

		// for (var param in data)
		// {
		// 	var value = data[param];
		// 	let type = typeof value;
		// 	if (!(type = 'string') && !(Number.isInteger(value)))
		// 	{
		// 		data[param] = JSON.stringify(value);									
		// 	}			 
		// }
		// for (var p in data)
		// {
		// 	sigArray.push(`${p}=${data[p]}`);				 
		// }
		// sigArray.sort();

		// sigArray.forEach(s => result+=s);

		// data.sig = MD5.encrypt( DataLoader.api_id + result + DataLoader.secret_key);			
		// data.api_id = DataLoader.api_id;
		// data.timestamp = Date.now();
		// data.random = Math.abs( Math.round(Math.random() * 1000) - 500);	

		// var str = '';
		// for (var v in data)
		// {
		// 	str += `${v}=${data[v]}&`;			 
		// }	

	};return str.slice(0, str.length - 1);
}

var DataLoader = exports.DataLoader = function () {
	_createClass(DataLoader, null, [{
		key: 'RESPONSE_DATA_FORMAT',
		get: function get() {
			return 'JSON';
		}
	}, {
		key: 'API_VERSION',

		//static get REQUEST_HTTP_MODE() {return 'POST'};
		get: function get() {
			return '1.0';
		}
	}, {
		key: 'SERVER_API_URL',
		get: function get() {
			return "https://maganza.ru/fsnew/vk/htdocs/index.php";
		}
	}, {
		key: 'SERVER_LEVELS_URL',
		get: function get() {
			return "lvl";
		}
	}, {
		key: 'SERVER_IMGS_URL',
		get: function get() {
			return "./img";
		}
	}, {
		key: 'api_id',
		get: function get() {
			return "3226070";
		}
	}, {
		key: 'secret_key',
		get: function get() {
			return "zyn1WEQdzV92jTYqDevK";
		}

		//public const VKServer:String 	= 'http://46.4.95.181/fotocrossword/ok/api.php';
		//public const VKSecret:String 	= 'F6F24DDD8B1602C25CD44455';	// Секретный ключ приложения

		//public const VKPublic:String 	= 'CBANIQFMABABABABA';			// Публичный ключ приложения

	}]);

	function DataLoader() {
		_classCallCheck(this, DataLoader);
	}

	_createClass(DataLoader, [{
		key: 'request_obf',
		value: function request_obf(method) {
			var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
			var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
			var error = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;


			// if (DataLoader.REQUEST_HTTP_MODE == 'POST')
			// {

			// 	instance.post(DataLoader.SERVER_URL,
			// 		getData_obf(method, data)
			// 	)
			// 	.then(function (response) {
			// 		//console.log(response);
			// 		completeHandler_obf(response, callback, error);
			// 	})
			// 	.catch(function (error) {
			// 		console.log(error);
			// 		//lr.addEventListener(IOErrorEvent.IO_ERROR, 				this._ioError);
			// 		//lr.addEventListener(SecurityErrorEvent.SECURITY_ERROR, 	this._secureError);
			// 	});
			// } 
			// else 
			// {
			// 	axios.get(DataLoader.SERVER_URL, {
			// 		// headers: {
			// 		// 	'Access-Control-Allow-Origin': '*',
			// 		//   },
			// 		params: getData_obf(method, data)
			// 	})
			// 	.then(function (response) {
			// 		//lr.addEventListener(Event.COMPLETE, completeHandler_obf); 
			// 		//console.log(response);
			// 		completeHandler_obf(response, callback, error);
			// 	})
			// 	.catch(function (error) {
			// 		console.log(error);
			// 		//lr.addEventListener(IOErrorEvent.IO_ERROR, 				this._ioError);
			// 		//lr.addEventListener(SecurityErrorEvent.SECURITY_ERROR, 	this._secureError);
			// 	});
			// }		

			//lr.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler_obf); // Возвращает код состояния HTTP запроса (не ошибка - просто состояние)


			//rTracer.trace(request.data);

			//lr.load(request);

			return _axios2.default.get(DataLoader.SERVER_API_URL, {
				// headers: {
				// 	'Access-Control-Allow-Origin': '*',
				//   },
				params: getData_obf(method, data)
			});
		}
	}]);

	return DataLoader;
}();

},{"./MD5":46,"axios":1}],46:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MD5 = function () {
    function MD5() {
        _classCallCheck(this, MD5);
    }

    _createClass(MD5, null, [{
        key: "encrypt",
        value: function encrypt(data) {
            var x = [];
            var k, AA, BB, CC, DD, a, b, c, d;
            var S11 = 7,
                S12 = 12,
                S13 = 17,
                S14 = 22;
            var S21 = 5,
                S22 = 9,
                S23 = 14,
                S24 = 20;
            var S31 = 4,
                S32 = 11,
                S33 = 16,
                S34 = 23;
            var S41 = 6,
                S42 = 10,
                S43 = 15,
                S44 = 21;

            data = MD5.Utf8Encode(data);

            x = MD5.ConvertToWordArray(data);

            a = 0x67452301;b = 0xEFCDAB89;c = 0x98BADCFE;d = 0x10325476;

            for (k = 0; k < x.length; k += 16) {
                AA = a;BB = b;CC = c;DD = d;
                a = MD5.FF(a, b, c, d, x[k + 0], S11, 0xD76AA478);
                d = MD5.FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);
                c = MD5.FF(c, d, a, b, x[k + 2], S13, 0x242070DB);
                b = MD5.FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);
                a = MD5.FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);
                d = MD5.FF(d, a, b, c, x[k + 5], S12, 0x4787C62A);
                c = MD5.FF(c, d, a, b, x[k + 6], S13, 0xA8304613);
                b = MD5.FF(b, c, d, a, x[k + 7], S14, 0xFD469501);
                a = MD5.FF(a, b, c, d, x[k + 8], S11, 0x698098D8);
                d = MD5.FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);
                c = MD5.FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);
                b = MD5.FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);
                a = MD5.FF(a, b, c, d, x[k + 12], S11, 0x6B901122);
                d = MD5.FF(d, a, b, c, x[k + 13], S12, 0xFD987193);
                c = MD5.FF(c, d, a, b, x[k + 14], S13, 0xA679438E);
                b = MD5.FF(b, c, d, a, x[k + 15], S14, 0x49B40821);
                a = MD5.GG(a, b, c, d, x[k + 1], S21, 0xF61E2562);
                d = MD5.GG(d, a, b, c, x[k + 6], S22, 0xC040B340);
                c = MD5.GG(c, d, a, b, x[k + 11], S23, 0x265E5A51);
                b = MD5.GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);
                a = MD5.GG(a, b, c, d, x[k + 5], S21, 0xD62F105D);
                d = MD5.GG(d, a, b, c, x[k + 10], S22, 0x2441453);
                c = MD5.GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);
                b = MD5.GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);
                a = MD5.GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);
                d = MD5.GG(d, a, b, c, x[k + 14], S22, 0xC33707D6);
                c = MD5.GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);
                b = MD5.GG(b, c, d, a, x[k + 8], S24, 0x455A14ED);
                a = MD5.GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);
                d = MD5.GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);
                c = MD5.GG(c, d, a, b, x[k + 7], S23, 0x676F02D9);
                b = MD5.GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);
                a = MD5.HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);
                d = MD5.HH(d, a, b, c, x[k + 8], S32, 0x8771F681);
                c = MD5.HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);
                b = MD5.HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);
                a = MD5.HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);
                d = MD5.HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);
                c = MD5.HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);
                b = MD5.HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);
                a = MD5.HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);
                d = MD5.HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);
                c = MD5.HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);
                b = MD5.HH(b, c, d, a, x[k + 6], S34, 0x4881D05);
                a = MD5.HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);
                d = MD5.HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);
                c = MD5.HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);
                b = MD5.HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);
                a = MD5.II(a, b, c, d, x[k + 0], S41, 0xF4292244);
                d = MD5.II(d, a, b, c, x[k + 7], S42, 0x432AFF97);
                c = MD5.II(c, d, a, b, x[k + 14], S43, 0xAB9423A7);
                b = MD5.II(b, c, d, a, x[k + 5], S44, 0xFC93A039);
                a = MD5.II(a, b, c, d, x[k + 12], S41, 0x655B59C3);
                d = MD5.II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);
                c = MD5.II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);
                b = MD5.II(b, c, d, a, x[k + 1], S44, 0x85845DD1);
                a = MD5.II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);
                d = MD5.II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);
                c = MD5.II(c, d, a, b, x[k + 6], S43, 0xA3014314);
                b = MD5.II(b, c, d, a, x[k + 13], S44, 0x4E0811A1);
                a = MD5.II(a, b, c, d, x[k + 4], S41, 0xF7537E82);
                d = MD5.II(d, a, b, c, x[k + 11], S42, 0xBD3AF235);
                c = MD5.II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);
                b = MD5.II(b, c, d, a, x[k + 9], S44, 0xEB86D391);
                a = MD5.AddUnsigned(a, AA);
                b = MD5.AddUnsigned(b, BB);
                c = MD5.AddUnsigned(c, CC);
                d = MD5.AddUnsigned(d, DD);
            }

            var temp = MD5.WordToHex(a) + MD5.WordToHex(b) + MD5.WordToHex(c) + MD5.WordToHex(d);

            return temp.toLowerCase();
        }
    }, {
        key: "RotateLeft",
        value: function RotateLeft(lValue, iShiftBits) {
            return lValue << iShiftBits | lValue >>> 32 - iShiftBits;
        }
    }, {
        key: "AddUnsigned",
        value: function AddUnsigned(lX, lY) {
            var lX4, lY4, lX8, lY8, lResult;
            lX8 = lX & 0x80000000;
            lY8 = lY & 0x80000000;
            lX4 = lX & 0x40000000;
            lY4 = lY & 0x40000000;
            lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);
            if (lX4 & lY4) {
                return lResult ^ 0x80000000 ^ lX8 ^ lY8;
            }
            if (lX4 | lY4) {
                if (lResult & 0x40000000) {
                    return lResult ^ 0xC0000000 ^ lX8 ^ lY8;
                } else {
                    return lResult ^ 0x40000000 ^ lX8 ^ lY8;
                }
            } else {
                return lResult ^ lX8 ^ lY8;
            }
        }
    }, {
        key: "F",
        value: function F(x, y, z) {
            return x & y | ~x & z;
        }
    }, {
        key: "G",
        value: function G(x, y, z) {
            return x & z | y & ~z;
        }
    }, {
        key: "H",
        value: function H(x, y, z) {
            return x ^ y ^ z;
        }
    }, {
        key: "I",
        value: function I(x, y, z) {
            return y ^ (x | ~z);
        }
    }, {
        key: "FF",
        value: function FF(a, b, c, d, x, s, ac) {
            a = MD5.AddUnsigned(a, MD5.AddUnsigned(MD5.AddUnsigned(MD5.F(b, c, d), x), ac));
            return MD5.AddUnsigned(MD5.RotateLeft(a, s), b);
        }
    }, {
        key: "GG",
        value: function GG(a, b, c, d, x, s, ac) {
            a = MD5.AddUnsigned(a, MD5.AddUnsigned(MD5.AddUnsigned(MD5.G(b, c, d), x), ac));
            return MD5.AddUnsigned(MD5.RotateLeft(a, s), b);
        }
    }, {
        key: "HH",
        value: function HH(a, b, c, d, x, s, ac) {
            a = MD5.AddUnsigned(a, MD5.AddUnsigned(MD5.AddUnsigned(MD5.H(b, c, d), x), ac));
            return MD5.AddUnsigned(MD5.RotateLeft(a, s), b);
        }
    }, {
        key: "II",
        value: function II(a, b, c, d, x, s, ac) {
            a = MD5.AddUnsigned(a, MD5.AddUnsigned(MD5.AddUnsigned(MD5.I(b, c, d), x), ac));
            return MD5.AddUnsigned(MD5.RotateLeft(a, s), b);
        }
    }, {
        key: "ConvertToWordArray",
        value: function ConvertToWordArray(string) {
            var lWordCount;
            var lMessageLength = string.length;
            var lNumberOfWords_temp1 = lMessageLength + 8;
            var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - lNumberOfWords_temp1 % 64) / 64;
            var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
            var lWordArray = []; //new Array(lNumberOfWords-1);
            var lBytePosition = 0;
            var lByteCount = 0;
            while (lByteCount < lMessageLength) {
                lWordCount = (lByteCount - lByteCount % 4) / 4;
                lBytePosition = lByteCount % 4 * 8;
                lWordArray[lWordCount] = lWordArray[lWordCount] | string.charCodeAt(lByteCount) << lBytePosition;
                lByteCount++;
            }
            lWordCount = (lByteCount - lByteCount % 4) / 4;
            lBytePosition = lByteCount % 4 * 8;
            lWordArray[lWordCount] = lWordArray[lWordCount] | 0x80 << lBytePosition;
            lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
            lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
            return lWordArray;
        }
    }, {
        key: "WordToHex",
        value: function WordToHex(lValue) {
            var WordToHexValue = "",
                WordToHexValue_temp = "",
                lByte,
                lCount;
            for (lCount = 0; lCount <= 3; lCount++) {
                lByte = lValue >>> lCount * 8 & 255;
                WordToHexValue_temp = "0" + lByte.toString(16);
                WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2);
            }
            return WordToHexValue;
        }
    }, {
        key: "Utf8Encode",
        value: function Utf8Encode(string) {

            var utftext = "";

            for (var n = 0; n < string.length; n++) {

                var c = string.charCodeAt(n);

                if (c < 128) {
                    utftext += String.fromCharCode(c);
                } else if (c > 127 && c < 2048) {
                    utftext += String.fromCharCode(c >> 6 | 192);
                    utftext += String.fromCharCode(c & 63 | 128);
                } else {
                    utftext += String.fromCharCode(c >> 12 | 224);
                    utftext += String.fromCharCode(c >> 6 & 63 | 128);
                    utftext += String.fromCharCode(c & 63 | 128);
                }
            }

            return utftext;
        }
    }]);

    return MD5;
}();

exports.default = MD5;

},{}],47:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DataLoader = require('./DataLoader');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Net = function () {
	//-----------------------/ Функции /---------------------------------------
	function Net() {
		_classCallCheck(this, Net);

		this.oDataLoader = new _DataLoader.DataLoader();
	}

	_createClass(Net, [{
		key: 'init',
		value: function init(oGameData) {
			this.oDataLoader.SERVER_URL = oGameData.SERVER_URL;
			this.oDataLoader.api_id = String(oGameData.api_id);
			this.oDataLoader.secret_key = oGameData.secret_key;
		}
	}, {
		key: 'getGeneralData',
		value: function getGeneralData(callback) {
			var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

			//http://www.sweetbear.info/base/od/htdocs/index.php?m=|||uid||100200300|||s_key||-1|||m||0||0||general.get_data|||m||0||1||{}
			this.oDataLoader.request_obf('general.get_data', {}).then(callback).catch(error);
		}
	}, {
		key: 'getOrCreateUser',
		value: function getOrCreateUser(callback) {
			var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

			//http://www.sweetbear.info/base/od/htdocs/index.php?m=|||uid||100200300|||s_key||-1|||m||0||0||general.get_data|||m||0||1||{}
			this.oDataLoader.request_obf('user.init', {}).then(callback).catch(error);
		}
	}, {
		key: 'getUserProfile',
		value: function getUserProfile(callback) {
			var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

			//http://www.sweetbear.info/base/od/htdocs/index.php?m=|||uid||100200300|||s_key||-1|||m||0||0||general.get_data|||m||0||1||{}
			this.oDataLoader.request_obf('user.get_profile_data', {}).then(callback).catch(error);
		}
	}, {
		key: 'firstLoad',
		value: function firstLoad(callback) {
			var _this = this;

			var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

			var data = {};

			this.oDataLoader.request_obf('general.get_data', {}).then(function (resp) {
				data.general = resp.data;
				return _this.oDataLoader.request_obf('user.init', { uid: 10541666 });
			}).then(function (resp) {
				data.user = resp.data;
				callback(data);
			}).catch(error);
		}

		//-------------------------------/ Общие методы /--------------------------------------------

		/**
  * Возвращает текущую стоимость boost'ов.
  * @param	callback функция обратного вызова
  */

	}, {
		key: 'getBoostCost',
		value: function getBoostCost(callback) {
			var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

			this.oDataLoader.request_obf('getBoostsCost', {}, callback, error);
		}

		/**
  * Возвращает информацию о текущем турнире.
  * @param	callback функция обратного вызова
  */

	}, {
		key: 'getGameProps',
		value: function getGameProps(callback) {
			var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

			this.oDataLoader.request_obf('getGameProps', {}, callback, error);
		}

		/**
  * Возвращает статистику по игре за последние 1000 дней исключая текущий.
  * @param	iType - Тип возвращаемой статистики (0 - топ лучших игроков, 1 - топ по городам, 2 - топ по полу игроков, 3 - топ по году рождения игроков).
  * @param	callback - функция обратного вызова
  * @param	iSourse - Источник данных (0 — максимально набранное количество очков пользователем за всю игру, 1 - максимально набранное количество очков в турнире среди друзей, 2 - максимально набранное количество очков в предыдущем турнире среди друзей).
  * @param	iLimit - Количество возвращаемых строк (максимум 1000, по умолчанию 100).
  */

	}, {
		key: 'getGameStatistic',
		value: function getGameStatistic(iType, callback) {
			var iSourse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
			var iLimit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 100;

			this.oDataLoader.request_obf('getGameStatistic', { type: iType, source: iSourse, limit: iLimit }, callback);
		}

		/**
  * Возвращает настройки приложения
  * @param	callback функция обратного вызова
  */

	}, {
		key: 'getSettings',
		value: function getSettings(callback, error) {
			this.oDataLoader.request_obf('getSettings', {}, callback, error);
		}

		/**
  * Возвращает список последних завершенных турниров с призовым фондом.
  * @param	callback - функция обратного вызова
  * @param	iAccount - Количество возвращаемых завершенных турниров (по умолчанию 1).
  */

	}, {
		key: 'getTournamentLog',
		value: function getTournamentLog(callback) {
			var iAccount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

			this.oDataLoader.request_obf('getTournamentLog', { account: iAccount }, callback);
		}

		/**
  * Возвращает рейтинг пользователей в турнире с призовым фондом.
  * @param	sUid - Идентификатор пользователя.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'getUserRating',
		value: function getUserRating(sUid, callback) {
			this.oDataLoader.request_obf('getUserRating', { uid: sUid }, callback);
		}

		/**
  * Возвращает список товаров возможных для покупки через валюту социальной сети.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'getExtendedGoods',
		value: function getExtendedGoods(callback) {
			var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

			this.oDataLoader.request_obf('getExtendedGoods', {}, callback, error);
		}
		//---------------------------------/ Игрок /-------------------------------------------------

		/**
  * Покупает указанное количество boost'ов.
  * @param	sUid - Идентификатор пользователя.
  * @param	sNums - Перечисляет через запятую номера boost'ов.
  * @param	sAccounts - Перечисляет через запятую в соответствующих позициях количество покупаемых boost'ов (по умолчанию 1).
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'buyBoostItems',
		value: function buyBoostItems(sUid, sNums, sAccounts, callback, error) {
			this.oDataLoader.request_obf('buyBoostItems', { uid: sUid, nums: sNums, accounts: sAccounts }, callback, error);
		}

		/**
  * Покупает билет для участия пользователя в турнире с призовым фондом, данный билет действует до окончания турнира.
  * @param	sUid - Идентификатор пользователя.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'buyTournamentTicket',
		value: function buyTournamentTicket(sUid, callback) {
			this.oDataLoader.request_obf('buyTournamentTicket', { uid: sUid }, callback);
		}

		/**
  * Возвращает список пользователей, которым невозможно сделать подарки boost'ов или энергии.
  * @param	sUid - Идентификатор пользователя.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'getGiftStatus',
		value: function getGiftStatus(sUid, callback) {
			var error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

			this.oDataLoader.request_obf('getGiftStatus', { uid: sUid }, callback, error);
		}

		/**
  * Возвращает список boost'от которые есть у игрока.
  * @param	sUid - Идентификатор пользователя.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'getUserBoosts',
		value: function getUserBoosts(sUid, callback) {
			this.oDataLoader.request_obf('getUserBoosts', { uid: sUid }, callback);
		}

		/**
  * Возвращает данные пользователя
  * @param	oGameUser	- пользователь
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'getUserProfile',
		value: function getUserProfile(oGameUser, callback) {
			var sFids = String(oGameUser.uid);
			for (var iIndex = 0; iIndex < oGameUser.aAppFriends.length; iIndex++) {
				sFids += ',' + String(oGameUser.aAppFriends[iIndex].uid);
			}

			this.oDataLoader.request_obf('getUserProfile', { uids: oGameUser.uid, fids: sFids, entering: { name: oGameUser.name, surname: oGameUser.surname, gender: oGameUser.gender, city: oGameUser.city, country: oGameUser.country } }, callback);
		}

		/**
  * Возвращает данные пользователя и его друзей
  * @param	oGameUser	- пользователь
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'getUserAndFriendProfile',
		value: function getUserAndFriendProfile(oGameUser, callback) {
			var sFids = String(oGameUser.uid);

			for (var iIndex = 0; iIndex < oGameUser.aAppFriends.length; iIndex++) {
				sFids += ',' + oGameUser.aAppFriends[iIndex].uid;
			}

			this.oDataLoader.request_obf('getUserProfile', { uids: sFids, fids: sFids }, callback);
		}

		/**
  * Дарит энергию другому игроку, при этом дарящий игрок никаких средств на это не тратит. Единственное ограничение — дарить энергию можно не чаще 1го раза в 10 минут.
  * @param	sFromUid - Идентификатор пользователя от кого сообщение.
  * @param	sToUid - Идентификатор пользователя которому предназначено сообщение.
  * @param	callback - функция обратного вызова
  * @param	sMessage - Текст отправляемого сообщения, максимальная длина 300 символов (по умолчанию «Принимай энергию в подарок!»).
  */

	}, {
		key: 'giftPowerItem',
		value: function giftPowerItem(sFromUid, sToUid, callback) {
			var sMessage = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "Принимай энергию в подарок";

			this.oDataLoader.request_obf('giftPowerItem', { from_uid: sFromUid, to_uid: sToUid, message: sMessage }, callback);
		}

		/**
  * Дарит boost другому игроку, при этом дарящий игрок никаких средств на этот boost не тратит. Единственное ограничение — дарить boost'ы можно не чаще 1го раза в 10 минут.
  * @param	sFromUid - Идентификатор пользователя от кого сообщение.
  * @param	sToUid - Идентификатор пользователя которому предназначено сообщение.
  * @param	iNum - Номер boost'а.
  * @param	callback - функция обратного вызова
  * @param	sMessage - Текст отправляемого сообщения, максимальная длина 300 символов (по умолчанию «Принимай энергию в подарок!»).
  */

	}, {
		key: 'giftBoostItem',
		value: function giftBoostItem(sFromUid, sToUid, iNum, callback) {
			var sMessage = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "Принимай boost в подарок!";

			this.oDataLoader.request_obf('giftBoostItem', { from_uid: sFromUid, to_uid: sToUid, num: iNum, message: sMessage }, callback);
		}

		/**
  * Списывает boost у пользователя как использованный.
  * @param	sUid - Идентификатор пользователя.
  * @param	iNum - Номер boost'а.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'useBoost',
		value: function useBoost(sUid, iNum, callback) {
			var error = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

			this.oDataLoader.request_obf('useBoost', { uid: sUid, num: iNum }, callback);
		}

		//--------------------------/ Сообщения /-------------------------------------------------

		/**
  * Возвращает список непрочитанных сообщений.
  * @param	sUid - Идентификатор пользователя.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'getUnreadMessage',
		value: function getUnreadMessage(sUid, callback) {
			var error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

			this.oDataLoader.request_obf('getUnreadMessages', { uid: sUid }, callback, error);
		}

		/**
  * Отправляет другому пользователю сообщение с просьбой прислать бустер, предыдущее сообщение об этом будет удалено.
  * @param	sFromUid - Идентификатор пользователя от кого сообщение.
  * @param	sToUids - Идентификаторы пользователей котором предназначено сообщение.( через запятую)
  * @param	iIdBoost - Идентификатор бустера который необходим.
  * @param	callback - функция обратного вызова
  * @param	sMessage - Текст отправляемого сообщения, максимальная длина 300 символов.
  */

	}, {
		key: 'sendBoostRequest',
		value: function sendBoostRequest(sFromUid, sToUids, iIdBoost, callback) {
			var sMessage = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "Не мог бы ты мне выслать boost.";

			this.oDataLoader.request_obf('sendBoostRequest', { from_uid: sFromUid, to_uid: sToUids, num: iIdBoost, message: sMessage }, callback);
		}

		/**
  * Отправляет другому пользователю сообщение с просьбой прислать энергию, предыдущее сообщение об этом будет удалено.
  * @param	sFromUid - Идентификатор пользователя от кого сообщение.
  * @param	sToUid - Идентификатор пользователя которому предназначено сообщение.
  * @param	callback - функция обратного вызова
  * @param	sMessage - Текст отправляемого сообщения, максимальная длина 300 символов.
  */

	}, {
		key: 'sendPowerRequest',
		value: function sendPowerRequest(sFromUid, sToUid, callback) {
			var sMessage = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "Не мог бы ты мне выслать энергии.";

			this.oDataLoader.request_obf('sendPowerRequest', { from_uid: sFromUid, to_uid: sToUid, message: sMessage }, callback);
		}

		/**
  * Помечает сообщения как прочитанные.
  * @param	sUid - Идентификатор пользователя.
  * @param	sMid - Перечисляет через запятую идентификаторы сообщений.
  * @param	callback - функция обратного вызова
  * @param	error - функция обработки ошибки
  */

	}, {
		key: 'setMessagesAsRead',
		value: function setMessagesAsRead(sUid, sMid, callback) {
			var error = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

			this.oDataLoader.request_obf('setMessagesAsRead', { uid: sUid, mids: sMid }, callback, error);
		}

		//-------------------------/ Мини игры /-------------------------------------------------

		/**
  * Вызывается при старте новой игровой сессии, приводит к уменьшению жизни на единицу. Если жизней нет возвращает ошибку.
  * @param	sUid - Идентификатор пользователя.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'startGame',
		value: function startGame(sUid, callback) {
			var error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

			this.oDataLoader.request_obf('startGame', { uid: sUid }, callback, error);
		}

		/**
  * Записывает результат игры пользователя.
  * @param	sUid - Идентификатор пользователя.
  * @param	iScore - Набранные пользователем очки за время игры.
  * @param	iXP - Набранный пользователем опыт за игру.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'storeGameResult',
		value: function storeGameResult(sUid, iScore, iXP, callback) {
			var error = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

			this.oDataLoader.request_obf('storeGameResult', { uid: sUid, score: iScore, experience: iXP }, callback, error);
		}

		//------------------------/ Фотозагадки /---------------------------------------------------

		/**
  * Разрешает доступ к игровой категории. Если категория платная, то осуществляется покупка доступа к ней.
  * @param	sUid - Идентификатор пользователя.
  * @param   sCatId - Идентификатор категории.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_buyCategory',
		value: function puzzle_buyCategory(sUid, sCatId, callback) {
			var error = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

			this.oDataLoader.request_obf('puzzle_buyCategory', { uid: sUid, cid: sCatId }, callback, error);
		}

		/**
  * Разрешает доступ к уровню в категории. Если уровень в категории платный, то осуществляется покупка доступа к нему.
  * @param	sUid - Идентификатор пользователя.
  * @param   sCatId - Идентификатор категории.
  * @param   sLvlId - Номер уровня в категории.
  * @param   sPayBoost - Идентификатор boost'а, которым оплачивает пользователь вместо игровой валюты.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_buyLevel',
		value: function puzzle_buyLevel(sUid, sCatId, sLvlId, sPayBoost, callback) {
			var error = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

			if (sPayBoost == "") this.oDataLoader.request_obf('puzzle_buyLevel', { uid: sUid, cid: sCatId, lid: sLvlId }, callback, error);else this.oDataLoader.request_obf('puzzle_buyLevel', { uid: sUid, cid: sCatId, lid: sLvlId, payboost: sPayBoost }, callback, error);
		}

		/**
  * Удаляет все лишние буквы.
  * @param	sUid - Идентификатор пользователя.
  * @param   sCatId - Идентификатор категории.
  * @param   sLvlId - Номер уровня в категории.
  * @param   sImgId - Номер картинки в уровне.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_clearTrash',
		value: function puzzle_clearTrash(sUid, sCatId, sLvlId, sImgId, callback) {
			var error = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

			this.oDataLoader.request_obf('puzzle_clearTrash', { uid: sUid, cid: sCatId, lid: sLvlId, iid: sImgId }, callback, error);
		}

		/**
  * Принимает от пользователя ответ и, в случае верного ответа, завершает игру.
  * @param	sUid - Идентификатор пользователя.
  * @param   sCatId - Идентификатор категории.
  * @param   sLvlId - Номер уровня в категории.
  * @param   sImgId - Номер картинки в уровне.
  * @param   sWord - Ответ на загадку.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_completedGame',
		value: function puzzle_completedGame(sUid, sCatId, sLvlId, sImgId, sWord, callback) {
			var error = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;

			this.oDataLoader.request_obf('puzzle_completedGame', { uid: sUid, cid: sCatId, lid: sLvlId, iid: sImgId, word: sWord }, callback, error);
		}

		/**
  * Возвращает список возможных категорий.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_getCategorys',
		value: function puzzle_getCategorys(callback) {
			var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

			this.oDataLoader.request_obf('puzzle_getCategorys', {}, callback, error);
		}

		/**
  * Возвращает настройки для модуля фотозагадки.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_getConfig',
		value: function puzzle_getConfig(callback) {
			var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

			this.oDataLoader.request_obf('puzzle_getConfig', {}, callback, error);
		}

		/**
  * Возвращает список картинок на уровне.
  * @param   sCatId - Идентификатор категории.
  * @param	sLvlId - Номер уровня в категории.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_getImages',
		value: function puzzle_getImages(sCatId, sLvlId, callback) {
			var error = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

			this.oDataLoader.request_obf('puzzle_getImages', { lid: sLvlId, cid: sCatId }, callback, error);
		}

		/**
  * Возвращает список уровней для указанной категории.
  * @param   sCatId - Идентификатор категории.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_getLevels',
		value: function puzzle_getLevels(sCatId, callback) {
			var error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

			this.oDataLoader.request_obf('puzzle_getLevels', { cid: sCatId }, callback, error);
		}

		/**
  * Показывает подписи к картинкам.
  * @param	sUid - Идентификатор пользователя.
  * @param   sCatId - Идентификатор категории.
  * @param   sLvlId - Номер уровня в категории.
  * @param   sImgId - Номер картинки в уровне.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_getTitles',
		value: function puzzle_getTitles(sUid, sCatId, sLvlId, sImgId, callback) {
			var error = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

			this.oDataLoader.request_obf('puzzle_getTitles', { uid: sUid, cid: sCatId, lid: sLvlId, iid: sImgId }, callback, error);
		}

		/**
  * Возвращает список категорий пользователя, которые он купил и/или начал играть.
  * @param	sUid - Идентификатор пользователя.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_getUserCategorys',
		value: function puzzle_getUserCategorys(sUid, callback) {
			var error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

			this.oDataLoader.request_obf('puzzle_getUserCategorys', { uid: sUid }, callback, error);
		}

		/**
  * Возвращает список картинок (начатые или законченные на уровне) имеющихся у пользователя.
  * @param	sUid - Идентификатор пользователя.
  * @param   sCatId - Идентификатор категории.
  * @param   sLvlId - Номер уровня в категории.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_getUserImage',
		value: function puzzle_getUserImage(sUid, sCatId, sLvlId, callback) {
			var error = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

			this.oDataLoader.request_obf('puzzle_getUserImages', { uid: sUid, cid: sCatId, lid: sLvlId }, callback, error);
		}

		/**
  * Возвращает список уровней для указанной категории пройденных/доступных пользователю.
  * @param	sUid - Идентификатор пользователя.
  * @param   sCatId - Идентификатор категории.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_getUserLevels',
		value: function puzzle_getUserLevels(sUid, sCatId, callback) {
			var error = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

			this.oDataLoader.request_obf('puzzle_getUserLevels', { uid: sUid, cid: sCatId }, callback, error);
		}

		/**
  * Открывает случайную не открытую букву.
  * @param	sUid - Идентификатор пользователя.
  * @param   sCatId - Идентификатор категории.
  * @param   sLvlId - Номер уровня в категории.
  * @param   sImgId - Номер картинки в уровне.
  * @param   excl - Маска исключений: длина маски должна совпадать с длиной слова, в позиции где символ выдавать не надо должен стоять 0, где возможно 1.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_openChar',
		value: function puzzle_openChar(sUid, sCatId, sLvlId, sImgId, sExcl, callback) {
			var error = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;

			this.oDataLoader.request_obf('puzzle_openChar', { uid: sUid, cid: sCatId, lid: sLvlId, iid: sImgId, excl: sExcl }, callback, error);
		}

		/**
  * Начинает новую игру или возвращает данные начатой игры, если такая имеется.
  * @param	sUid - Идентификатор пользователя.
  * @param   sCatId - Идентификатор категории.
  * @param   sLvlId - Номер уровня в категории.
  * @param   sImgId - Номер картинки в уровне.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_openGame',
		value: function puzzle_openGame(sUid, sCatId, sLvlId, sImgId, callback) {
			var error = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

			this.oDataLoader.request_obf('puzzle_openGame', { uid: sUid, cid: sCatId, lid: sLvlId, iid: sImgId }, callback, error);
		}

		/**
  * Открывает указанную часть картинки.
  * @param	sUid - Идентификатор пользователя.
  * @param   sCatId - Идентификатор категории.
  * @param   sLvlId - Номер уровня в категории.
  * @param   sImgId - Номер картинки в уровне.
  * @param   tick - Номер открываемого кусочка картинки.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_openTick',
		value: function puzzle_openTick(sUid, sCatId, sLvlId, sImgId, iTick, callback) {
			var error = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;

			this.oDataLoader.request_obf('puzzle_openTick', { uid: sUid, cid: sCatId, lid: sLvlId, iid: sImgId, tick: iTick }, callback, error);
		}

		/**
  * Пропускает начатую игру.
  * @param	sUid - Идентификатор пользователя.
  * @param   sCatId - Идентификатор категории.
  * @param   sLvlId - Номер уровня в категории.
  * @param   sImgId - Номер картинки в уровне.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_skipGame',
		value: function puzzle_skipGame(sUid, sCatId, sLvlId, sImgId, callback) {
			var error = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

			this.oDataLoader.request_obf('puzzle_skipGame', { uid: sUid, cid: sCatId, lid: sLvlId, iid: sImgId }, callback, error);
		}

		/**
  * Пропускает уровень в категории (вызывается вручную пользователем, если он хочет перейти к следующему уровню не доигрывая текущий, при этом возможность давать ответы в пропущенном уровне остается).
  * @param	sUid - Идентификатор пользователя.
  * @param   sCatId - Идентификатор категории.
  * @param   sLvlId - Номер уровня в категории.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_skipLevel',
		value: function puzzle_skipLevel(sUid, sCatId, sLvlId, callback) {
			var error = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

			this.oDataLoader.request_obf('puzzle_skipLevel', { uid: sUid, cid: sCatId, lid: sLvlId }, callback, error);
		}

		/**
  * Возвращает список завершенных картинок пользователями.
  * @param	sUids - Идентификаторы пользователей.
  * @param   sCatId - Идентификатор категории.
  * @param   sLvlId - Номер уровня в категории.
  * @param   sImageId - Номер картинки в уровне.
  * @param	callback - функция обратного вызова
  */

	}, {
		key: 'puzzle_getCompletedGames',
		value: function puzzle_getCompletedGames(sUids, sCatId, sLvlId, sImageId, callback) {
			var error = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

			if (sLvlId != "" && sImageId != "") {
				this.oDataLoader.request_obf('puzzle_getCompletedGames', { uids: sUids, cid: sCatId, lid: sLvlId, iid: sImageId }, callback, error);
			} else {
				this.oDataLoader.request_obf('puzzle_getCompletedGames', { uids: sUids, cid: sCatId }, callback, error);
			}
		}
	}]);

	return Net;
}();

exports.default = Net;

},{"./DataLoader":45}],48:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = gameState;

var _app = require('./../app');

var _fadeOutIn = require('./../effects/fadeOutIn');

var _fadeOutIn2 = _interopRequireDefault(_fadeOutIn);

var _btn = require('../gui/btn');

var _message = require('../gui/message');

var _DataLoader = require('../net/DataLoader');

var _imgBtn = require('../gui/imgBtn');

var _moneyBtn = require('../gui/moneyBtn');

var _gameFaq = require('../fotoCross/gameFaq');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var crossword = void 0;
var cluePhoto = void 0;
var letterPalette = void 0;
var selectedWord = null;

var wordsCount = void 0;
var data = {};

function crosswordSolved() {
	backToMenu();
}

function backToMenu() {
	_app.App.phaser.state.start('mainMenu');
}

function renderBoosters() {
	var btnCont = _app.App.phaser.add.group();
	btnCont.create(0, 0, 'gui_game_btn');
	btnCont.create(96 + 12, 0, 'gui_game_btn');
	btnCont.create((96 + 12) * 2, 0, 'gui_game_btn');
	btnCont.create((96 + 12) * 3, 0, 'gui_game_btn');
	btnCont.x = 750 - 304;
	btnCont.y = 70 + 304 + 14;
	btnCont.scale.setTo(0.72, 0.72);
}

function renderCrossword(parsedLevel) {
	crossword = _app.App.factory.crossword(parsedLevel);
	var cw = crossword.graph;
	cw.x = 16;
	cw.y = 70;
	//add mouseDown event handler (phaser way)
	cw.children.forEach(function (wordGr) {
		wordGr.children.forEach(function (letterGr) {
			letterGr.onChildInputDown.add(function (s, l) {
				var targetWord = s.parent.parent.data.instance;

				if (selectedWord == targetWord) {
					var letter = s.parent.data.instance;

					if (letter.label.length == 0 || letter.state == 'block') return;

					selectedWord.fillAt(letter.id, '');
					letter._palette.show();

					return;
				}

				if (selectedWord) {
					selectedWord.free();
				}

				selectedWord = targetWord;
				selectedWord.setState('over');
				cw.bringToTop(selectedWord.graph);
				letterPalette.generate(selectedWord.text);
				console.log(selectedWord.text);

				(0, _fadeOutIn2.default)(_app.App.phaser, cluePhoto.photo, function () {
					return cluePhoto.setPhoto('pic' + selectedWord.id);
				});
			});
		});
	});
}

function renderLetterPalette() {
	letterPalette = _app.App.factory.letterPalette(164, 650 - 142, 8, 2);
	var rightAswer = void 0;
	var wrongAnswer = void 0;

	letterPalette.graph.children.forEach(function (letter) {
		letter.onChildInputDown.add(function (s, l) {
			var nextLetter = selectedWord.fill(letter.data.instance.label, letter.data.instance);
			if (nextLetter) {
				var cross = crossword.map[(nextLetter.graph.parent.x + nextLetter.graph.x) / selectedWord.lw][(nextLetter.graph.parent.y + nextLetter.graph.y) / selectedWord.lh];
				//console.log(cross);

				letter.data.instance.hide();
			}

			if (selectedWord.isFilled() && nextLetter) {
				if (selectedWord.isCorrect()) {
					selectedWord.setState('block');

					var _loop = function _loop(i) {
						var cross = crossword.map[selectedWord.graph.x / selectedWord.lw + i * selectedWord.direction][selectedWord.graph.y / selectedWord.lh + i * !selectedWord.direction];
						var orig = cross.find(function (letter) {
							return letter.parent.data.instance.id == selectedWord.id;
						});

						cross.forEach(function (letter) {
							if (letter.parent.data.instance.id != selectedWord.id) {
								letter.parent.data.instance.fillAt(letter.data.instance.id, orig.data.instance.label);
								letter.data.instance.setState('block');
							}
						});
					};

					for (var i = 0; i < selectedWord.text.length; i++) {
						_loop(i);
					}

					if (!rightAswer) {
						rightAswer = new _message.RightAswer(selectedWord.text);
						rightAswer.graph.x = 0;
						rightAswer.graph.y = 0;

						setTimeout(function () {
							rightAswer.graph.destroy();
							rightAswer = null;

							--wordsCount;
							if (wordsCount == 0) {
								crosswordSolved();
							}
						}, 2000);
					}
				} else {
					if (!wrongAnswer) {
						wrongAnswer = new _message.WrongAnswer();
						wrongAnswer.graph.graph.x = 286;
						wrongAnswer.graph.graph.y = 465;

						wrongAnswer.graph.callback = function () {
							wrongAnswer.graph.graph.destroy();
							wrongAnswer = null;
						};
					}
				}
			}
		});
	});
}

function renderGUI() {
	var saleBtn = new _imgBtn.ImgBtn('btn_action_normal', 'btn_action_over');
	saleBtn.graph.x = 12;
	saleBtn.graph.y = 8;

	var faqBtn = new _imgBtn.ImgBtn('btn_help_normal', 'btn_help_over');
	faqBtn.graph.x = 568;
	faqBtn.graph.y = 8;

	faqBtn.callback = function () {
		var faq = new _gameFaq.GameFaq();
		faq.onClose = function () {
			faq.graph.destroy();
			faq = null;
		};
	};

	var sndBtn = new _imgBtn.ImgBtn('btn_sound_on_normal', 'btn_sound_on_over');
	sndBtn.graph.x = 704;
	sndBtn.graph.y = 8;

	var moneyBtn = new _moneyBtn.MoneyBtn();
	moneyBtn.graph.x = 292;
	moneyBtn.graph.y = 6;

	var backBtn = new _imgBtn.ImgBtn('btn_exit_game_normal', 'btn_exit_game_over', backToMenu);
	backBtn.graph.x = 10;
	backBtn.graph.y = 600;
}

function parseLevel() {
	var xml = _app.App.phaser.cache.getXML('level');

	var parsedLevel = [];
	var count = 0;
	xml.querySelectorAll('crossword>word').forEach(function (word, i) {
		//console.log(word);
		var w = {
			id: i + 1,
			img: word.querySelector('image1').textContent,
			text: word.querySelector('word').textContent,
			pos: {
				x: parseInt(word.querySelector('xp1').textContent),
				y: parseInt(word.querySelector('yp1').textContent),
				x2: parseInt(word.querySelector('xp2').textContent),
				y2: parseInt(word.querySelector('yp2').textContent)
			}
		};

		w.direction = w.pos.x == w.pos.x2 ? 0 : 1; // 0 - vertical, 1 - horizontal

		parsedLevel.push(w);
		_app.App.phaser.load.image('pic' + ++count, _DataLoader.DataLoader.SERVER_IMGS_URL + '/' + w.img);
	});

	return parsedLevel;
}

function gameState() {
	return {
		preload: function preload() {
			//gui
			//phaser.load.image('gui_game_btn', './data/ButtonsNormal.png');
			var mission_stat = _app.App.storage.generalData['mission_stat'].find(function (m) {
				return m.id == _app.App.storage.missionId;
			});
			//${mission_stat.path}
			//App.phaser.load.xml('level', './data/levels/901.xml', false);
			_app.App.phaser.load.xml('level', _DataLoader.DataLoader.SERVER_LEVELS_URL + '/' + mission_stat.path, false);
		},
		create: function create() {
			_app.App.phaser.add.sprite(0, 0, 'bg');

			cluePhoto = _app.App.factory.photo(750 - 304, 70);

			renderBoosters();

			var parsedLevel = parseLevel();

			wordsCount = parsedLevel.length;

			renderCrossword(parsedLevel);

			renderLetterPalette();

			_app.App.phaser.load.onLoadComplete.addOnce(function () {
				selectedWord = crossword.graph.children[0].data.instance;
				selectedWord.setState('over');
				crossword.graph.bringToTop(selectedWord.graph);
				letterPalette.generate(selectedWord.text);
				cluePhoto.setPhoto('pic' + selectedWord.id);

				console.log(selectedWord.text);
			}, this);

			renderGUI();

			_app.App.phaser.load.start();
		},
		update: function update() {},
		render: function render() {}
	};
}

},{"../fotoCross/gameFaq":33,"../gui/btn":38,"../gui/imgBtn":40,"../gui/message":41,"../gui/moneyBtn":42,"../net/DataLoader":45,"./../app":28,"./../effects/fadeOutIn":29}],49:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
			value: true
});

exports.default = function () {
			return {
						preload: function preload() {},
						create: function create() {
									_app.App.phaser.add.sprite(0, 0, 'bg');

									var stages = new _stagesList.StagesList();

									stages.graph.x = 70;
									stages.graph.y = 200;

									stages.fill(_app.App.storage.generalData);
									_app.App.storage.onGeneralData.addOnce(function (data) {
												return stages.fill(data);
									});

									var saleBtn = new _imgBtn.ImgBtn('btn_action_normal', 'btn_action_over');
									saleBtn.graph.x = 12;
									saleBtn.graph.y = 8;

									var faqBtn = new _imgBtn.ImgBtn('btn_help_normal', 'btn_help_over');
									faqBtn.graph.x = 568;
									faqBtn.graph.y = 8;

									faqBtn.callback = function () {
												var faq = new _gameFaq.GameFaq();
												faq.onClose = function () {
															faq.graph.destroy();
															faq = null;
												};
									};

									var sndBtn = new _imgBtn.ImgBtn('btn_sound_on_normal', 'btn_sound_on_over');
									sndBtn.graph.x = 704;
									sndBtn.graph.y = 8;

									var moneyBtn = new _moneyBtn.MoneyBtn();
									moneyBtn.graph.x = 292;
									moneyBtn.graph.y = 6;
						},
						update: function update() {},
						render: function render() {}
			};
};

var _app = require("../app");

var _assetService = require("./../utils/assetService");

var _selectLevelBtn = require("../gui/selectLevelBtn");

var _btn = require("../gui/btn");

var _stagesList = require("../gui/stagesList");

var _imgBtn = require("../gui/imgBtn");

var _moneyBtn = require("../gui/moneyBtn");

var _gameFaq = require("../fotoCross/gameFaq");

},{"../app":28,"../fotoCross/gameFaq":33,"../gui/btn":38,"../gui/imgBtn":40,"../gui/moneyBtn":42,"../gui/selectLevelBtn":43,"../gui/stagesList":44,"./../utils/assetService":51}],50:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AssetService = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _app = require('./../app');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var instance = null;

var AssetService = exports.AssetService = function () {
    function AssetService() {
        _classCallCheck(this, AssetService);

        if (instance) return instance;

        instance = this;

        _app.App.phaser.load.image('bg', './data/Background.png'); //t3
        _app.App.phaser.load.image('bg_fot', './data/BackgroundFot.png');
        _app.App.phaser.load.image('letter_empty', './data/Letter8x8.png');
        _app.App.phaser.load.image('letter_over', './data/Letter8x8selected.png');
        _app.App.phaser.load.image('letter_block', './data/Letter8x8blocked.png');

        _app.App.phaser.load.image('tut_ok_normal', './data/tutorial/btn_ok_normal.png');
        _app.App.phaser.load.image('tut_ok_over', './data/tutorial/btn_ok_over.png');
        _app.App.phaser.load.image('tut_bg', './data/tutorial/bg.png');

        _app.App.phaser.load.atlasXML('assets', './data/sprites.png', './data/sprites.xml');
        _app.App.phaser.load.json('tutorial', './data/tutorial.json');

        return instance;
    }

    _createClass(AssetService, [{
        key: 'get',
        value: function get(name) {
            return { atlas: 'assets', key: name + '.png' };
        }
    }]);

    return AssetService;
}();

},{"./../app":28}],51:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AssetService = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _app = require('./../app');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var instance = null;

var AssetService = exports.AssetService = function () {
    function AssetService() {
        _classCallCheck(this, AssetService);

        if (instance) return instance;

        instance = this;

        _app.App.phaser.load.image('bg', './data/Background.png'); //t3
        _app.App.phaser.load.image('bg_fot', './data/BackgroundFot.png');
        _app.App.phaser.load.image('letter_empty', './data/Letter8x8.png');
        _app.App.phaser.load.image('letter_over', './data/Letter8x8selected.png');
        _app.App.phaser.load.image('letter_block', './data/Letter8x8blocked.png');

        _app.App.phaser.load.image('tut_ok_normal', './data/tutorial/btn_ok_normal.png');
        _app.App.phaser.load.image('tut_ok_over', './data/tutorial/btn_ok_over.png');
        _app.App.phaser.load.image('tut_bg', './data/tutorial/bg.png');

        _app.App.phaser.load.atlasXML('assets', './data/sprites.png', './data/sprites.xml');
        _app.App.phaser.load.json('tutorial', './data/tutorial.json');

        return instance;
    }

    _createClass(AssetService, [{
        key: 'get',
        value: function get(name) {
            return { atlas: 'assets', key: name + '.png' };
        }
    }]);

    return AssetService;
}();

},{"./../app":28}]},{},[28])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J0b2EuanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwibm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJzcmNcXGFwcC5qcyIsInNyY1xcZWZmZWN0c1xcZmFkZU91dEluLmpzIiwic3JjXFxmb3RvQ3Jvc3NcXEdPRmFjdG9yeS5qcyIsInNyY1xcZm90b0Nyb3NzXFxjbHVlUGhvdG8uanMiLCJzcmNcXGZvdG9Dcm9zc1xcY3Jvc3N3b3JkLmpzIiwic3JjXFxmb3RvQ3Jvc3NcXGdhbWVGYXEuanMiLCJzcmNcXGZvdG9Dcm9zc1xcbGV0dGVyLmpzIiwic3JjXFxmb3RvQ3Jvc3NcXGxldHRlckNhbmRpZGF0ZS5qcyIsInNyY1xcZm90b0Nyb3NzXFxsZXR0ZXJQYWxldHRlLmpzIiwic3JjXFxmb3RvQ3Jvc3NcXHdvcmQuanMiLCJzcmNcXGd1aVxcYnRuLmpzIiwic3JjXFxndWlcXGNvbnRyb2xsZXJzXFxob3Jpem9udGFsTGlzdENvbnRyb2xsZXIuanMiLCJzcmNcXGd1aVxcaW1nQnRuLmpzIiwic3JjXFxndWlcXG1lc3NhZ2UuanMiLCJzcmNcXGd1aVxcbW9uZXlCdG4uanMiLCJzcmNcXGd1aVxcc2VsZWN0TGV2ZWxCdG4uanMiLCJzcmNcXGd1aVxcc3RhZ2VzTGlzdC5qcyIsInNyY1xcbmV0XFxEYXRhTG9hZGVyLmpzIiwic3JjXFxuZXRcXE1ENS5qcyIsInNyY1xcbmV0XFxOZXQuanMiLCJzcmNcXHN0YXRlc1xcZ2FtZS5qcyIsInNyY1xcc3RhdGVzXFxtYWluTWVudS5qcyIsInNyY1xcdXRpbHNcXEFzc2V0U2VydmljZS5qcyIsInNyY1xcdXRpbHNcXGFzc2V0U2VydmljZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBOzs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ3BMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzVGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL1NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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LGlCQUFJLE1BQUosQ0FBVyxJQUFYLENBQWdCLEtBQWhCLENBQXNCLFFBQXRCLEVBQWdDLHdCQUFoQzs7QUFFQSxpQkFBSSxNQUFKLENBQVcsSUFBWCxDQUFnQixRQUFoQixDQUF5QixRQUF6QixFQUFtQyxvQkFBbkMsRUFBeUQsb0JBQXpEO0FBQ0EsaUJBQUksTUFBSixDQUFXLElBQVgsQ0FBZ0IsSUFBaEIsQ0FBcUIsVUFBckIsRUFBaUMsc0JBQWpDOztBQUVBLGVBQU8sUUFBUDtBQUNIOzs7OzRCQUVHLEksRUFBSztBQUNMLG1CQUFPLEVBQUMsT0FBTSxRQUFQLEVBQWlCLEtBQVEsSUFBUixTQUFqQixFQUFQO0FBQ0giLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG52YXIgYnRvYSA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuYnRvYSAmJiB3aW5kb3cuYnRvYS5iaW5kKHdpbmRvdykpIHx8IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idG9hJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgdmFyIGxvYWRFdmVudCA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xuICAgIHZhciB4RG9tYWluID0gZmFsc2U7XG5cbiAgICAvLyBGb3IgSUUgOC85IENPUlMgc3VwcG9ydFxuICAgIC8vIE9ubHkgc3VwcG9ydHMgUE9TVCBhbmQgR0VUIGNhbGxzIGFuZCBkb2Vzbid0IHJldHVybnMgdGhlIHJlc3BvbnNlIGhlYWRlcnMuXG4gICAgLy8gRE9OJ1QgZG8gdGhpcyBmb3IgdGVzdGluZyBiL2MgWE1MSHR0cFJlcXVlc3QgaXMgbW9ja2VkLCBub3QgWERvbWFpblJlcXVlc3QuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiZcbiAgICAgICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgd2luZG93LlhEb21haW5SZXF1ZXN0ICYmICEoJ3dpdGhDcmVkZW50aWFscycgaW4gcmVxdWVzdCkgJiZcbiAgICAgICAgIWlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkge1xuICAgICAgcmVxdWVzdCA9IG5ldyB3aW5kb3cuWERvbWFpblJlcXVlc3QoKTtcbiAgICAgIGxvYWRFdmVudCA9ICdvbmxvYWQnO1xuICAgICAgeERvbWFpbiA9IHRydWU7XG4gICAgICByZXF1ZXN0Lm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiBoYW5kbGVQcm9ncmVzcygpIHt9O1xuICAgICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge307XG4gICAgfVxuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCB8fCAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlXG4gICAgcmVxdWVzdFtsb2FkRXZlbnRdID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCB8fCAocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0ICYmICF4RG9tYWluKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFjb25maWcucmVzcG9uc2VUeXBlIHx8IGNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JyA/IHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICAvLyBJRSBzZW5kcyAxMjIzIGluc3RlYWQgb2YgMjA0IChodHRwczovL2dpdGh1Yi5jb20vYXhpb3MvYXhpb3MvaXNzdWVzLzIwMSlcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyA9PT0gMTIyMyA/IDIwNCA6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1cyA9PT0gMTIyMyA/ICdObyBDb250ZW50JyA6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgdmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xuXG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oY29uZmlnLnVybCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLndpdGhDcmVkZW50aWFscykge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBFeHBlY3RlZCBET01FeGNlcHRpb24gdGhyb3duIGJ5IGJyb3dzZXJzIG5vdCBjb21wYXRpYmxlIFhNTEh0dHBSZXF1ZXN0IExldmVsIDIuXG4gICAgICAgIC8vIEJ1dCwgdGhpcyBjYW4gYmUgc3VwcHJlc3NlZCBmb3IgJ2pzb24nIHR5cGUgYXMgaXQgY2FuIGJlIHBhcnNlZCBieSBkZWZhdWx0ICd0cmFuc2Zvcm1SZXNwb25zZScgZnVuY3Rpb24uXG4gICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UodXRpbHMubWVyZ2UoZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLy4uL2RlZmF1bHRzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gdXRpbHMubWVyZ2Uoe1xuICAgICAgdXJsOiBhcmd1bWVudHNbMF1cbiAgICB9LCBhcmd1bWVudHNbMV0pO1xuICB9XG5cbiAgY29uZmlnID0gdXRpbHMubWVyZ2UoZGVmYXVsdHMsIHRoaXMuZGVmYXVsdHMsIHsgbWV0aG9kOiAnZ2V0JyB9LCBjb25maWcpO1xuICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBTdXBwb3J0IGJhc2VVUkwgY29uZmlnXG4gIGlmIChjb25maWcuYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChjb25maWcudXJsKSkge1xuICAgIGNvbmZpZy51cmwgPSBjb21iaW5lVVJMcyhjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gIH1cblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzIHx8IHt9XG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIC8vIE5vdGU6IHN0YXR1cyBpcyBub3QgZXhwb3NlZCBieSBYRG9tYWluUmVxdWVzdFxuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gYnRvYSBwb2x5ZmlsbCBmb3IgSUU8MTAgY291cnRlc3kgaHR0cHM6Ly9naXRodWIuY29tL2RhdmlkY2hhbWJlcnMvQmFzZTY0LmpzXG5cbnZhciBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSc7XG5cbmZ1bmN0aW9uIEUoKSB7XG4gIHRoaXMubWVzc2FnZSA9ICdTdHJpbmcgY29udGFpbnMgYW4gaW52YWxpZCBjaGFyYWN0ZXInO1xufVxuRS5wcm90b3R5cGUgPSBuZXcgRXJyb3I7XG5FLnByb3RvdHlwZS5jb2RlID0gNTtcbkUucHJvdG90eXBlLm5hbWUgPSAnSW52YWxpZENoYXJhY3RlckVycm9yJztcblxuZnVuY3Rpb24gYnRvYShpbnB1dCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGlucHV0KTtcbiAgdmFyIG91dHB1dCA9ICcnO1xuICBmb3IgKFxuICAgIC8vIGluaXRpYWxpemUgcmVzdWx0IGFuZCBjb3VudGVyXG4gICAgdmFyIGJsb2NrLCBjaGFyQ29kZSwgaWR4ID0gMCwgbWFwID0gY2hhcnM7XG4gICAgLy8gaWYgdGhlIG5leHQgc3RyIGluZGV4IGRvZXMgbm90IGV4aXN0OlxuICAgIC8vICAgY2hhbmdlIHRoZSBtYXBwaW5nIHRhYmxlIHRvIFwiPVwiXG4gICAgLy8gICBjaGVjayBpZiBkIGhhcyBubyBmcmFjdGlvbmFsIGRpZ2l0c1xuICAgIHN0ci5jaGFyQXQoaWR4IHwgMCkgfHwgKG1hcCA9ICc9JywgaWR4ICUgMSk7XG4gICAgLy8gXCI4IC0gaWR4ICUgMSAqIDhcIiBnZW5lcmF0ZXMgdGhlIHNlcXVlbmNlIDIsIDQsIDYsIDhcbiAgICBvdXRwdXQgKz0gbWFwLmNoYXJBdCg2MyAmIGJsb2NrID4+IDggLSBpZHggJSAxICogOClcbiAgKSB7XG4gICAgY2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChpZHggKz0gMyAvIDQpO1xuICAgIGlmIChjaGFyQ29kZSA+IDB4RkYpIHtcbiAgICAgIHRocm93IG5ldyBFKCk7XG4gICAgfVxuICAgIGJsb2NrID0gYmxvY2sgPDwgOCB8IGNoYXJDb2RlO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnRvYTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9XG5cbiAgICAgIGlmICghdXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgfSxcblxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICB9LFxuXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgdmFyIG9yaWdpblVSTDtcblxuICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICB9XG5cbiAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICByZXR1cm4ge1xuICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgaXNCdWZmZXIgPSByZXF1aXJlKCdpcy1idWZmZXInKTtcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbVxufTtcbiIsIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cblxuLy8gRm9yIE5vZGUgdjAuMTAgc3VwcG9ydC4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseS5cbmZ1bmN0aW9uIGlzU2xvd0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsImltcG9ydCBtYWluTWVudVN0YXRlIGZyb20gJy4vc3RhdGVzL21haW5NZW51LmpzJ1xyXG5pbXBvcnQgZ2FtZVN0YXRlIGZyb20gJy4vc3RhdGVzL2dhbWUuanMnXHJcbmltcG9ydCBOZXQgZnJvbSAnLi9uZXQvTmV0J1xyXG5pbXBvcnQgeyBBc3NldFNlcnZpY2UgfSBmcm9tICcuL3V0aWxzL0Fzc2V0U2VydmljZSc7XHJcbmltcG9ydCBHT0ZhY3RvcnkgZnJvbSAnLi9mb3RvQ3Jvc3MvR09GYWN0b3J5JztcclxuXHJcbmNsYXNzIEFwcHtcclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgQXBwLnBoYXNlciA9IG5ldyBQaGFzZXIuR2FtZSg3NjAsIDY1MCwgUGhhc2VyLkNBTlZBUywgJ2dhbWUnLCB7IFxyXG4gICAgICAgICAgICBwcmVsb2FkOiBwcmVsb2FkLCBcclxuICAgICAgICAgICAgY3JlYXRlOiBjcmVhdGUgXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByZWxvYWQoKXtcclxuICAgIEFwcC5uZXQgPSBuZXcgTmV0KCk7XHJcbiAgICBBcHAuc3RvcmFnZSA9IHtvbkdlbmVyYWxEYXRhOiBuZXcgUGhhc2VyLlNpZ25hbCgpfTtcclxuICAgIEFwcC5hc3NldFNlcnZpY2UgPSBuZXcgQXNzZXRTZXJ2aWNlKCk7XHJcbiAgICBBcHAuZmFjdG9yeSA9IG5ldyBHT0ZhY3RvcnkoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlKCl7XHJcbiAgICBBcHAucGhhc2VyLnN0YXRlLmFkZCgnbWFpbk1lbnUnLCBtYWluTWVudVN0YXRlKCkpO1xyXG4gICAgQXBwLnBoYXNlci5zdGF0ZS5hZGQoJ2dhbWUnLCBnYW1lU3RhdGUoKSk7XHJcbiAgICBcclxuICAgIEFwcC5waGFzZXIuc3RhdGUuc3RhcnQoJ21haW5NZW51Jyk7XHJcbiAgICBcclxuICAgIEFwcC5uZXQuZmlyc3RMb2FkKHJlc3AgPT4ge1xyXG4gICAgICAgIEFwcC5zdG9yYWdlLmdlbmVyYWxEYXRhID0gcmVzcC5nZW5lcmFsWzBdWzFdO1xyXG4gICAgICAgIEFwcC5zdG9yYWdlLm9uR2VuZXJhbERhdGEuZGlzcGF0Y2goQXBwLnN0b3JhZ2UuZ2VuZXJhbERhdGEpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBvazoke3Jlc3B9YCk7IC8vIFsnbWV0aG9kJywge2RhdGF9XVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQXBwLm5ldC5nZXRHZW5lcmFsRGF0YSggcmVzcCA9PiB7XHJcbiAgICAvLyAgICAgQXBwLnN0b3JhZ2UuZ2VuZXJhbERhdGEgPSByZXNwWzBdWzFdO1xyXG4gICAgLy8gICAgIEFwcC5zdG9yYWdlLm9uR2VuZXJhbERhdGEuZGlzcGF0Y2goQXBwLnN0b3JhZ2UuZ2VuZXJhbERhdGEpO1xyXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKGBvazoke3Jlc3B9YCk7IC8vIFsnbWV0aG9kJywge2RhdGF9XVxyXG4gICAgLy8gfSwgZSA9PiB7XHJcbiAgICAvLyAgICAgY29uc29sZS5sb2coYGVycjoke2V9YCk7XHJcbiAgICAvLyB9KTtcclxufVxyXG5cclxuZXhwb3J0IHtBcHB9O1xyXG5cclxubmV3IEFwcCgpOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEZhZGVPdXRJbihwaGFzZXIsIHRhcmdldCwgY2FsbGJhY2sgPSBudWxsKXtcclxuICAgIGxldCB0d2VlbiA9IHBoYXNlci5hZGQudHdlZW4odGFyZ2V0KS50byggeyBhbHBoYTogMCB9LCAyMDAsIFBoYXNlci5FYXNpbmcuTGluZWFyLk5vbmUpO1xyXG4gICAgdHdlZW4ub25Db21wbGV0ZS5hZGQoKCk9PntcclxuICAgICAgICBpZihjYWxsYmFjaylcclxuICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuXHJcbiAgICAgICAgcGhhc2VyLmFkZC50d2Vlbih0YXJnZXQpLnRvKCB7IGFscGhhOiAxIH0sIDIwMCwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSk7XHJcbiAgICB9KTtcclxuICAgIHR3ZWVuLnN0YXJ0KCk7XHJcbn0iLCJpbXBvcnQgeyBBcHAgfSBmcm9tICcuLi9hcHAnO1xyXG5pbXBvcnQgTGV0dGVyIGZyb20gJy4vbGV0dGVyJ1xyXG5pbXBvcnQgV29yZCBmcm9tICcuL3dvcmQnXHJcbmltcG9ydCBDcm9zc3dvcmQgZnJvbSAnLi9jcm9zc3dvcmQnXHJcbmltcG9ydCBMZXR0ZXJQYWxldHRlIGZyb20gJy4vbGV0dGVyUGFsZXR0ZSdcclxuaW1wb3J0IENsdWVQaG90byBmcm9tICcuL2NsdWVQaG90bydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdPRmFjdG9yeXtcclxuXHRjb25zdHJ1Y3Rvcigpe1xyXG5cdFx0dGhpcy5waGFzZXIgPSBBcHAucGhhc2VyO1xyXG5cdH1cclxuXHRcclxuXHRsZXR0ZXIoeCwgeSwgbGFiZWwgPSAnJyl7XHJcblx0XHRsZXQgbGV0dGVyID0gbmV3IExldHRlcihsYWJlbCk7XHJcblx0XHRsZXQgbCA9IGxldHRlci5yZW5kZXIoKTtcclxuXHRcdFxyXG5cdFx0bC54ID0geDtcclxuXHRcdGwueSA9IHk7XHJcblx0XHRcclxuXHRcdHJldHVybiBsZXR0ZXI7XHJcblx0fVxyXG5cclxuXHRsZXR0ZXJQYWxldHRlKHgsIHksIGNvbHVtbk51bSwgcm93TnVtKXtcclxuXHRcdGxldCBscCA9IG5ldyBMZXR0ZXJQYWxldHRlKGNvbHVtbk51bSwgcm93TnVtKTtcclxuXHRcdGxldCBncmFwaCA9IGxwLnJlbmRlcih0aGlzLnBoYXNlcik7XHJcblxyXG5cdFx0Z3JhcGgueCA9IHg7XHJcblx0XHRncmFwaC55ID0geTtcclxuXHJcblx0XHRyZXR1cm4gbHA7XHJcblx0fVxyXG5cdFxyXG5cdHBob3RvKHgsIHkpe1xyXG5cdFx0bGV0IGNwID0gbmV3IENsdWVQaG90bygpO1xyXG5cdFx0Y3AucmVuZGVyKCk7XHJcblxyXG5cdFx0Y3AuZ3JhcGgueCA9IHg7XHJcblx0XHRjcC5ncmFwaC55ID0geTtcclxuXHJcblx0XHRyZXR1cm4gY3A7XHJcblx0fVxyXG5cdFxyXG5cdGNyb3Nzd29yZCh3b3Jkcyl7XHJcblx0XHRsZXQgY3Jvc3N3b3JkID0gbmV3IENyb3Nzd29yZCgpO1xyXG5cdFx0Y3Jvc3N3b3JkLnJlbmRlcih3b3Jkcyk7XHJcblxyXG5cdFx0cmV0dXJuIGNyb3Nzd29yZDtcclxuXHR9XHJcbn0iLCJpbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi4vYXBwXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDbHVlUGhvdG97XHJcbiAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgIHRoaXMuZ3JhcGggPSBudWxsXHJcbiAgICAgICAgdGhpcy5waG90byA9IG51bGwgLy8gcG9pbnRlciB0byBwaGFzZXIuc3ByaXRlXHJcbiAgICB9XHJcblxyXG4gICAgc2V0UGhvdG8odmFsKXtcclxuICAgICAgICBpZighdGhpcy5waG90byl7XHJcbiAgICAgICAgICAgIHRoaXMucGhvdG8gPSB0aGlzLmdyYXBoLmNyZWF0ZSgwLCAwLCB2YWwpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5waG90by54ID0gNDtcclxuICAgICAgICAgICAgdGhpcy5waG90by55ID0gNDtcclxuICAgICAgICAgICAgdGhpcy5waG90by5zY2FsZS5zZXRUbygwLjk4LDAuOTgpO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICB0aGlzLnBob3RvLmxvYWRUZXh0dXJlKHZhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpe1xyXG4gICAgICAgIHRoaXMuZ3JhcGggPSBBcHAucGhhc2VyLmFkZC5ncm91cCgpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGguY3JlYXRlKDAsMCwgJ2JnX2ZvdCcpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5ncmFwaDtcclxuICAgIH1cclxufSIsImltcG9ydCB7QXBwfSBmcm9tICcuLy4uL2FwcCdcclxuaW1wb3J0IFdvcmQgZnJvbSAnLi93b3JkJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3Jvc3N3b3Jke1xyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICB0aGlzLm1hcCA9IFtdO1xyXG4gICAgICAgIHRoaXMuZ3JhcGggPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcih3b3Jkcyl7XHJcbiAgICAgICAgbGV0IGNvbnQgPSBBcHAucGhhc2VyLmFkZC5ncm91cCgpO1xyXG4gICAgICAgIGxldCB4LCB5O1xyXG5cclxuICAgICAgICB3b3Jkcy5mb3JFYWNoKHdvcmQgPT4ge1xyXG4gICAgICAgICAgICBsZXQgdyA9IG5ldyBXb3JkKHdvcmQudGV4dCwgd29yZC5kaXJlY3Rpb24pO1xyXG4gICAgICAgICAgICB3LmlkID0gd29yZC5pZDtcclxuXHJcbiAgICAgICAgICAgIGNvbnQuYWRkKHcucmVuZGVyKHRoaXMucGhhc2VyKSk7XHJcbiAgICAgICAgICAgIHcuZ3JhcGgueCA9IHdvcmQucG9zLnggKiB3Lmx3O1xyXG4gICAgICAgICAgICB3LmdyYXBoLnkgPSB3b3JkLnBvcy55ICogdy5saDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmb3IobGV0IGk9MDsgaTwgd29yZC50ZXh0Lmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIHggPSB3b3JkLnBvcy54ICsgaSAqIHdvcmQuZGlyZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgeSA9IHdvcmQucG9zLnkgKyBpKighd29yZC5kaXJlY3Rpb24pO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKCF0aGlzLm1hcFt4XSlcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcFt4XSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHRoaXMubWFwW3hdW3ldKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFwW3hdW3ldLnB1c2gody5ncmFwaC5jaGlsZHJlbltpXSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXBbeF1beV0gPSBbdy5ncmFwaC5jaGlsZHJlbltpXV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgd29yZHMuZm9yRWFjaCh3b3JkID0+IHtcclxuICAgICAgICAgICAgeCA9IHdvcmQucG9zLng7XHJcbiAgICAgICAgICAgIHkgPSB3b3JkLnBvcy55O1xyXG4gICAgICAgICAgICB0aGlzLm1hcFt4XVt5XS5mb3JFYWNoKGxldHRlciA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaWRzID0gd29yZHMuZmlsdGVyKHc9PntyZXR1cm4gdy5wb3MueCA9PSB4ICYmIHcucG9zLnkgPT0geX0pLm1hcCh3ID0+IHcuaWQpO1xyXG4gICAgICAgICAgICAgICAgbGV0dGVyLmRhdGEuaW5zdGFuY2Uuc2V0UHJlZml4KGlkcy5qb2luKCdcXFxcJykpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29udC5kYXRhID0ge2luc3RhbmNlOiB0aGlzfTtcclxuICAgICAgICB0aGlzLmdyYXBoID0gY29udDtcclxuICAgICAgICByZXR1cm4gY29udDtcclxuICAgIH1cclxufSIsImltcG9ydCB7IEFwcCB9IGZyb20gXCIuLi9hcHBcIjtcclxuaW1wb3J0IHsgSW1nQnRuIH0gZnJvbSBcIi4uL2d1aS9pbWdCdG5cIjtcclxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuXHJcbmV4cG9ydCBjbGFzcyBHYW1lRmFxIHtcclxuICAgIGNvbnN0cnVjdG9yKHdvcmQpIHtcclxuICAgICAgICBsZXQgZ3JhcGhpY3MgPSBBcHAucGhhc2VyLmFkZC5ncmFwaGljcygwLCAwKTtcclxuICAgICAgICBncmFwaGljcy5iZWdpbkZpbGwoMHgwMDAwMDAsIDAuMik7XHJcbiAgICAgICAgZ3JhcGhpY3MuZHJhd1JlY3QoMCwgMCwgQXBwLnBoYXNlci53b3JsZC53aWR0aCwgQXBwLnBoYXNlci53b3JsZC5oZWlnaHQpO1xyXG4gICAgICAgIGdyYXBoaWNzLmVuZEZpbGwoKTtcclxuXHJcbiAgICAgICAgbGV0IGdyb3VwID0gQXBwLnBoYXNlci5hZGQuZ3JvdXAoKTtcclxuICAgICAgICBncm91cC5pbnB1dEVuYWJsZUNoaWxkcmVuID0gdHJ1ZTtcclxuICAgICAgICBncm91cC5hZGQoZ3JhcGhpY3MpO1xyXG5cclxuICAgICAgICBsZXQgYmcgPSBncm91cC5jcmVhdGUoMCwwLCAndHV0X2JnJyk7XHJcbiAgICAgICAgYmcueCA9IChBcHAucGhhc2VyLndvcmxkLndpZHRoID4+IDEpIC0gKGJnLndpZHRoID4+IDEpO1xyXG4gICAgICAgIGJnLnkgPSAoQXBwLnBoYXNlci53b3JsZC5oZWlnaHQgPj4gMSkgLSAoYmcuaGVpZ2h0ID4+IDEpO1xyXG5cclxuICAgICAgICBsZXQgcHJldiA9IG5ldyBJbWdCdG4oJ2J0bl9saXN0X2NhdGVnb3J5X25vcm1hbCcsICdidG5fbGlzdF9jYXRlZ29yeV9vdmVyJyk7XHJcbiAgICAgICAgbGV0IG5leHQgPSBuZXcgSW1nQnRuKCdidG5fbGlzdF9jYXRlZ29yeV9ub3JtYWwnLCAnYnRuX2xpc3RfY2F0ZWdvcnlfb3ZlcicpO1xyXG4gICAgICAgIG5leHQuZ3JhcGguc2NhbGUueCA9IC0xO1xyXG5cclxuICAgICAgICBsZXQgY2xvc2VCdG4gPSBuZXcgSW1nQnRuKCdidG5fZXhpdF9nYW1lX25vcm1hbCcsICdidG5fZXhpdF9nYW1lX292ZXInLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9uQ2xvc2UpXHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ2xvc2UoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcHJldi5ncmFwaC52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgbmV4dC5ncmFwaC52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgY2xvc2VCdG4uZ3JhcGgudmlzaWJsZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICBncm91cC5hZGQocHJldi5ncmFwaCk7XHJcbiAgICAgICAgZ3JvdXAuYWRkKG5leHQuZ3JhcGgpO1xyXG4gICAgICAgIGdyb3VwLmFkZChjbG9zZUJ0bi5ncmFwaCk7XHJcblxyXG4gICAgICAgIGxldCByZW5kZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50ID0gMDtcclxuICAgICAgICAgICAgbGV0IGltZyA9IGdyb3VwLmNyZWF0ZSgwLCAwLCBpbWdzW2N1cnJlbnRdKTtcclxuXHJcbiAgICAgICAgICAgIGltZy54ID0gKEFwcC5waGFzZXIud29ybGQud2lkdGggPj4gMSkgLSAoaW1nLndpZHRoID4+IDEpO1xyXG4gICAgICAgICAgICBpbWcueSA9IChBcHAucGhhc2VyLndvcmxkLmhlaWdodCA+PiAxKSAtIChpbWcuaGVpZ2h0ID4+IDEpO1xyXG5cclxuICAgICAgICAgICAgaWYoaW1ncy5sZW5ndGg+MSl7XHJcbiAgICAgICAgICAgICAgICBwcmV2LmdyYXBoLnggPSBpbWcueCAtIHByZXYuZ3JhcGgud2lkdGggLSA0O1xyXG4gICAgICAgICAgICAgICAgcHJldi5ncmFwaC55ID0gaW1nLnkgKyAoaW1nLmhlaWdodCA+PiAxKSAtIChwcmV2LmdyYXBoLmhlaWdodCA+PiAxKTtcclxuICAgICAgICAgICAgICAgIHByZXYuY2FsbGJhY2sgPSAoKT0+e1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGN1cnJlbnQgLSAxID49IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5sb2FkVGV4dHVyZShpbWdzWy0tY3VycmVudF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIG5leHQuZ3JhcGgueCA9IGltZy54ICsgaW1nLndpZHRoICsgcHJldi5ncmFwaC53aWR0aCArIDQ7XHJcbiAgICAgICAgICAgICAgICBuZXh0LmdyYXBoLnkgPSBpbWcueSArIChpbWcuaGVpZ2h0ID4+IDEpIC0gKHByZXYuZ3JhcGguaGVpZ2h0ID4+IDEpO1xyXG4gICAgICAgICAgICAgICAgbmV4dC5jYWxsYmFjayA9ICgpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoY3VycmVudCArIDEgPCBpbWdzLmxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nLmxvYWRUZXh0dXJlKGltZ3NbKytjdXJyZW50XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcHJldi5ncmFwaC52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIG5leHQuZ3JhcGgudmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNsb3NlQnRuLmdyYXBoLnggPSBpbWcueCArIChpbWcud2lkdGggPj4gMSkgLSAoY2xvc2VCdG4uZ3JhcGgud2lkdGggPj4gMSk7XHJcbiAgICAgICAgICAgIGNsb3NlQnRuLmdyYXBoLnkgPSBpbWcueSArIGltZy5oZWlnaHQgKyA0OyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjbG9zZUJ0bi5ncmFwaC52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBpbWdzID0gW107XHJcbiAgICAgICAgdmFyIGpzb24gPSBBcHAucGhhc2VyLmNhY2hlLmdldEpTT04oJ3R1dG9yaWFsJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKEFwcC5waGFzZXIuY2FjaGUuY2hlY2tJbWFnZUtleSgndHV0b3JpYWxfMCcpKSB7XHJcbiAgICAgICAgICAgIGpzb24uaW1ncy5mb3JFYWNoKChpbWcsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgIGltZ3MucHVzaChgdHV0b3JpYWxfJHtpfWApO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJlbmRlcigpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIEFwcC5waGFzZXIubG9hZC5vbkxvYWRDb21wbGV0ZS5hZGRPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlbmRlcigpO1xyXG4gICAgICAgICAgICB9LCB0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIGpzb24uaW1ncy5mb3JFYWNoKChpbWcsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgIEFwcC5waGFzZXIubG9hZC5pbWFnZShgdHV0b3JpYWxfJHtpfWAsICcuL2RhdGEvdHV0b3JpYWwvJyArIGltZyk7XHJcbiAgICAgICAgICAgICAgICBpbWdzLnB1c2goYHR1dG9yaWFsXyR7aX1gKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBBcHAucGhhc2VyLmxvYWQuc3RhcnQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZ3JhcGggPSBncm91cDtcclxuICAgIH1cclxufSIsImltcG9ydCB7QXBwfSBmcm9tICcuLy4uL2FwcCdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExldHRlcntcclxuXHRjb25zdHJ1Y3RvcihsYWJlbCA9ICcnLCBwcmVmaXg9JycpIHtcclxuXHRcdHRoaXMubGFiZWwgPSBsYWJlbDsgLy8gc3RyaW5nXHJcblx0XHR0aGlzLnByZWZpeCA9IHByZWZpeDtcclxuXHRcdHRoaXMuc3RhdGUgPSAnZGVmYXVsdCc7XHJcblx0XHRcclxuXHRcdHRoaXMuaWQgPSBudWxsO1xyXG5cdFx0dGhpcy5ncmFwaCA9IG51bGwgLy8gcG9pbnRlciB0byBwaGFzZXIuZ3JvdXBcclxuXHRcdHRoaXMuX3BhbGV0dGUgPSBudWxsO1xyXG5cdFx0dGhpcy5fbGFiZWwgPSBudWxsIC8vIHBvaW50ZXIgdG8gcGhhc2VyLnRleHRcclxuXHRcdHRoaXMuX3ByZWZpeCA9IG51bGw7XHJcblx0fVxyXG5cdFxyXG5cdHNldCB0ZXh0KHZhbCkge1xyXG5cdFx0aWYodGhpcy5zdGF0ZSA9PSAnYmxvY2snKVxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHRcdFxyXG5cdFx0dGhpcy5sYWJlbCA9IHZhbC50b1VwcGVyQ2FzZSgpO1xyXG5cdFx0dGhpcy5fbGFiZWwuc2V0VGV4dCh0aGlzLmxhYmVsKTtcclxuXHR9XHJcblx0XHJcblx0cmVuZGVyKCkge1x0XHRcclxuXHRcdGxldCBzdHlsZSA9IHsgZm9udDogXCIyNHB4IEFyaWFsXCIsIGZpbGw6IFwiIzAwMDAwMFwiLCBhbGlnbjogXCJjZW50ZXJcIiB9O1xyXG5cdFx0bGV0IGdyb3VwID0gQXBwLnBoYXNlci5hZGQuZ3JvdXAoKTtcclxuXHRcdC8vZ3JvdXAuaW5wdXRFbmFibGVDaGlsZHJlbiA9IHRydWU7XHJcblx0XHRsZXQgaW1nRGF0YSA9IEFwcC5hc3NldFNlcnZpY2UuZ2V0KCcxMtGFMTItbGV0dGVyX3dvcmRfbm9ybWFsJyk7XHJcblx0XHRsZXQgc3ByaXRlID0gZ3JvdXAuY3JlYXRlKDAsIDAsIGltZ0RhdGEuYXRsYXMsIGltZ0RhdGEua2V5KTtcclxuXHRcdHNwcml0ZS5pbnB1dEVuYWJsZWQgPSB0cnVlO1xyXG5cdFx0c3ByaXRlLmlucHV0LnVzZUhhbmRDdXJzb3IgPSB0cnVlO1xyXG5cdFx0XHJcblx0XHR0aGlzLl9sYWJlbCA9ICBBcHAucGhhc2VyLmFkZC50ZXh0KDYsIDMsIHRoaXMubGFiZWwsIHN0eWxlLCBncm91cCk7XHJcblx0XHRpZih0aGlzLnByZWZpeCAhPSAnJylcclxuXHRcdFx0dGhpcy5fcHJlZml4ID0gQXBwLnBoYXNlci5hZGQudGV4dCgxLCAxLCB0aGlzLnByZWZpeCwgeyBmb250OiBcIjEycHggQXJpYWxcIiwgZmlsbDogXCIjMDAwMDAwXCIsIGFsaWduOiBcImNlbnRlclwiIH0sIGdyb3VwKTtcclxuXHRcdFxyXG5cdFx0dGhpcy5ncmFwaCA9IGdyb3VwO1xyXG5cdFx0XHJcblx0XHRncm91cC5kYXRhID0ge2luc3RhbmNlOiB0aGlzfTtcclxuXHRcdHRoaXMuX2xhYmVsLmlucHV0RW5hYmxlZCA9IGZhbHNlO1xyXG5cdFx0XHJcblx0XHRyZXR1cm4gZ3JvdXA7IC8vNDhcclxuXHR9XHJcblxyXG5cdHNldFByZWZpeChwcmVmaXgpe1xyXG5cdFx0dGhpcy5wcmVmaXggPSBwcmVmaXg7XHJcblxyXG5cdFx0aWYoIXRoaXMuX3ByZWZpeClcclxuXHRcdFx0dGhpcy5fcHJlZml4ID0gQXBwLnBoYXNlci5hZGQudGV4dCgyLCAwLCB0aGlzLnByZWZpeCwgeyBmb250OiBcIjEycHggQXJpYWxcIiwgZmlsbDogXCIjMDAwMDAwXCIsIGFsaWduOiBcImNlbnRlclwiIH0sIHRoaXMuZ3JhcGgpO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHR0aGlzLl9wcmVmaXguc2V0VGV4dCh0aGlzLnByZWZpeCk7XHJcblx0fVxyXG5cclxuXHRoaWRlKCl7XHJcblx0XHR0aGlzLmdyYXBoLnZpc2libGUgPSBmYWxzZTtcclxuXHR9XHJcblxyXG5cdHNob3coKXtcclxuXHRcdHRoaXMuZ3JhcGgudmlzaWJsZSA9IHRydWU7XHJcblx0fVxyXG5cclxuXHRzZXRTdGF0ZShzdGF0ZSl7XHJcblx0XHRpZih0aGlzLnN0YXRlID09ICdibG9jaycpXHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0XHRsZXQga2V5O1xyXG5cdFx0bGV0IHNwcml0ZSA9IHRoaXMuZ3JhcGguY2hpbGRyZW5bMF07XHJcblxyXG5cdFx0c3dpdGNoKHN0YXRlKXtcclxuXHRcdFx0Y2FzZSAnZGVmYXVsdCc6IGtleT0nMTLRhTEyLWxldHRlcl93b3JkX25vcm1hbCc7IGJyZWFrO1xyXG5cdFx0XHRjYXNlICdvdmVyJzoga2V5PScxMtGFMTItbGV0dGVyX3dvcmRfc2VsZWN0ZWQnOyBicmVhaztcclxuXHRcdFx0Y2FzZSAnYmxvY2snOiBcclxuXHRcdFx0XHRrZXk9JzEy0YUxMi1sZXR0ZXJfd29yZF9jb21wbGV0ZWQnOyBcclxuXHRcdFx0XHQvL3Nwcml0ZS5pbnB1dEVuYWJsZWQgPSBmYWxzZTtcclxuXHRcdFx0XHQvL3Nwcml0ZS5pbnB1dC51c2VIYW5kQ3Vyc29yID0gZmFsc2U7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHR9XHJcblxyXG5cdFx0c3ByaXRlLmZyYW1lTmFtZSA9IEFwcC5hc3NldFNlcnZpY2UuZ2V0KGtleSkua2V5O1xyXG5cclxuXHRcdHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuXHR9XHJcbn0iLCJpbXBvcnQgeyBBcHAgfSBmcm9tICcuLy4uL2FwcCdcclxuaW1wb3J0IHsgSW1nQnRuIH0gZnJvbSAnLi4vZ3VpL2ltZ0J0bic7XHJcblxyXG5leHBvcnQgY2xhc3MgTGV0dGVyQ2FuZGlkYXRlIHtcclxuICAgIGNvbnN0cnVjdG9yKGxhYmVsID0gJycpIHtcclxuICAgICAgICB0aGlzLmxhYmVsID0gbGFiZWw7IC8vIHN0cmluZ1xyXG5cclxuICAgICAgICB0aGlzLmlkID0gbnVsbDtcclxuICAgICAgICB0aGlzLmdyYXBoID0gbnVsbCAvLyBwb2ludGVyIHRvIHBoYXNlci5ncm91cFxyXG4gICAgICAgIHRoaXMuX3BhbGV0dGUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX2xhYmVsID0gbnVsbCAvLyBwb2ludGVyIHRvIHBoYXNlci50ZXh0XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHRleHQodmFsKSB7XHJcbiAgICAgICAgdGhpcy5sYWJlbCA9IHZhbC50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgIHRoaXMuX2xhYmVsLnNldFRleHQodGhpcy5sYWJlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBzdHlsZSA9IHsgZm9udDogXCIyOHB4IEFyaWFsXCIsIGZpbGw6IFwiIzAwMDAwMFwiLCBhbGlnbjogXCJjZW50ZXJcIiB9O1xyXG4gICAgICAgIGxldCBncm91cCA9IEFwcC5waGFzZXIuYWRkLmdyb3VwKCk7XHJcblxyXG4gICAgICAgIGxldCBiZyA9IG5ldyBJbWdCdG4oJ2xldHRlcl9jYW5kaWRhdGVfbm9ybWFsJywgJ2xldHRlcl9jYW5kaWRhdGVfb3ZlcicpO1xyXG4gICAgICAgIGdyb3VwLmFkZChiZy5ncmFwaCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2xhYmVsID0gQXBwLnBoYXNlci5hZGQudGV4dCgxNCwgOCwgdGhpcy5sYWJlbCwgc3R5bGUsIGdyb3VwKTtcclxuICAgICAgICB0aGlzLmdyYXBoID0gZ3JvdXA7XHJcblxyXG4gICAgICAgIGdyb3VwLmRhdGEgPSB7IGluc3RhbmNlOiB0aGlzIH07XHJcbiAgICAgICAgdGhpcy5fbGFiZWwuaW5wdXRFbmFibGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHJldHVybiBncm91cDtcclxuICAgIH1cclxuXHJcbiAgICBoaWRlKCkge1xyXG4gICAgICAgIHRoaXMuZ3JhcGgudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHNob3coKSB7XHJcbiAgICAgICAgdGhpcy5ncmFwaC52aXNpYmxlID0gdHJ1ZTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IExldHRlckNhbmRpZGF0ZSB9IGZyb20gJy4vbGV0dGVyQ2FuZGlkYXRlJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExldHRlclBhbGV0dGUge1xyXG4gICAgY29uc3RydWN0b3IoY29sdW1uTnVtLCByb3dOdW0pIHtcclxuICAgICAgICB0aGlzLmNvbHVtbk51bSA9IGNvbHVtbk51bTtcclxuICAgICAgICB0aGlzLnJvd051bSA9IHJvd051bTtcclxuXHJcbiAgICAgICAgdGhpcy5ncmFwaCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKHBoYXNlcikge1xyXG4gICAgICAgIGxldCBjb250ID0gcGhhc2VyLmFkZC5ncm91cCgpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93TnVtOyBpKyspXHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5OdW07IGorKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGxldHRlciA9IG5ldyBMZXR0ZXJDYW5kaWRhdGUoU3RyaW5nLmZyb21DaGFyQ29kZShNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzMikgKyAxMDcyKSkucmVuZGVyKCk7XHJcbiAgICAgICAgICAgICAgICBsZXR0ZXIueCA9IGogKiAobGV0dGVyLndpZHRoICsgNSk7XHJcbiAgICAgICAgICAgICAgICBsZXR0ZXIueSA9IGkgKiAobGV0dGVyLmhlaWdodCArIDQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnQuYWRkKGxldHRlcik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgY29udC5kYXRhID0geyBpbnN0YW5jZTogdGhpcyB9O1xyXG4gICAgICAgIHRoaXMuZ3JhcGggPSBjb250O1xyXG4gICAgICAgIHJldHVybiBjb250O1xyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlKHdvcmQpIHtcclxuICAgICAgICBsZXQgd0xlbmd0aCA9IHdvcmQubGVuZ3RoO1xyXG4gICAgICAgIGxldCB3ID0gd29yZC5zcGxpdCgnJyk7XHJcbiAgICAgICAgbGV0IGxldHRlcnMgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmdyYXBoLmNoaWxkcmVuLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICBsZXR0ZXJzLnB1c2goaSA8IHdMZW5ndGhcclxuICAgICAgICAgICAgICAgID8gdy5zcGxpY2UoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdy5sZW5ndGgpLCAxKVswXVxyXG4gICAgICAgICAgICAgICAgOiBTdHJpbmcuZnJvbUNoYXJDb2RlKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDMyKSArIDEwNzIpXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuZ3JhcGguY2hpbGRyZW4uZm9yRWFjaCgobGV0dGVyLCBpKSA9PiB7XHJcbiAgICAgICAgICAgIGxldHRlci5kYXRhLmluc3RhbmNlLnRleHQgPSBsZXR0ZXJzLnNwbGljZShNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBsZXR0ZXJzLmxlbmd0aCksIDEpWzBdOyAvL3NodWZmbGVcclxuICAgICAgICAgICAgbGV0dGVyLmRhdGEuaW5zdGFuY2Uuc2hvdygpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQge0FwcH0gZnJvbSAnLi8uLy4uL2FwcCc7XHJcbmltcG9ydCBGYWRlT3VuSW4gZnJvbSAnLi8uLi9lZmZlY3RzL2ZhZGVPdXRJbic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXb3Jke1xyXG4gICAgY29uc3RydWN0b3IodGV4dCwgZGlyZWN0aW9uID0gMCl7XHJcbiAgICAgICAgdGhpcy5pZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5ncmFwaCA9IG51bGw7XHJcblxyXG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQ7IC8vIGFjdHVhbCB3b3JkXHJcbiAgICAgICAgdGhpcy50ZXh0QXJyID0gW107IC8vIGd1ZXNzIHdvcmRcclxuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjsgLy8gMCAtIHZlcnRpY2FsLCAxIC0gaG9yaXpvbnRhbFxyXG5cclxuICAgICAgICB0aGlzLmx3ID0gMzQ7IC8vIGxldHRlciB3aWR0aFxyXG4gICAgICAgIHRoaXMubGggPSAzNDsgLy8gbGV0dGVyIGhlaWdodFxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpe1xyXG4gICAgICAgIGxldCBjb250ID0gQXBwLnBoYXNlci5hZGQuZ3JvdXAoKTsgICAgICBcclxuICAgICAgICBsZXQgbGVuZ3RoID0gdGhpcy50ZXh0Lmxlbmd0aCAtIDE7XHJcblxyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLnRleHQubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICBsZXQgbGV0dGVyID0gQXBwLmZhY3RvcnkubGV0dGVyKCh0aGlzLmRpcmVjdGlvbj09MCA/IDAgOiBpKSAqIHRoaXMubHcsICh0aGlzLmRpcmVjdGlvbiA9PSAxID8gMCA6IGkpICogdGhpcy5saCk7Ly90aGlzLnRleHRbaV1cclxuICAgICAgICAgICAgbGV0dGVyLmlkID0gaTtcclxuICAgICAgICAgICAgY29udC5hZGQobGV0dGVyLmdyYXBoKTtcclxuICAgICAgICAgICAgdGhpcy50ZXh0QXJyLnB1c2goJycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29udC5kYXRhID0ge2luc3RhbmNlOiB0aGlzfTtcclxuICAgICAgICB0aGlzLmdyYXBoID0gY29udDtcclxuICAgICAgICByZXR1cm4gY29udDtcclxuICAgIH1cclxuXHJcbiAgICBmaWxsKGxldHRlciwgbGV0dGVyRnJvbVBhbGV0dGUpe1xyXG4gICAgICAgIGxldCBuZXh0TGV0dGVyID0gbnVsbDtcclxuICAgICAgICBsZXQgaW5kZXg7XHJcblxyXG4gICAgICAgIHRoaXMuZ3JhcGguY2hpbGRyZW4uc29tZSgobGV0dGVyLCBpKSA9PiB7XHJcbiAgICAgICAgICAgIGlmKGxldHRlci5kYXRhLmluc3RhbmNlLmxhYmVsLmxlbmd0aCA9PSAwKXtcclxuICAgICAgICAgICAgICAgIG5leHRMZXR0ZXIgPSBsZXR0ZXIuZGF0YS5pbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgIGluZGV4ID0gaTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG5leHRMZXR0ZXIgIT0gbnVsbDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYobmV4dExldHRlcil7XHJcbiAgICAgICAgICAgIG5leHRMZXR0ZXIudGV4dCA9IGxldHRlcjtcclxuICAgICAgICAgICAgbmV4dExldHRlci5fcGFsZXR0ZSA9IGxldHRlckZyb21QYWxldHRlO1xyXG4gICAgICAgICAgICB0aGlzLnRleHRBcnJbaW5kZXhdID0gbGV0dGVyO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG5leHRMZXR0ZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsbEF0KGluZGV4LCBsZXR0ZXIpe1xyXG4gICAgICAgIHRoaXMuZ3JhcGguY2hpbGRyZW5baW5kZXhdLmRhdGEuaW5zdGFuY2UudGV4dCA9IGxldHRlcjtcclxuICAgICAgICB0aGlzLnRleHRBcnJbaW5kZXhdID0gbGV0dGVyO1xyXG4gICAgfVxyXG5cclxuICAgIGZyZWUoKXtcclxuICAgICAgICB0aGlzLmdyYXBoLmNoaWxkcmVuLmZvckVhY2gobGV0dGVyID0+IHtcclxuICAgICAgICAgICAgbGV0IGxkID0gbGV0dGVyLmRhdGEuaW5zdGFuY2U7XHJcbiAgICAgICAgICAgIGxkLnNldFN0YXRlKCdkZWZhdWx0Jyk7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsbEF0KGxkLmlkLCAnJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNGaWxsZWQoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy50ZXh0QXJyLmpvaW4oJycpLmxlbmd0aCA9PSB0aGlzLnRleHQubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIGlzQ29ycmVjdCgpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRleHQgPT0gdGhpcy50ZXh0QXJyLmpvaW4oJycpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFN0YXRlKHN0YXRlKXtcclxuXHRcdHRoaXMuZ3JhcGguY2hpbGRyZW4uZm9yRWFjaChsZXR0ZXIgPT4ge1xyXG4gICAgICAgICAgICBsZXR0ZXIuZGF0YS5pbnN0YW5jZS5zZXRTdGF0ZShzdGF0ZSk7XHJcbiAgICAgICAgfSk7XHJcblx0fVxyXG59IiwiaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4uL2FwcFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJ0biB7XHJcbiAgICBjb25zdHJ1Y3Rvcih3aWR0aCA9IDk2LCBoZWlnaHQgPSA5NiwgbGFiZWwgPSAnJywgY2FsbGJhY2sgPSBudWxsKXtcclxuICAgICAgICBsZXQgYmQgPSBBcHAucGhhc2VyLmFkZC5iaXRtYXBEYXRhKHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgIGJkLmRyYXcoJ2d1aV9nYW1lX2J0bicsMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcblxyXG4gICAgICAgIGxldCBncm91cCA9IEFwcC5waGFzZXIuYWRkLmdyb3VwKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IHNwcml0ZSA9IGdyb3VwLmNyZWF0ZSgwLCAwLCBiZCk7XHJcbiAgICAgICAgc3ByaXRlLmlucHV0RW5hYmxlZCA9IHRydWU7XHJcblx0XHRzcHJpdGUuaW5wdXQudXNlSGFuZEN1cnNvciA9IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMubGFiZWwgPSBBcHAucGhhc2VyLmFkZC50ZXh0KDAsIDAsIGxhYmVsLCB7IGZvbnQ6IFwiMjRweCBBcmlhbFwiLCBmaWxsOiBcIiMwMDAwMDBcIiwgYWxpZ246IFwiY2VudGVyXCIsIHdvcmRXcmFwOiB0cnVlIH0sIGdyb3VwKTtcclxuICAgICAgICAvL3RoaXMubGFiZWwud2lkdGggPSB3aWR0aDtcclxuICAgICAgICB0aGlzLmxhYmVsLmxpbmVTcGFjaW5nID0gLTEwO1xyXG4gICAgICAgIHRoaXMubGFiZWwueCA9ICh3aWR0aD4+MSkgLSAodGhpcy5sYWJlbC53aWR0aD4+MSk7XHJcbiAgICAgICAgdGhpcy5sYWJlbC55ID0gKGhlaWdodD4+MSkgLSAodGhpcy5sYWJlbC5oZWlnaHQ+PjEpO1xyXG4gICAgICAgIFxyXG5cclxuICAgICAgICB0aGlzLmdyYXBoID0gZ3JvdXA7XHJcblxyXG4gICAgICAgIGdyb3VwLm9uQ2hpbGRJbnB1dERvd24uYWRkKCh0YXJnZXQpPT57XHJcbiAgICAgICAgICAgIGlmKGNhbGxiYWNrKVxyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IEFwcCB9IGZyb20gXCIuLi8uLi9hcHBcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBIb3Jpem9udGFsTGlzdENvbnRyb2xsZXJ7XHJcbiAgICBjb25zdHJ1Y3RvcihwYWdlU2l6ZSwgbGlzdEdyb3VwLCBidG5QcmV2LCBidG5OZXh0LCBwb3NpdGlvbiA9IDApe1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcclxuICAgICAgICB0aGlzLnBhZ2VTaXplID0gcGFnZVNpemU7XHJcbiAgICAgICAgdGhpcy5zaXplID0gMDtcclxuXHJcbiAgICAgICAgdGhpcy5saXN0R3JvdXAgPSBsaXN0R3JvdXA7XHJcbiAgICAgICAgdGhpcy5idG5QcmV2ID0gYnRuUHJldi5ncmFwaDtcclxuICAgICAgICB0aGlzLmJ0bk5leHQgPSBidG5OZXh0LmdyYXBoO1xyXG5cclxuICAgICAgICBidG5QcmV2LmNhbGxiYWNrID0gdGhpcy5wcmV2LmJpbmQodGhpcyk7XHJcbiAgICAgICAgYnRuTmV4dC5jYWxsYmFjayA9IHRoaXMubmV4dC5iaW5kKHRoaXMpO1xyXG5cclxuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZSgpe1xyXG4gICAgICAgIHRoaXMuc2l6ZSA9IHRoaXMubGlzdEdyb3VwLmNoaWxkcmVuLmxlbmd0aDtcclxuXHJcbiAgICAgICAgaWYodGhpcy5zaXplID4gdGhpcy5wYWdlU2l6ZSl7XHJcbiAgICAgICAgICAgIHRoaXMuYnRuTmV4dC54ID0gdGhpcy5saXN0R3JvdXAueCArIHRoaXMubGlzdEdyb3VwLm1hc2sud2lkdGggLSB0aGlzLmJ0bk5leHQud2lkdGggKyA0O1xyXG4gICAgICAgICAgICB0aGlzLmJ0blByZXYueCA9IHRoaXMubGlzdEdyb3VwLnggLSB0aGlzLmJ0blByZXYud2lkdGggLSAxMDtcclxuICAgICAgICAgICAgdGhpcy5idG5OZXh0LnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmJ0blByZXYudmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHRoaXMuYnRuTmV4dC52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuYnRuUHJldi52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5leHQoKXtcclxuICAgICAgICBpZih0aGlzLnBvc2l0aW9uICsgdGhpcy5wYWdlU2l6ZSA8IHRoaXMuc2l6ZSl7XHJcbiAgICAgICAgICAgICsrdGhpcy5wb3NpdGlvbjtcclxuXHJcbiAgICAgICAgICAgIEFwcC5waGFzZXIuYWRkLnR3ZWVuKHRoaXMubGlzdEdyb3VwKS50byggeyB4OiB0aGlzLmxpc3RHcm91cC5tYXNrLnggLSAodGhpcy5saXN0R3JvdXAubWFzay53aWR0aC90aGlzLnBhZ2VTaXplKSp0aGlzLnBvc2l0aW9uIH0sIDIwMCwgUGhhc2VyLkVhc2luZy5MaW5lYXIuTm9uZSwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByZXYoKXtcclxuICAgICAgICBpZih0aGlzLnBvc2l0aW9uID4gMCl7XHJcbiAgICAgICAgICAgIC0tdGhpcy5wb3NpdGlvbjtcclxuICAgICAgICAgICAgQXBwLnBoYXNlci5hZGQudHdlZW4odGhpcy5saXN0R3JvdXApLnRvKCB7IHg6IHRoaXMubGlzdEdyb3VwLm1hc2sueCAtICh0aGlzLmxpc3RHcm91cC5tYXNrLndpZHRoL3RoaXMucGFnZVNpemUpKnRoaXMucG9zaXRpb24gfSwgMjAwLCBQaGFzZXIuRWFzaW5nLkxpbmVhci5Ob25lLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi4vYXBwXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgSW1nQnRuIHtcclxuICAgIGNvbnN0cnVjdG9yKGZyYW1lTm9ybWFsID0gJycsIGZyYW1lT3ZlciA9ICcnLCBjYWxsYmFjayA9IG51bGwpe1xyXG4gICAgICAgIC8vbGV0IGdyb3VwID0gQXBwLnBoYXNlci5hZGQuZ3JvdXAoKTtcclxuICAgICAgICAvL2dyb3VwLmlucHV0RW5hYmxlQ2hpbGRyZW4gPSB0cnVlO1xyXG5cclxuICAgICAgICBsZXQgaW1nRGF0YSA9IEFwcC5hc3NldFNlcnZpY2UuZ2V0KGZyYW1lTm9ybWFsKTtcclxuICAgICAgICBsZXQgc3ByaXRlID0gQXBwLnBoYXNlci5hZGQuc3ByaXRlKDAsIDAsIGltZ0RhdGEuYXRsYXMsIGltZ0RhdGEua2V5KTtcclxuXHRcdHNwcml0ZS5pbnB1dEVuYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIHNwcml0ZS5pbnB1dC51c2VIYW5kQ3Vyc29yID0gdHJ1ZTtcclxuICAgICAgICBcclxuICAgICAgICBzcHJpdGUuZXZlbnRzLm9uSW5wdXRPdmVyLmFkZCgoKT0+e1xyXG4gICAgICAgICAgICBzcHJpdGUuZnJhbWVOYW1lID0gQXBwLmFzc2V0U2VydmljZS5nZXQoZnJhbWVPdmVyKS5rZXk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHNwcml0ZS5ldmVudHMub25JbnB1dE91dC5hZGQoKCk9PntcclxuICAgICAgICAgICAgc3ByaXRlLmZyYW1lTmFtZSA9IEFwcC5hc3NldFNlcnZpY2UuZ2V0KGZyYW1lTm9ybWFsKS5rZXk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHNwcml0ZS5ldmVudHMub25JbnB1dERvd24uYWRkKCgpPT57XHJcbiAgICAgICAgICAgIGlmKHRoaXMuY2FsbGJhY2spXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5kYXRhID0ge2luc3RhbmNlOiB0aGlzfTtcclxuICAgICAgICB0aGlzLmdyYXBoID0gc3ByaXRlO1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcclxuXHJcbiAgICAgICAgLy8gZ3JvdXAub25DaGlsZElucHV0RG93bi5hZGQoKHRhcmdldCk9PntcclxuICAgICAgICAvLyAgICAgaWYoY2FsbGJhY2spXHJcbiAgICAgICAgLy8gICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgIC8vIH0pO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4uL2FwcFwiO1xyXG5pbXBvcnQgeyBJbWdCdG4gfSBmcm9tIFwiLi9pbWdCdG5cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBXcm9uZ0Fuc3dlcntcclxuICAgIGNvbnN0cnVjdG9yKCl7ICAgICAgICBcclxuICAgICAgICB0aGlzLmdyYXBoID0gbmV3IEltZ0J0bignYnRuX3dvcmRfd3Jvbmdfbm9ybWFsJywnYnRuX3dvcmRfd3Jvbmdfb3ZlcicpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUmlnaHRBc3dlcntcclxuICAgIGNvbnN0cnVjdG9yKHdvcmQpe1xyXG4gICAgICAgIGxldCBncmFwaGljcyA9IEFwcC5waGFzZXIuYWRkLmdyYXBoaWNzKDAsIDApO1xyXG4gICAgICAgIGdyYXBoaWNzLmJlZ2luRmlsbCgweDAwMDAwMCwgMC4yKTtcclxuICAgICAgICBncmFwaGljcy5kcmF3UmVjdCgwLCAwLCBBcHAucGhhc2VyLndvcmxkLndpZHRoLCBBcHAucGhhc2VyLndvcmxkLmhlaWdodCk7XHJcbiAgICAgICAgZ3JhcGhpY3MuZW5kRmlsbCgpO1xyXG5cclxuICAgICAgICBncmFwaGljcy5iZWdpbkZpbGwoMHhGRkZGRkYsIDEpO1xyXG4gICAgICAgIGdyYXBoaWNzLmxpbmVTdHlsZSgyLCAweENEQ0RDRCwgMSk7XHJcbiAgICAgICAgZ3JhcGhpY3MuZHJhd1JlY3QoKEFwcC5waGFzZXIud29ybGQud2lkdGggPj4gMSkgLSAzMDAqMC41LCAoQXBwLnBoYXNlci53b3JsZC5oZWlnaHQgPj4gMSkgLSA0MDAqMC41LCAzMDAsIDQwMCk7XHJcbiAgICAgICAgZ3JhcGhpY3MuZW5kRmlsbCgpO1xyXG5cclxuICAgICAgICBsZXQgZ3JvdXAgPSBBcHAucGhhc2VyLmFkZC5ncm91cCgpO1xyXG4gICAgICAgIGdyb3VwLmlucHV0RW5hYmxlQ2hpbGRyZW4gPSB0cnVlO1xyXG5cclxuICAgICAgICBncm91cC5hZGQoZ3JhcGhpY3MpO1xyXG4gICAgICAgIGxldCB0aXRsZSA9IEFwcC5waGFzZXIuYWRkLnRleHQoMCwgMCwgJ9Ch0LvQvtCy0L4g0YDQsNC30LPQsNC00LDQvdC+IScsIHsgZm9udDogXCIyNHB4IEFyaWFsXCIsIGZpbGw6IFwiIzAwMDAwMFwiLCBhbGlnbjogXCJjZW50ZXJcIiB9LCBncm91cCk7XHJcbiAgICAgICAgbGV0IGFuc3dlciA9IEFwcC5waGFzZXIuYWRkLnRleHQoMCwgMCwgd29yZC50b1VwcGVyQ2FzZSgpLCB7IGZvbnQ6IFwiMjRweCBBcmlhbFwiLCBmaWxsOiBcIiMwMDAwMDBcIiwgYWxpZ246IFwiY2VudGVyXCIgfSwgZ3JvdXApO1xyXG4gICAgICAgIC8vdGhpcy5sYWJlbC53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRpdGxlLnggPSAoQXBwLnBoYXNlci53b3JsZC53aWR0aD4+MSkgLSAodGl0bGUud2lkdGg+PjEpO1xyXG4gICAgICAgIHRpdGxlLnkgPSAoQXBwLnBoYXNlci53b3JsZC5oZWlnaHQgPj4gMSkgLSA0MDAqMC41ICsgMzI7XHJcbiAgICAgICAgXHJcbiAgICAgICAgYW5zd2VyLnggPSAoQXBwLnBoYXNlci53b3JsZC53aWR0aD4+MSkgLSAoYW5zd2VyLndpZHRoPj4xKTtcclxuICAgICAgICBhbnN3ZXIueSA9IChBcHAucGhhc2VyLndvcmxkLmhlaWdodD4+MSkgLSAoYW5zd2VyLmhlaWdodD4+MSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5ncmFwaCA9IGdyb3VwO1xyXG4gICAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi4vYXBwXCI7XHJcbmltcG9ydCB7IEltZ0J0biB9IGZyb20gXCIuL2ltZ0J0blwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1vbmV5QnRue1xyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICB0aGlzLmdyYXBoID0gQXBwLnBoYXNlci5hZGQuZ3JvdXAoKTtcclxuXHJcbiAgICAgICAgbGV0IGltZ0RhdGEgPSBBcHAuYXNzZXRTZXJ2aWNlLmdldCgnaW1nX21vbmV5X2JhY2snKTtcclxuICAgICAgICB0aGlzLmdyYXBoLmNyZWF0ZSgwLDAsIGltZ0RhdGEuYXRsYXMsIGltZ0RhdGEua2V5KTtcclxuXHJcbiAgICAgICAgdGhpcy5sYWJlbCA9IEFwcC5waGFzZXIuYWRkLnRleHQoNTQsIDE0LCAnMTUwJywgeyBmb250OiBcIjI0cHggQXJpYWxcIiwgZmlsbDogXCIjMDAwMDAwXCIsIGFsaWduOiBcImNlbnRlclwifSwgdGhpcy5ncmFwaCk7XHJcbiAgICAgICAgdGhpcy5sYWJlbC54ID0gNTQgKyAzMCAtICh0aGlzLmxhYmVsLndpZHRoPj4xKTtcclxuXHJcbiAgICAgICAgbGV0IGFkZE1vbmV5ID0gbmV3IEltZ0J0bignYnRuX2FkZF9tb25leV9ub3JtYWwnLCdidG5fYWRkX21vbmV5X292ZXInKTtcclxuICAgICAgICB0aGlzLmdyYXBoLmFkZChhZGRNb25leS5ncmFwaCk7XHJcblxyXG4gICAgICAgIGFkZE1vbmV5LmdyYXBoLnggPSAxMzA7XHJcbiAgICAgICAgYWRkTW9uZXkuZ3JhcGgueSA9IDEwO1xyXG4gICAgfVxyXG5cclxuICAgIHNldE1vbmV5KHZhbHVlKXtcclxuICAgICAgICB0aGlzLmxhYmVsLnNldFRleHQodmFsdWUpO1xyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCB7QXBwfSBmcm9tICcuLy4uL2FwcCc7XHJcbmltcG9ydCB7IEltZ0J0biB9IGZyb20gJy4vaW1nQnRuJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTZWxlY3RMZXZlbEJ0bntcclxuICAgIGNvbnN0cnVjdG9yKGx2bERlc2NyaXB0aW9uKXtcclxuICAgICAgICB0aGlzLndpZHRoID0gMjAwO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gMjQwO1xyXG5cclxuICAgICAgICBsZXQgZ3JvdXAgPSBBcHAucGhhc2VyLmFkZC5ncm91cCgpO1xyXG4gICAgICAgIGdyb3VwLmlucHV0RW5hYmxlQ2hpbGRyZW4gPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyBsZXQgZ3JhcGhpY3MgPSBBcHAucGhhc2VyLmFkZC5ncmFwaGljcygwLCAwKTtcclxuICAgICAgICAvLyBncmFwaGljcy5iZWdpbkZpbGwoMHhGRkZGRkYsIDEpO1xyXG4gICAgICAgIC8vIGdyYXBoaWNzLmxpbmVTdHlsZSgyLCAweENEQ0RDRCwgMSk7XHJcbiAgICAgICAgLy8gZ3JhcGhpY3MuZHJhd1JlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgLy8gZ3JhcGhpY3MuZW5kRmlsbCgpO1xyXG4gICAgICAgIC8vIGdyb3VwLmFkZChncmFwaGljcyk7XHJcbiAgICAgICAgbGV0IGltZ0RhdGEgPSBBcHAuYXNzZXRTZXJ2aWNlLmdldCgnaW1nX2NhdGVnb3J5X2JhY2snKTtcclxuICAgICAgICBncm91cC5jcmVhdGUoMCwgMCwgaW1nRGF0YS5hdGxhcywgaW1nRGF0YS5rZXkpO1xyXG5cclxuICAgICAgICBsZXQgYnRuID0gbmV3IEltZ0J0bignYnRuX3BsYXlfbm9ybWFsJywgJ2J0bl9wbGF5X292ZXInKTtcclxuICAgICAgICBidG4uZ3JhcGgueCA9IDg7XHJcbiAgICAgICAgYnRuLmdyYXBoLnkgPSB0aGlzLmhlaWdodCAtIDYwOyAgICAgXHJcblxyXG4gICAgICAgIGdyb3VwLmFkZChidG4uZ3JhcGgpO1xyXG5cclxuICAgICAgICB0aGlzLmx2bE1pc3Npb25Db3VudCA9IEFwcC5waGFzZXIuYWRkLnRleHQoMCwgMTQwLCAnMCAvIDQwJywgeyBmb250OiBcIjI0cHggQXJpYWxcIiwgZmlsbDogXCIjMDAwMDAwXCIsIGFsaWduOiBcImNlbnRlclwiIH0sIGdyb3VwKTtcclxuICAgICAgICB0aGlzLmx2bE1pc3Npb25Db3VudC54ID0gKHRoaXMud2lkdGggPj4gMSkgLSAodGhpcy5sdmxNaXNzaW9uQ291bnQud2lkdGg+PjEpO1xyXG5cclxuICAgICAgICBncm91cC5kYXRhID0ge2luc3RhbmNlOiB0aGlzfTtcclxuICAgICAgICB0aGlzLmdyYXBoID0gZ3JvdXA7XHJcbiAgICAgICAgdGhpcy5zdGFnZUlkID0gbnVsbDtcclxuICAgICAgICB0aGlzLm1pc3Npb25JZCA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0UHJvZ3Jlc3MoY3VycmVudCwgYWxsKXtcclxuICAgICAgICB0aGlzLmx2bE1pc3Npb25Db3VudC5zZXRUZXh0KGAke2N1cnJlbnR9LyR7YWxsfWApO1xyXG4gICAgICAgIHRoaXMubHZsTWlzc2lvbkNvdW50LnggPSAodGhpcy53aWR0aCA+PiAxKSAtICh0aGlzLmx2bE1pc3Npb25Db3VudC53aWR0aD4+MSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi4vYXBwXCI7XHJcbmltcG9ydCB7IFNlbGVjdExldmVsQnRuIH0gZnJvbSBcIi4vc2VsZWN0TGV2ZWxCdG5cIjtcclxuaW1wb3J0IHsgSG9yaXpvbnRhbExpc3RDb250cm9sbGVyIH0gZnJvbSBcIi4vY29udHJvbGxlcnMvaG9yaXpvbnRhbExpc3RDb250cm9sbGVyXCI7XHJcbmltcG9ydCB7IEltZ0J0biB9IGZyb20gXCIuL2ltZ0J0blwiO1xyXG5cclxubGV0IG1hc2sgPSBudWxsO1xyXG5sZXQgY29udHJvbGxlciA9IG51bGw7XHJcblxyXG5leHBvcnQgY2xhc3MgU3RhZ2VzTGlzdHtcclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgdGhpcy5ncmFwaCA9IEFwcC5waGFzZXIuYWRkLmdyb3VwKCk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhZ2VzID0gQXBwLnBoYXNlci5hZGQuZ3JvdXAoKTtcclxuICAgICAgICBtYXNrID0gQXBwLnBoYXNlci5hZGQuZ3JhcGhpY3MoMCwgMCk7XHJcbiAgICAgICAgdGhpcy5zdGFnZXMubWFzayA9IG1hc2s7XHJcbiAgICAgICAgdGhpcy5ncmFwaC5hZGQodGhpcy5zdGFnZXMpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGguYWRkKG1hc2spO1xyXG5cclxuICAgICAgICBsZXQgcHJldiA9IG5ldyBJbWdCdG4oJ2J0bl9saXN0X2NhdGVnb3J5X25vcm1hbCcsJ2J0bl9saXN0X2NhdGVnb3J5X292ZXInKTtcclxuICAgICAgICBsZXQgbmV4dCA9IG5ldyBJbWdCdG4oJ2J0bl9saXN0X2NhdGVnb3J5X25vcm1hbCcsJ2J0bl9saXN0X2NhdGVnb3J5X292ZXInKTtcclxuICAgICAgICBuZXh0LmdyYXBoLnNjYWxlLnggPSAtMTtcclxuICAgICAgICBcclxuICAgICAgICBwcmV2LmdyYXBoLnkgPSA2MDtcclxuICAgICAgICBuZXh0LmdyYXBoLnkgPSA2MDtcclxuXHJcbiAgICAgICAgdGhpcy5ncmFwaC5hZGQocHJldi5ncmFwaCk7XHJcbiAgICAgICAgdGhpcy5ncmFwaC5hZGQobmV4dC5ncmFwaCk7XHJcblxyXG4gICAgICAgIG1hc2suaW5wdXRFbmFibGVkID0gZmFsc2U7XHJcbiAgICAgICAgY29udHJvbGxlciA9IG5ldyBIb3Jpem9udGFsTGlzdENvbnRyb2xsZXIoMywgdGhpcy5zdGFnZXMsIHByZXYsIG5leHQpO1xyXG4gICAgfVxyXG5cclxuXHRmaWxsKGRhdGEpIHtcclxuXHRcdGlmKCFkYXRhKVxyXG5cdFx0XHRyZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMuc3RhZ2VzLnJlbW92ZUFsbCgpO1xyXG4gICAgICAgIHRoaXMuc3RhZ2VzLnggPSAwO1xyXG4gICAgICAgIHRoaXMuc3RhZ2VzLnkgPSAwO1xyXG5cclxuICAgICAgICBsZXQgc2VsZWN0TGV2ZWw7XHJcblx0XHRkYXRhWydzdGFnZV9zdGF0J10uZm9yRWFjaCggKHN0YWdlLCBpKSA9PiB7XHJcblx0XHRcdHNlbGVjdExldmVsID0gbmV3IFNlbGVjdExldmVsQnRuKHN0YWdlLmRlc2NyaXB0aW9uKTtcclxuXHJcblx0XHRcdHNlbGVjdExldmVsLnN0YWdlSWQgPSBzdGFnZS5pZDtcclxuXHRcdFx0c2VsZWN0TGV2ZWwubWlzc2lvbklkID0gKGRhdGFbJ21pc3Npb25fc3RhdCddLmZpbmQobSA9PiBtLnN0YWdlX3N0YXRfaWQgPT0gc3RhZ2UuaWQpIHx8IHt9KS5pZDtcclxuXHRcdFx0c2VsZWN0TGV2ZWwuc2V0UHJvZ3Jlc3MoMCwgZGF0YVsnbWlzc2lvbl9zdGF0J10uZmlsdGVyKG0gPT4gbS5zdGFnZV9zdGF0X2lkID09IHN0YWdlLmlkKS5sZW5ndGgpO1xyXG5cclxuXHRcdFx0c2VsZWN0TGV2ZWwuZ3JhcGgueCA9IGkgKiAoc2VsZWN0TGV2ZWwud2lkdGggKyA4KTtcclxuXHRcdFx0c2VsZWN0TGV2ZWwuZ3JhcGgueSA9IDA7XHJcblx0XHRcdFxyXG5cdFx0XHR0aGlzLnN0YWdlcy5hZGQoc2VsZWN0TGV2ZWwuZ3JhcGgpO1xyXG5cclxuXHRcdFx0c2VsZWN0TGV2ZWwuZ3JhcGgub25DaGlsZElucHV0RG93bi5hZGQoKHRhcmdldCk9PntcclxuXHRcdFx0XHRBcHAuc3RvcmFnZS5zdGFnZUlkID0gdGFyZ2V0LnBhcmVudC5kYXRhLmluc3RhbmNlLnN0YWdlSWQ7XHJcblx0XHRcdFx0QXBwLnN0b3JhZ2UubWlzc2lvbklkID0gdGFyZ2V0LnBhcmVudC5kYXRhLmluc3RhbmNlLm1pc3Npb25JZDtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhBcHAuc3RvcmFnZS5zdGFnZUlkLCBBcHAuc3RvcmFnZS5taXNzaW9uSWQpO1xyXG5cdFx0XHRcdEFwcC5waGFzZXIuc3RhdGUuc3RhcnQoJ2dhbWUnKTt9XHJcblx0XHRcdCk7XHJcblx0XHR9KTtcclxuXHJcblx0XHRtYXNrLmJlZ2luRmlsbCgweGZmZmZmZik7XHJcbiAgICAgICAgbWFzay5kcmF3UmVjdCgwLCAwLCAzICogKHNlbGVjdExldmVsLndpZHRoICsgOCksIHNlbGVjdExldmVsLmhlaWdodCk7XHJcbiAgICAgICAgbWFzay54ID0gdGhpcy5zdGFnZXMueDtcclxuICAgICAgICBtYXNrLnkgPSB0aGlzLnN0YWdlcy55O1xyXG4gICAgICAgIGNvbnRyb2xsZXIudXBkYXRlKCk7XHJcblx0fVxyXG59IiwiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuaW1wb3J0IE1ENSBmcm9tICcuL01ENSc7XHJcblxyXG5mdW5jdGlvbiBjb21wbGV0ZUhhbmRsZXJfb2JmKHJlcywgY2FsbGJhY2ssIGVycm9yKSBcclxue1xyXG5cdFx0aWYgKHJlcy5lcnJvcilcclxuXHRcdHtcclxuXHRcdFx0Ly9yVHJhY2VyLnRyYWNlKCBcIkVSUk9SID0+IERhdGFMb2FkZXJcXFxcY29tcGxldGVIYW5kbGVyX29iZjogXCIgKyBkYXRhLnJlc3BvbnNlLmVycm9yX2NvZGUgKyBcIiA9PiBcIiArIGRhdGEucmVzcG9uc2UuZXJyb3JfbWVzc2FnZSwgclRyYWNlci5FUlJPUik7XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBpZiAoZGljdFtldmVudC50YXJnZXRdWzFdID09IG51bGwpXHJcblx0XHRcdC8vIHtcclxuXHRcdFx0Ly8gXHR2YXIgbXNnID0gKGRhdGEucmVzcG9uc2UuZXJyb3JfbWVzc2FnZSkudG9TdHJpbmcoKTtcclxuXHRcdFx0Ly8gXHQvL3JUcmFjZXIudHJhY2UoIG1zZywgclRyYWNlci5FUlJPUik7XHJcblx0XHRcdC8vIH0gXHJcblx0XHRcdC8vIGVsc2UgXHJcblx0XHRcdC8vIHtcclxuXHRcdFx0Ly8gXHRlcnJvcihkYXRhLnJlc3BvbnNlKTtcclxuXHRcdFx0Ly8gfTtcclxuXHRcdH0gXHJcblx0XHRlbHNlIFxyXG5cdFx0e1xyXG5cdFx0XHRjYWxsYmFjayhyZXMuZGF0YSk7XHJcblx0XHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGh0dHBTdGF0dXNIYW5kbGVyX29iZihldmVudCkgXHJcbntcclxuXHQvLyAgICByVHJhY2VyLnRyYWNlKFwiaHR0cFN0YXR1c0hhbmRsZXI6IFwiICsgZXZlbnQpO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gX2lvRXJyb3IoZXYpIFxyXG57XHJcblx0dHJ5XHJcblx0e1xyXG5cdFx0clRyYWNlci50cmFjZSggXCJFUlJPUiA9PiBEYXRhTG9hZGVyXFxcXF9pb0Vycm9yOiBcIiArIGV2LnRleHQsIHJUcmFjZXIuRVJST1IpO1xyXG5cdFx0XHJcblx0XHR2YXIgZXJyb3IgPSBkaWN0WyBldi50YXJnZXRdWzFdO1xyXG5cdFx0XHJcblx0XHRpZiggZXJyb3IgIT0gbnVsbClcclxuXHRcdGVycm9yKCBldik7XHJcblx0XHRcclxuXHRcdGRlbGV0ZSBkaWN0WyBldi50YXJnZXRdO1xyXG5cdH1cclxuXHRjYXRjaCAoIGVycilcclxuXHR7XHJcblx0XHRyVHJhY2VyLnRyYWNlKCBcIkVSUk9SID0+IERhdGFMb2FkZXJcXFxcX2lvRXJyb3I6IFwiICsgZXJyLm1lc3NhZ2UsIHJUcmFjZXIuRVJST1IpO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gX3NlY3VyZUVycm9yKGV2KSBcclxue1xyXG5cdHRyeVxyXG5cdHtcclxuXHRcdHJUcmFjZXIudHJhY2UoIFwiRVJST1IgPT4gRGF0YUxvYWRlclxcXFxfc2VjdXJlRXJyb3I6IFwiICsgZXYudGV4dCwgclRyYWNlci5FUlJPUik7XHJcblx0XHRcclxuXHRcdHZhciBlcnJvciA9IGRpY3RbIGV2LnRhcmdldF1bMV07XHJcblx0XHRcclxuXHRcdGlmKCBlcnJvciAhPSBudWxsKVxyXG5cdFx0ZXJyb3IoIGV2KTtcclxuXHRcdFxyXG5cdFx0ZGVsZXRlIGRpY3RbIGV2LnRhcmdldF07XHJcblx0fVxyXG5cdGNhdGNoICggZXJyKVxyXG5cdHtcclxuXHRcdHJUcmFjZXIudHJhY2UoIFwiRVJST1IgPT4gRGF0YUxvYWRlclxcXFxfc2VjdXJlRXJyb3I6IFwiICsgZXJyLm1lc3NhZ2UsIHJUcmFjZXIuRVJST1IpO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0RGF0YV9vYmYobWV0aG9kLCBkYXRhKVxyXG57XHJcblx0Ly9tPXx8fHVpZHx8MTAwMjAwNzEwfHx8c19rZXl8fC0xfHx8bXx8MHx8MHx8dXNlci5pbml0fHx8bXx8MHx8MXx8e31cclxuXHRyZXR1cm4ge206IGB8fHwke2RhdGEudWlkIHx8ICd1aWQnfXx8MTAwMjAwMzAwfHx8JHtkYXRhLnNfa2V5IHx8ICdzX2tleSd9fHwtMXx8fG18fDB8fDB8fCR7bWV0aG9kfXx8fG18fDB8fDF8fHt9YH1cclxuXHJcblx0Ly8gZGF0YS5tZXRob2QgXHQ9IG1ldGhvZDtcclxuXHQvLyBkYXRhLmZvcm1hdCBcdD0gRGF0YUxvYWRlci5SRVNQT05TRV9EQVRBX0ZPUk1BVDtcdFx0XHRcclxuXHQvLyBkYXRhLmFwaV9zZXJ2ZXIgPSBEYXRhTG9hZGVyLlNFUlZFUl9VUkw7IFxyXG5cdC8vIGRhdGEudiBcdFx0XHQ9IERhdGFMb2FkZXIuQVBJX1ZFUlNJT047XHJcblx0XHJcblx0Ly8gdmFyIHNpZ0FycmF5ID0gW11cdFx0XHRcclxuXHQvLyB2YXIgcmVzdWx0ID0gJyc7XHJcblx0XHJcblx0Ly8gZm9yICh2YXIgcGFyYW0gaW4gZGF0YSlcclxuXHQvLyB7XHJcblx0Ly8gXHR2YXIgdmFsdWUgPSBkYXRhW3BhcmFtXTtcclxuXHQvLyBcdGxldCB0eXBlID0gdHlwZW9mIHZhbHVlO1xyXG5cdC8vIFx0aWYgKCEodHlwZSA9ICdzdHJpbmcnKSAmJiAhKE51bWJlci5pc0ludGVnZXIodmFsdWUpKSlcclxuXHQvLyBcdHtcclxuXHQvLyBcdFx0ZGF0YVtwYXJhbV0gPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XHRcdFx0XHRcdFx0XHRcdFx0XHJcblx0Ly8gXHR9XHRcdFx0IFxyXG5cdC8vIH1cclxuXHQvLyBmb3IgKHZhciBwIGluIGRhdGEpXHJcblx0Ly8ge1xyXG5cdC8vIFx0c2lnQXJyYXkucHVzaChgJHtwfT0ke2RhdGFbcF19YCk7XHRcdFx0XHQgXHJcblx0Ly8gfVxyXG5cdC8vIHNpZ0FycmF5LnNvcnQoKTtcclxuXHRcclxuXHQvLyBzaWdBcnJheS5mb3JFYWNoKHMgPT4gcmVzdWx0Kz1zKTtcclxuXHRcclxuXHQvLyBkYXRhLnNpZyA9IE1ENS5lbmNyeXB0KCBEYXRhTG9hZGVyLmFwaV9pZCArIHJlc3VsdCArIERhdGFMb2FkZXIuc2VjcmV0X2tleSk7XHRcdFx0XHJcblx0Ly8gZGF0YS5hcGlfaWQgPSBEYXRhTG9hZGVyLmFwaV9pZDtcclxuXHQvLyBkYXRhLnRpbWVzdGFtcCA9IERhdGUubm93KCk7XHJcblx0Ly8gZGF0YS5yYW5kb20gPSBNYXRoLmFicyggTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTAwMCkgLSA1MDApO1x0XHJcblx0XHJcblx0Ly8gdmFyIHN0ciA9ICcnO1xyXG5cdC8vIGZvciAodmFyIHYgaW4gZGF0YSlcclxuXHQvLyB7XHJcblx0Ly8gXHRzdHIgKz0gYCR7dn09JHtkYXRhW3ZdfSZgO1x0XHRcdCBcclxuXHQvLyB9XHRcclxuXHRcclxuXHRyZXR1cm4gc3RyLnNsaWNlKDAsIHN0ci5sZW5ndGggLSAxKTtcclxufVx0XHJcblxyXG5leHBvcnQgY2xhc3MgRGF0YUxvYWRlciB7XHJcblx0c3RhdGljIGdldCBSRVNQT05TRV9EQVRBX0ZPUk1BVCgpeyByZXR1cm4gJ0pTT04nfTtcclxuXHQvL3N0YXRpYyBnZXQgUkVRVUVTVF9IVFRQX01PREUoKSB7cmV0dXJuICdQT1NUJ307XHJcblx0c3RhdGljIGdldCBBUElfVkVSU0lPTigpe3JldHVybiAnMS4wJ307XHJcblx0XHJcblx0c3RhdGljIGdldCBTRVJWRVJfQVBJX1VSTCgpIHtyZXR1cm4gXCJodHRwczovL21hZ2FuemEucnUvZnNuZXcvdmsvaHRkb2NzL2luZGV4LnBocFwifVxyXG5cdHN0YXRpYyBnZXQgU0VSVkVSX0xFVkVMU19VUkwoKSB7cmV0dXJuIFwibHZsXCJ9XHJcblx0c3RhdGljIGdldCBTRVJWRVJfSU1HU19VUkwoKSB7cmV0dXJuIFwiLi9pbWdcIn1cclxuXHRzdGF0aWMgZ2V0IGFwaV9pZCgpe3JldHVybiBcIjMyMjYwNzBcIn1cclxuXHRzdGF0aWMgZ2V0IHNlY3JldF9rZXkoKSB7cmV0dXJuIFwienluMVdFUWR6VjkyalRZcURldktcIn1cclxuXHJcblx0Ly9wdWJsaWMgY29uc3QgVktTZXJ2ZXI6U3RyaW5nIFx0PSAnaHR0cDovLzQ2LjQuOTUuMTgxL2ZvdG9jcm9zc3dvcmQvb2svYXBpLnBocCc7XHJcblx0Ly9wdWJsaWMgY29uc3QgVktTZWNyZXQ6U3RyaW5nIFx0PSAnRjZGMjREREQ4QjE2MDJDMjVDRDQ0NDU1JztcdC8vINCh0LXQutGA0LXRgtC90YvQuSDQutC70Y7RhyDQv9GA0LjQu9C+0LbQtdC90LjRj1xyXG5cdFxyXG5cdC8vcHVibGljIGNvbnN0IFZLUHVibGljOlN0cmluZyBcdD0gJ0NCQU5JUUZNQUJBQkFCQUJBJztcdFx0XHQvLyDQn9GD0LHQu9C40YfQvdGL0Lkg0LrQu9GO0Ycg0L/RgNC40LvQvtC20LXQvdC40Y9cclxuXHRjb25zdHJ1Y3Rvcigpe1xyXG5cclxuXHR9XHJcblx0XHJcblx0cmVxdWVzdF9vYmYobWV0aG9kLCBkYXRhID0gbnVsbCwgY2FsbGJhY2sgPSBudWxsLCBlcnJvciA9IG51bGwpXHJcblx0e1xyXG5cdFx0XHJcblx0XHQvLyBpZiAoRGF0YUxvYWRlci5SRVFVRVNUX0hUVFBfTU9ERSA9PSAnUE9TVCcpXHJcblx0XHQvLyB7XHJcblx0XHRcdFxyXG5cdFx0Ly8gXHRpbnN0YW5jZS5wb3N0KERhdGFMb2FkZXIuU0VSVkVSX1VSTCxcclxuXHRcdC8vIFx0XHRnZXREYXRhX29iZihtZXRob2QsIGRhdGEpXHJcblx0XHQvLyBcdClcclxuXHRcdC8vIFx0LnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcblx0XHQvLyBcdFx0Ly9jb25zb2xlLmxvZyhyZXNwb25zZSk7XHJcblx0XHQvLyBcdFx0Y29tcGxldGVIYW5kbGVyX29iZihyZXNwb25zZSwgY2FsbGJhY2ssIGVycm9yKTtcclxuXHRcdC8vIFx0fSlcclxuXHRcdC8vIFx0LmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xyXG5cdFx0Ly8gXHRcdGNvbnNvbGUubG9nKGVycm9yKTtcclxuXHRcdC8vIFx0XHQvL2xyLmFkZEV2ZW50TGlzdGVuZXIoSU9FcnJvckV2ZW50LklPX0VSUk9SLCBcdFx0XHRcdHRoaXMuX2lvRXJyb3IpO1xyXG5cdFx0Ly8gXHRcdC8vbHIuYWRkRXZlbnRMaXN0ZW5lcihTZWN1cml0eUVycm9yRXZlbnQuU0VDVVJJVFlfRVJST1IsIFx0dGhpcy5fc2VjdXJlRXJyb3IpO1xyXG5cdFx0Ly8gXHR9KTtcclxuXHRcdC8vIH0gXHJcblx0XHQvLyBlbHNlIFxyXG5cdFx0Ly8ge1xyXG5cdFx0Ly8gXHRheGlvcy5nZXQoRGF0YUxvYWRlci5TRVJWRVJfVVJMLCB7XHJcblx0XHQvLyBcdFx0Ly8gaGVhZGVyczoge1xyXG5cdFx0Ly8gXHRcdC8vIFx0J0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbic6ICcqJyxcclxuXHRcdC8vIFx0XHQvLyAgIH0sXHJcblx0XHQvLyBcdFx0cGFyYW1zOiBnZXREYXRhX29iZihtZXRob2QsIGRhdGEpXHJcblx0XHQvLyBcdH0pXHJcblx0XHQvLyBcdC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG5cdFx0Ly8gXHRcdC8vbHIuYWRkRXZlbnRMaXN0ZW5lcihFdmVudC5DT01QTEVURSwgY29tcGxldGVIYW5kbGVyX29iZik7IFxyXG5cdFx0Ly8gXHRcdC8vY29uc29sZS5sb2cocmVzcG9uc2UpO1xyXG5cdFx0Ly8gXHRcdGNvbXBsZXRlSGFuZGxlcl9vYmYocmVzcG9uc2UsIGNhbGxiYWNrLCBlcnJvcik7XHJcblx0XHQvLyBcdH0pXHJcblx0XHQvLyBcdC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuXHRcdC8vIFx0XHRjb25zb2xlLmxvZyhlcnJvcik7XHJcblx0XHQvLyBcdFx0Ly9sci5hZGRFdmVudExpc3RlbmVyKElPRXJyb3JFdmVudC5JT19FUlJPUiwgXHRcdFx0XHR0aGlzLl9pb0Vycm9yKTtcclxuXHRcdC8vIFx0XHQvL2xyLmFkZEV2ZW50TGlzdGVuZXIoU2VjdXJpdHlFcnJvckV2ZW50LlNFQ1VSSVRZX0VSUk9SLCBcdHRoaXMuX3NlY3VyZUVycm9yKTtcclxuXHRcdC8vIFx0fSk7XHJcblx0XHQvLyB9XHRcdFxyXG5cdFx0XHJcblx0XHQvL2xyLmFkZEV2ZW50TGlzdGVuZXIoSFRUUFN0YXR1c0V2ZW50LkhUVFBfU1RBVFVTLCBodHRwU3RhdHVzSGFuZGxlcl9vYmYpOyAvLyDQktC+0LfQstGA0LDRidCw0LXRgiDQutC+0LQg0YHQvtGB0YLQvtGP0L3QuNGPIEhUVFAg0LfQsNC/0YDQvtGB0LAgKNC90LUg0L7RiNC40LHQutCwIC0g0L/RgNC+0YHRgtC+INGB0L7RgdGC0L7Rj9C90LjQtSlcclxuXHRcdFxyXG5cdFx0XHJcblx0XHRcclxuXHRcdC8vclRyYWNlci50cmFjZShyZXF1ZXN0LmRhdGEpO1xyXG5cdFx0XHJcblx0XHQvL2xyLmxvYWQocmVxdWVzdCk7XHJcblxyXG5cdFx0cmV0dXJuIGF4aW9zLmdldChEYXRhTG9hZGVyLlNFUlZFUl9BUElfVVJMLCB7XHJcblx0XHRcdC8vIGhlYWRlcnM6IHtcclxuXHRcdFx0Ly8gXHQnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJzogJyonLFxyXG5cdFx0XHQvLyAgIH0sXHJcblx0XHRcdHBhcmFtczogZ2V0RGF0YV9vYmYobWV0aG9kLCBkYXRhKVxyXG5cdFx0fSk7XHJcblx0fVxyXG59XHJcbiIsIu+7v2V4cG9ydCBkZWZhdWx0IGNsYXNzIE1ENSB7XHJcbiAgICBzdGF0aWMgZW5jcnlwdChkYXRhKSBcclxuICAgIHtcclxuICAgICAgICB2YXIgeCA9IFtdO1xyXG4gICAgICAgIHZhciBrLCBBQSxcclxuICAgICAgICBCQixcdENDLFxyXG4gICAgICAgIERELCBhLCBcclxuICAgICAgICBiLCBjLGQ7XHJcbiAgICAgICAgdmFyIFMxMT03LCBTMTI9MTIsIFMxMz0xNywgUzE0PTIyO1xyXG4gICAgICAgIHZhciBTMjE9NSwgUzIyPTkgLCBTMjM9MTQsIFMyND0yMDtcclxuICAgICAgICB2YXIgUzMxPTQsIFMzMj0xMSwgUzMzPTE2LCBTMzQ9MjM7XHJcbiAgICAgICAgdmFyIFM0MT02LCBTNDI9MTAsIFM0Mz0xNSwgUzQ0PTIxO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGRhdGEgPSBNRDUuVXRmOEVuY29kZShkYXRhKTtcclxuICAgICAgICBcclxuICAgICAgICB4ID0gTUQ1LkNvbnZlcnRUb1dvcmRBcnJheShkYXRhKTtcclxuICAgICAgICBcclxuICAgICAgICBhID0gMHg2NzQ1MjMwMTsgYiA9IDB4RUZDREFCODk7IGMgPSAweDk4QkFEQ0ZFOyBkID0gMHgxMDMyNTQ3NjtcclxuICAgICAgICBcclxuICAgICAgICBmb3IgKGs9MDtrPHgubGVuZ3RoO2srPTE2KSB7XHJcbiAgICAgICAgICAgIEFBPWE7IEJCPWI7IENDPWM7IEREPWQ7XHJcbiAgICAgICAgICAgIGE9TUQ1LkZGKGEsYixjLGQseFtrKzBdLCBTMTEsMHhENzZBQTQ3OCk7XHJcbiAgICAgICAgICAgIGQ9TUQ1LkZGKGQsYSxiLGMseFtrKzFdLCBTMTIsMHhFOEM3Qjc1Nik7XHJcbiAgICAgICAgICAgIGM9TUQ1LkZGKGMsZCxhLGIseFtrKzJdLCBTMTMsMHgyNDIwNzBEQik7XHJcbiAgICAgICAgICAgIGI9TUQ1LkZGKGIsYyxkLGEseFtrKzNdLCBTMTQsMHhDMUJEQ0VFRSk7XHJcbiAgICAgICAgICAgIGE9TUQ1LkZGKGEsYixjLGQseFtrKzRdLCBTMTEsMHhGNTdDMEZBRik7XHJcbiAgICAgICAgICAgIGQ9TUQ1LkZGKGQsYSxiLGMseFtrKzVdLCBTMTIsMHg0Nzg3QzYyQSk7XHJcbiAgICAgICAgICAgIGM9TUQ1LkZGKGMsZCxhLGIseFtrKzZdLCBTMTMsMHhBODMwNDYxMyk7XHJcbiAgICAgICAgICAgIGI9TUQ1LkZGKGIsYyxkLGEseFtrKzddLCBTMTQsMHhGRDQ2OTUwMSk7XHJcbiAgICAgICAgICAgIGE9TUQ1LkZGKGEsYixjLGQseFtrKzhdLCBTMTEsMHg2OTgwOThEOCk7XHJcbiAgICAgICAgICAgIGQ9TUQ1LkZGKGQsYSxiLGMseFtrKzldLCBTMTIsMHg4QjQ0RjdBRik7XHJcbiAgICAgICAgICAgIGM9TUQ1LkZGKGMsZCxhLGIseFtrKzEwXSxTMTMsMHhGRkZGNUJCMSk7XHJcbiAgICAgICAgICAgIGI9TUQ1LkZGKGIsYyxkLGEseFtrKzExXSxTMTQsMHg4OTVDRDdCRSk7XHJcbiAgICAgICAgICAgIGE9TUQ1LkZGKGEsYixjLGQseFtrKzEyXSxTMTEsMHg2QjkwMTEyMik7XHJcbiAgICAgICAgICAgIGQ9TUQ1LkZGKGQsYSxiLGMseFtrKzEzXSxTMTIsMHhGRDk4NzE5Myk7XHJcbiAgICAgICAgICAgIGM9TUQ1LkZGKGMsZCxhLGIseFtrKzE0XSxTMTMsMHhBNjc5NDM4RSk7XHJcbiAgICAgICAgICAgIGI9TUQ1LkZGKGIsYyxkLGEseFtrKzE1XSxTMTQsMHg0OUI0MDgyMSk7XHJcbiAgICAgICAgICAgIGE9TUQ1LkdHKGEsYixjLGQseFtrKzFdLCBTMjEsMHhGNjFFMjU2Mik7XHJcbiAgICAgICAgICAgIGQ9TUQ1LkdHKGQsYSxiLGMseFtrKzZdLCBTMjIsMHhDMDQwQjM0MCk7XHJcbiAgICAgICAgICAgIGM9TUQ1LkdHKGMsZCxhLGIseFtrKzExXSxTMjMsMHgyNjVFNUE1MSk7XHJcbiAgICAgICAgICAgIGI9TUQ1LkdHKGIsYyxkLGEseFtrKzBdLCBTMjQsMHhFOUI2QzdBQSk7XHJcbiAgICAgICAgICAgIGE9TUQ1LkdHKGEsYixjLGQseFtrKzVdLCBTMjEsMHhENjJGMTA1RCk7XHJcbiAgICAgICAgICAgIGQ9TUQ1LkdHKGQsYSxiLGMseFtrKzEwXSxTMjIsMHgyNDQxNDUzKTtcclxuICAgICAgICAgICAgYz1NRDUuR0coYyxkLGEsYix4W2srMTVdLFMyMywweEQ4QTFFNjgxKTtcclxuICAgICAgICAgICAgYj1NRDUuR0coYixjLGQsYSx4W2srNF0sIFMyNCwweEU3RDNGQkM4KTtcclxuICAgICAgICAgICAgYT1NRDUuR0coYSxiLGMsZCx4W2srOV0sIFMyMSwweDIxRTFDREU2KTtcclxuICAgICAgICAgICAgZD1NRDUuR0coZCxhLGIsYyx4W2srMTRdLFMyMiwweEMzMzcwN0Q2KTtcclxuICAgICAgICAgICAgYz1NRDUuR0coYyxkLGEsYix4W2srM10sIFMyMywweEY0RDUwRDg3KTtcclxuICAgICAgICAgICAgYj1NRDUuR0coYixjLGQsYSx4W2srOF0sIFMyNCwweDQ1NUExNEVEKTtcclxuICAgICAgICAgICAgYT1NRDUuR0coYSxiLGMsZCx4W2srMTNdLFMyMSwweEE5RTNFOTA1KTtcclxuICAgICAgICAgICAgZD1NRDUuR0coZCxhLGIsYyx4W2srMl0sIFMyMiwweEZDRUZBM0Y4KTtcclxuICAgICAgICAgICAgYz1NRDUuR0coYyxkLGEsYix4W2srN10sIFMyMywweDY3NkYwMkQ5KTtcclxuICAgICAgICAgICAgYj1NRDUuR0coYixjLGQsYSx4W2srMTJdLFMyNCwweDhEMkE0QzhBKTtcclxuICAgICAgICAgICAgYT1NRDUuSEgoYSxiLGMsZCx4W2srNV0sIFMzMSwweEZGRkEzOTQyKTtcclxuICAgICAgICAgICAgZD1NRDUuSEgoZCxhLGIsYyx4W2srOF0sIFMzMiwweDg3NzFGNjgxKTtcclxuICAgICAgICAgICAgYz1NRDUuSEgoYyxkLGEsYix4W2srMTFdLFMzMywweDZEOUQ2MTIyKTtcclxuICAgICAgICAgICAgYj1NRDUuSEgoYixjLGQsYSx4W2srMTRdLFMzNCwweEZERTUzODBDKTtcclxuICAgICAgICAgICAgYT1NRDUuSEgoYSxiLGMsZCx4W2srMV0sIFMzMSwweEE0QkVFQTQ0KTtcclxuICAgICAgICAgICAgZD1NRDUuSEgoZCxhLGIsYyx4W2srNF0sIFMzMiwweDRCREVDRkE5KTtcclxuICAgICAgICAgICAgYz1NRDUuSEgoYyxkLGEsYix4W2srN10sIFMzMywweEY2QkI0QjYwKTtcclxuICAgICAgICAgICAgYj1NRDUuSEgoYixjLGQsYSx4W2srMTBdLFMzNCwweEJFQkZCQzcwKTtcclxuICAgICAgICAgICAgYT1NRDUuSEgoYSxiLGMsZCx4W2srMTNdLFMzMSwweDI4OUI3RUM2KTtcclxuICAgICAgICAgICAgZD1NRDUuSEgoZCxhLGIsYyx4W2srMF0sIFMzMiwweEVBQTEyN0ZBKTtcclxuICAgICAgICAgICAgYz1NRDUuSEgoYyxkLGEsYix4W2srM10sIFMzMywweEQ0RUYzMDg1KTtcclxuICAgICAgICAgICAgYj1NRDUuSEgoYixjLGQsYSx4W2srNl0sIFMzNCwweDQ4ODFEMDUpO1xyXG4gICAgICAgICAgICBhPU1ENS5ISChhLGIsYyxkLHhbays5XSwgUzMxLDB4RDlENEQwMzkpO1xyXG4gICAgICAgICAgICBkPU1ENS5ISChkLGEsYixjLHhbaysxMl0sUzMyLDB4RTZEQjk5RTUpO1xyXG4gICAgICAgICAgICBjPU1ENS5ISChjLGQsYSxiLHhbaysxNV0sUzMzLDB4MUZBMjdDRjgpO1xyXG4gICAgICAgICAgICBiPU1ENS5ISChiLGMsZCxhLHhbaysyXSwgUzM0LDB4QzRBQzU2NjUpO1xyXG4gICAgICAgICAgICBhPU1ENS5JSShhLGIsYyxkLHhbayswXSwgUzQxLDB4RjQyOTIyNDQpO1xyXG4gICAgICAgICAgICBkPU1ENS5JSShkLGEsYixjLHhbays3XSwgUzQyLDB4NDMyQUZGOTcpO1xyXG4gICAgICAgICAgICBjPU1ENS5JSShjLGQsYSxiLHhbaysxNF0sUzQzLDB4QUI5NDIzQTcpO1xyXG4gICAgICAgICAgICBiPU1ENS5JSShiLGMsZCxhLHhbays1XSwgUzQ0LDB4RkM5M0EwMzkpO1xyXG4gICAgICAgICAgICBhPU1ENS5JSShhLGIsYyxkLHhbaysxMl0sUzQxLDB4NjU1QjU5QzMpO1xyXG4gICAgICAgICAgICBkPU1ENS5JSShkLGEsYixjLHhbayszXSwgUzQyLDB4OEYwQ0NDOTIpO1xyXG4gICAgICAgICAgICBjPU1ENS5JSShjLGQsYSxiLHhbaysxMF0sUzQzLDB4RkZFRkY0N0QpO1xyXG4gICAgICAgICAgICBiPU1ENS5JSShiLGMsZCxhLHhbaysxXSwgUzQ0LDB4ODU4NDVERDEpO1xyXG4gICAgICAgICAgICBhPU1ENS5JSShhLGIsYyxkLHhbays4XSwgUzQxLDB4NkZBODdFNEYpO1xyXG4gICAgICAgICAgICBkPU1ENS5JSShkLGEsYixjLHhbaysxNV0sUzQyLDB4RkUyQ0U2RTApO1xyXG4gICAgICAgICAgICBjPU1ENS5JSShjLGQsYSxiLHhbays2XSwgUzQzLDB4QTMwMTQzMTQpO1xyXG4gICAgICAgICAgICBiPU1ENS5JSShiLGMsZCxhLHhbaysxM10sUzQ0LDB4NEUwODExQTEpO1xyXG4gICAgICAgICAgICBhPU1ENS5JSShhLGIsYyxkLHhbays0XSwgUzQxLDB4Rjc1MzdFODIpO1xyXG4gICAgICAgICAgICBkPU1ENS5JSShkLGEsYixjLHhbaysxMV0sUzQyLDB4QkQzQUYyMzUpO1xyXG4gICAgICAgICAgICBjPU1ENS5JSShjLGQsYSxiLHhbaysyXSwgUzQzLDB4MkFEN0QyQkIpO1xyXG4gICAgICAgICAgICBiPU1ENS5JSShiLGMsZCxhLHhbays5XSwgUzQ0LDB4RUI4NkQzOTEpO1xyXG4gICAgICAgICAgICBhPU1ENS5BZGRVbnNpZ25lZChhLEFBKTtcclxuICAgICAgICAgICAgYj1NRDUuQWRkVW5zaWduZWQoYixCQik7XHJcbiAgICAgICAgICAgIGM9TUQ1LkFkZFVuc2lnbmVkKGMsQ0MpO1xyXG4gICAgICAgICAgICBkPU1ENS5BZGRVbnNpZ25lZChkLEREKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIHRlbXAgPSBNRDUuV29yZFRvSGV4KGEpKyBNRDUuV29yZFRvSGV4KGIpKyBNRDUuV29yZFRvSGV4KGMpKyBNRDUuV29yZFRvSGV4KGQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiB0ZW1wLnRvTG93ZXJDYXNlKCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHN0YXRpYyBSb3RhdGVMZWZ0KGxWYWx1ZSwgaVNoaWZ0Qml0cykge1xyXG4gICAgICAgIHJldHVybiAobFZhbHVlPDxpU2hpZnRCaXRzKSB8IChsVmFsdWU+Pj4oMzItaVNoaWZ0Qml0cykpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBzdGF0aWMgQWRkVW5zaWduZWQobFgsbFkpIHtcclxuICAgICAgICB2YXIgbFg0LGxZNCxsWDgsbFk4LGxSZXN1bHQ7XHJcbiAgICAgICAgbFg4ID0gKGxYICYgMHg4MDAwMDAwMCk7XHJcbiAgICAgICAgbFk4ID0gKGxZICYgMHg4MDAwMDAwMCk7XHJcbiAgICAgICAgbFg0ID0gKGxYICYgMHg0MDAwMDAwMCk7XHJcbiAgICAgICAgbFk0ID0gKGxZICYgMHg0MDAwMDAwMCk7XHJcbiAgICAgICAgbFJlc3VsdCA9IChsWCAmIDB4M0ZGRkZGRkYpKyhsWSAmIDB4M0ZGRkZGRkYpO1xyXG4gICAgICAgIGlmIChsWDQgJiBsWTQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChsUmVzdWx0IF4gMHg4MDAwMDAwMCBeIGxYOCBeIGxZOCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsWDQgfCBsWTQpIHtcclxuICAgICAgICAgICAgaWYgKGxSZXN1bHQgJiAweDQwMDAwMDAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGxSZXN1bHQgXiAweEMwMDAwMDAwIF4gbFg4IF4gbFk4KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAobFJlc3VsdCBeIDB4NDAwMDAwMDAgXiBsWDggXiBsWTgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIChsUmVzdWx0IF4gbFg4IF4gbFk4KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHN0YXRpYyBGKHgsIHksIHopIHsgcmV0dXJuICh4ICYgeSkgfCAoKH54KSAmIHopOyB9XHJcbiAgICBzdGF0aWMgRyh4LCB5LCB6KSB7IHJldHVybiAoeCAmIHopIHwgKHkgJiAofnopKTsgfVxyXG4gICAgc3RhdGljIEgoeCwgeSwgeikgeyByZXR1cm4gKHggXiB5IF4geik7IH1cclxuICAgIHN0YXRpYyBJKHgsIHksIHopIHsgcmV0dXJuICh5IF4gKHggfCAofnopKSk7IH1cclxuICAgIFxyXG4gICAgc3RhdGljIEZGKGEsYixjLGQseCxzLGFjKSB7XHJcbiAgICAgICAgYSA9IE1ENS5BZGRVbnNpZ25lZChhLCBNRDUuQWRkVW5zaWduZWQoTUQ1LkFkZFVuc2lnbmVkKE1ENS5GKGIsIGMsIGQpLCB4KSwgYWMpKTtcclxuICAgICAgICByZXR1cm4gTUQ1LkFkZFVuc2lnbmVkKE1ENS5Sb3RhdGVMZWZ0KGEsIHMpLCBiKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgc3RhdGljIEdHKGEsYixjLGQseCxzLGFjKSB7XHJcbiAgICAgICAgYSA9IE1ENS5BZGRVbnNpZ25lZChhLCBNRDUuQWRkVW5zaWduZWQoTUQ1LkFkZFVuc2lnbmVkKE1ENS5HKGIsIGMsIGQpLCB4KSwgYWMpKTtcclxuICAgICAgICByZXR1cm4gTUQ1LkFkZFVuc2lnbmVkKE1ENS5Sb3RhdGVMZWZ0KGEsIHMpLCBiKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgc3RhdGljIEhIKGEsYixjLGQseCxzLGFjKSB7XHJcbiAgICAgICAgYSA9IE1ENS5BZGRVbnNpZ25lZChhLCBNRDUuQWRkVW5zaWduZWQoTUQ1LkFkZFVuc2lnbmVkKE1ENS5IKGIsIGMsIGQpLCB4KSwgYWMpKTtcclxuICAgICAgICByZXR1cm4gTUQ1LkFkZFVuc2lnbmVkKE1ENS5Sb3RhdGVMZWZ0KGEsIHMpLCBiKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgc3RhdGljIElJKGEsYixjLGQseCxzLGFjKSB7XHJcbiAgICAgICAgYSA9IE1ENS5BZGRVbnNpZ25lZChhLCBNRDUuQWRkVW5zaWduZWQoTUQ1LkFkZFVuc2lnbmVkKE1ENS5JKGIsIGMsIGQpLCB4KSwgYWMpKTtcclxuICAgICAgICByZXR1cm4gTUQ1LkFkZFVuc2lnbmVkKE1ENS5Sb3RhdGVMZWZ0KGEsIHMpLCBiKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgc3RhdGljIENvbnZlcnRUb1dvcmRBcnJheShzdHJpbmcpIHtcclxuICAgICAgICB2YXIgbFdvcmRDb3VudDtcclxuICAgICAgICB2YXIgbE1lc3NhZ2VMZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xyXG4gICAgICAgIHZhciBsTnVtYmVyT2ZXb3Jkc190ZW1wMT1sTWVzc2FnZUxlbmd0aCArIDg7XHJcbiAgICAgICAgdmFyIGxOdW1iZXJPZldvcmRzX3RlbXAyPShsTnVtYmVyT2ZXb3Jkc190ZW1wMS0obE51bWJlck9mV29yZHNfdGVtcDEgJSA2NCkpLzY0O1xyXG4gICAgICAgIHZhciBsTnVtYmVyT2ZXb3JkcyA9IChsTnVtYmVyT2ZXb3Jkc190ZW1wMisxKSoxNjtcclxuICAgICAgICB2YXIgbFdvcmRBcnJheSA9IFtdOy8vbmV3IEFycmF5KGxOdW1iZXJPZldvcmRzLTEpO1xyXG4gICAgICAgIHZhciBsQnl0ZVBvc2l0aW9uID0gMDtcclxuICAgICAgICB2YXIgbEJ5dGVDb3VudCA9IDA7XHJcbiAgICAgICAgd2hpbGUgKCBsQnl0ZUNvdW50IDwgbE1lc3NhZ2VMZW5ndGggKSB7XHJcbiAgICAgICAgICAgIGxXb3JkQ291bnQgPSAobEJ5dGVDb3VudC0obEJ5dGVDb3VudCAlIDQpKS80O1xyXG4gICAgICAgICAgICBsQnl0ZVBvc2l0aW9uID0gKGxCeXRlQ291bnQgJSA0KSo4O1xyXG4gICAgICAgICAgICBsV29yZEFycmF5W2xXb3JkQ291bnRdID0gKGxXb3JkQXJyYXlbbFdvcmRDb3VudF0gfCAoc3RyaW5nLmNoYXJDb2RlQXQobEJ5dGVDb3VudCk8PGxCeXRlUG9zaXRpb24pKTtcclxuICAgICAgICAgICAgbEJ5dGVDb3VudCsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsV29yZENvdW50ID0gKGxCeXRlQ291bnQtKGxCeXRlQ291bnQgJSA0KSkvNDtcclxuICAgICAgICBsQnl0ZVBvc2l0aW9uID0gKGxCeXRlQ291bnQgJSA0KSo4O1xyXG4gICAgICAgIGxXb3JkQXJyYXlbbFdvcmRDb3VudF0gPSBsV29yZEFycmF5W2xXb3JkQ291bnRdIHwgKDB4ODA8PGxCeXRlUG9zaXRpb24pO1xyXG4gICAgICAgIGxXb3JkQXJyYXlbbE51bWJlck9mV29yZHMtMl0gPSBsTWVzc2FnZUxlbmd0aDw8MztcclxuICAgICAgICBsV29yZEFycmF5W2xOdW1iZXJPZldvcmRzLTFdID0gbE1lc3NhZ2VMZW5ndGg+Pj4yOTtcclxuICAgICAgICByZXR1cm4gbFdvcmRBcnJheTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgc3RhdGljIFdvcmRUb0hleChsVmFsdWUpIHtcclxuICAgICAgICB2YXIgV29yZFRvSGV4VmFsdWU9XCJcIixXb3JkVG9IZXhWYWx1ZV90ZW1wPVwiXCIsbEJ5dGUsbENvdW50O1xyXG4gICAgICAgIGZvciAobENvdW50ID0gMDtsQ291bnQ8PTM7bENvdW50KyspIHtcclxuICAgICAgICAgICAgbEJ5dGUgPSAobFZhbHVlPj4+KGxDb3VudCo4KSkgJiAyNTU7XHJcbiAgICAgICAgICAgIFdvcmRUb0hleFZhbHVlX3RlbXAgPSBcIjBcIiArIGxCeXRlLnRvU3RyaW5nKDE2KTtcclxuICAgICAgICAgICAgV29yZFRvSGV4VmFsdWUgPSBXb3JkVG9IZXhWYWx1ZSArIFdvcmRUb0hleFZhbHVlX3RlbXAuc3Vic3RyKFdvcmRUb0hleFZhbHVlX3RlbXAubGVuZ3RoLTIsMik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBXb3JkVG9IZXhWYWx1ZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgc3RhdGljIFV0ZjhFbmNvZGUoc3RyaW5nKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIHV0ZnRleHQgPSBcIlwiO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgc3RyaW5nLmxlbmd0aDsgbisrKSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgYyA9IHN0cmluZy5jaGFyQ29kZUF0KG4pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGMgPCAxMjgpIHtcclxuICAgICAgICAgICAgICAgIHV0ZnRleHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKChjID4gMTI3KSAmJiAoYyA8IDIwNDgpKSB7XHJcbiAgICAgICAgICAgICAgICB1dGZ0ZXh0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGMgPj4gNikgfCAxOTIpO1xyXG4gICAgICAgICAgICAgICAgdXRmdGV4dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChjICYgNjMpIHwgMTI4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHV0ZnRleHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoYyA+PiAxMikgfCAyMjQpO1xyXG4gICAgICAgICAgICAgICAgdXRmdGV4dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYyA+PiA2KSAmIDYzKSB8IDEyOCk7XHJcbiAgICAgICAgICAgICAgICB1dGZ0ZXh0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGMgJiA2MykgfCAxMjgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gdXRmdGV4dDtcclxuICAgIH1cclxufSIsImltcG9ydCB7IERhdGFMb2FkZXIgfSBmcm9tICcuL0RhdGFMb2FkZXInXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOZXQge1xyXG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vINCk0YPQvdC60YbQuNC4IC8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRjb25zdHJ1Y3RvcigpIHtcclxuXHRcdHRoaXMub0RhdGFMb2FkZXIgPSBuZXcgRGF0YUxvYWRlcigpO1xyXG5cdH1cclxuXHJcblx0aW5pdChvR2FtZURhdGEpIHtcclxuXHRcdHRoaXMub0RhdGFMb2FkZXIuU0VSVkVSX1VSTCA9IG9HYW1lRGF0YS5TRVJWRVJfVVJMO1xyXG5cdFx0dGhpcy5vRGF0YUxvYWRlci5hcGlfaWQgPSBTdHJpbmcob0dhbWVEYXRhLmFwaV9pZCk7XHJcblx0XHR0aGlzLm9EYXRhTG9hZGVyLnNlY3JldF9rZXkgPSBvR2FtZURhdGEuc2VjcmV0X2tleTtcclxuXHR9XHJcblxyXG5cdGdldEdlbmVyYWxEYXRhKGNhbGxiYWNrLCBlcnJvciA9IG51bGwpIHtcclxuXHRcdC8vaHR0cDovL3d3dy5zd2VldGJlYXIuaW5mby9iYXNlL29kL2h0ZG9jcy9pbmRleC5waHA/bT18fHx1aWR8fDEwMDIwMDMwMHx8fHNfa2V5fHwtMXx8fG18fDB8fDB8fGdlbmVyYWwuZ2V0X2RhdGF8fHxtfHwwfHwxfHx7fVxyXG5cdFx0dGhpcy5vRGF0YUxvYWRlci5yZXF1ZXN0X29iZignZ2VuZXJhbC5nZXRfZGF0YScsIHt9KVxyXG5cdFx0XHQudGhlbihjYWxsYmFjaylcclxuXHRcdFx0LmNhdGNoKGVycm9yKTtcclxuXHR9XHJcblxyXG5cdGdldE9yQ3JlYXRlVXNlcihjYWxsYmFjaywgZXJyb3IgPSBudWxsKSB7XHJcblx0XHQvL2h0dHA6Ly93d3cuc3dlZXRiZWFyLmluZm8vYmFzZS9vZC9odGRvY3MvaW5kZXgucGhwP209fHx8dWlkfHwxMDAyMDAzMDB8fHxzX2tleXx8LTF8fHxtfHwwfHwwfHxnZW5lcmFsLmdldF9kYXRhfHx8bXx8MHx8MXx8e31cclxuXHRcdHRoaXMub0RhdGFMb2FkZXIucmVxdWVzdF9vYmYoJ3VzZXIuaW5pdCcsIHt9KVxyXG5cdFx0XHQudGhlbihjYWxsYmFjaylcclxuXHRcdFx0LmNhdGNoKGVycm9yKTtcclxuXHR9XHJcblxyXG5cdGdldFVzZXJQcm9maWxlKGNhbGxiYWNrLCBlcnJvciA9IG51bGwpIHtcclxuXHRcdC8vaHR0cDovL3d3dy5zd2VldGJlYXIuaW5mby9iYXNlL29kL2h0ZG9jcy9pbmRleC5waHA/bT18fHx1aWR8fDEwMDIwMDMwMHx8fHNfa2V5fHwtMXx8fG18fDB8fDB8fGdlbmVyYWwuZ2V0X2RhdGF8fHxtfHwwfHwxfHx7fVxyXG5cdFx0dGhpcy5vRGF0YUxvYWRlci5yZXF1ZXN0X29iZigndXNlci5nZXRfcHJvZmlsZV9kYXRhJywge30pXHJcblx0XHRcdC50aGVuKGNhbGxiYWNrKVxyXG5cdFx0XHQuY2F0Y2goZXJyb3IpO1xyXG5cdH1cclxuXHJcblx0Zmlyc3RMb2FkKGNhbGxiYWNrLCBlcnJvciA9IG51bGwpe1xyXG5cdFx0bGV0IGRhdGEgPXt9O1xyXG5cclxuXHRcdHRoaXMub0RhdGFMb2FkZXIucmVxdWVzdF9vYmYoJ2dlbmVyYWwuZ2V0X2RhdGEnLCB7fSlcclxuXHRcdFx0LnRoZW4ocmVzcD0+e1xyXG5cdFx0XHRcdGRhdGEuZ2VuZXJhbCA9IHJlc3AuZGF0YTtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5vRGF0YUxvYWRlci5yZXF1ZXN0X29iZigndXNlci5pbml0Jywge3VpZDogMTA1NDE2NjZ9KTtcclxuXHRcdFx0fSlcclxuXHRcdFx0LnRoZW4ocmVzcCA9PiB7XHJcblx0XHRcdFx0ZGF0YS51c2VyID0gcmVzcC5kYXRhO1xyXG5cdFx0XHRcdGNhbGxiYWNrKGRhdGEpO1xyXG5cdFx0XHR9KVxyXG5cdFx0XHQuY2F0Y2goZXJyb3IpO1xyXG5cdH1cclxuXHJcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLyDQntCx0YnQuNC1INC80LXRgtC+0LTRiyAvLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcblx0LyoqXHJcblx0KiDQktC+0LfQstGA0LDRidCw0LXRgiDRgtC10LrRg9GJ0YPRjiDRgdGC0L7QuNC80L7RgdGC0YwgYm9vc3Qn0L7Qsi5cclxuXHQqIEBwYXJhbVx0Y2FsbGJhY2sg0YTRg9C90LrRhtC40Y8g0L7QsdGA0LDRgtC90L7Qs9C+INCy0YvQt9C+0LLQsFxyXG5cdCovXHJcblx0Z2V0Qm9vc3RDb3N0KGNhbGxiYWNrLCBlcnJvciA9IG51bGwpIHtcclxuXHRcdHRoaXMub0RhdGFMb2FkZXIucmVxdWVzdF9vYmYoJ2dldEJvb3N0c0Nvc3QnLCB7fSwgY2FsbGJhY2ssIGVycm9yKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCog0JLQvtC30LLRgNCw0YnQsNC10YIg0LjQvdGE0L7RgNC80LDRhtC40Y4g0L4g0YLQtdC60YPRidC10Lwg0YLRg9GA0L3QuNGA0LUuXHJcblx0KiBAcGFyYW1cdGNhbGxiYWNrINGE0YPQvdC60YbQuNGPINC+0LHRgNCw0YLQvdC+0LPQviDQstGL0LfQvtCy0LBcclxuXHQqL1xyXG5cdGdldEdhbWVQcm9wcyhjYWxsYmFjaywgZXJyb3IgPSBudWxsKSB7XHJcblx0XHR0aGlzLm9EYXRhTG9hZGVyLnJlcXVlc3Rfb2JmKCdnZXRHYW1lUHJvcHMnLCB7fSwgY2FsbGJhY2ssIGVycm9yKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCog0JLQvtC30LLRgNCw0YnQsNC10YIg0YHRgtCw0YLQuNGB0YLQuNC60YMg0L/QviDQuNCz0YDQtSDQt9CwINC/0L7RgdC70LXQtNC90LjQtSAxMDAwINC00L3QtdC5INC40YHQutC70Y7Rh9Cw0Y8g0YLQtdC60YPRidC40LkuXHJcblx0KiBAcGFyYW1cdGlUeXBlIC0g0KLQuNC/INCy0L7Qt9Cy0YDQsNGJ0LDQtdC80L7QuSDRgdGC0LDRgtC40YHRgtC40LrQuCAoMCAtINGC0L7QvyDQu9GD0YfRiNC40YUg0LjQs9GA0L7QutC+0LIsIDEgLSDRgtC+0L8g0L/QviDQs9C+0YDQvtC00LDQvCwgMiAtINGC0L7QvyDQv9C+INC/0L7Qu9GDINC40LPRgNC+0LrQvtCyLCAzIC0g0YLQvtC/INC/0L4g0LPQvtC00YMg0YDQvtC20LTQtdC90LjRjyDQuNCz0YDQvtC60L7QsikuXHJcblx0KiBAcGFyYW1cdGNhbGxiYWNrIC0g0YTRg9C90LrRhtC40Y8g0L7QsdGA0LDRgtC90L7Qs9C+INCy0YvQt9C+0LLQsFxyXG5cdCogQHBhcmFtXHRpU291cnNlIC0g0JjRgdGC0L7Rh9C90LjQuiDQtNCw0L3QvdGL0YUgKDAg4oCUINC80LDQutGB0LjQvNCw0LvRjNC90L4g0L3QsNCx0YDQsNC90L3QvtC1INC60L7Qu9C40YfQtdGB0YLQstC+INC+0YfQutC+0LIg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9C10Lwg0LfQsCDQstGB0Y4g0LjQs9GA0YMsIDEgLSDQvNCw0LrRgdC40LzQsNC70YzQvdC+INC90LDQsdGA0LDQvdC90L7QtSDQutC+0LvQuNGH0LXRgdGC0LLQviDQvtGH0LrQvtCyINCyINGC0YPRgNC90LjRgNC1INGB0YDQtdC00Lgg0LTRgNGD0LfQtdC5LCAyIC0g0LzQsNC60YHQuNC80LDQu9GM0L3QviDQvdCw0LHRgNCw0L3QvdC+0LUg0LrQvtC70LjRh9C10YHRgtCy0L4g0L7Rh9C60L7QsiDQsiDQv9GA0LXQtNGL0LTRg9GJ0LXQvCDRgtGD0YDQvdC40YDQtSDRgdGA0LXQtNC4INC00YDRg9C30LXQuSkuXHJcblx0KiBAcGFyYW1cdGlMaW1pdCAtINCa0L7Qu9C40YfQtdGB0YLQstC+INCy0L7Qt9Cy0YDQsNGJ0LDQtdC80YvRhSDRgdGC0YDQvtC6ICjQvNCw0LrRgdC40LzRg9C8IDEwMDAsINC/0L4g0YPQvNC+0LvRh9Cw0L3QuNGOIDEwMCkuXHJcblx0Ki9cclxuXHRnZXRHYW1lU3RhdGlzdGljKGlUeXBlLCBjYWxsYmFjaywgaVNvdXJzZSA9IDAsIGlMaW1pdCA9IDEwMCkge1xyXG5cdFx0dGhpcy5vRGF0YUxvYWRlci5yZXF1ZXN0X29iZignZ2V0R2FtZVN0YXRpc3RpYycsIHsgdHlwZTogaVR5cGUsIHNvdXJjZTogaVNvdXJzZSwgbGltaXQ6IGlMaW1pdCB9LCBjYWxsYmFjayk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQqINCS0L7Qt9Cy0YDQsNGJ0LDQtdGCINC90LDRgdGC0YDQvtC50LrQuCDQv9GA0LjQu9C+0LbQtdC90LjRj1xyXG5cdCogQHBhcmFtXHRjYWxsYmFjayDRhNGD0L3QutGG0LjRjyDQvtCx0YDQsNGC0L3QvtCz0L4g0LLRi9C30L7QstCwXHJcblx0Ki9cclxuXHRnZXRTZXR0aW5ncyhjYWxsYmFjaywgZXJyb3IpIHtcclxuXHRcdHRoaXMub0RhdGFMb2FkZXIucmVxdWVzdF9vYmYoJ2dldFNldHRpbmdzJywge30sIGNhbGxiYWNrLCBlcnJvcik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQqINCS0L7Qt9Cy0YDQsNGJ0LDQtdGCINGB0L/QuNGB0L7QuiDQv9C+0YHQu9C10LTQvdC40YUg0LfQsNCy0LXRgNGI0LXQvdC90YvRhSDRgtGD0YDQvdC40YDQvtCyINGBINC/0YDQuNC30L7QstGL0Lwg0YTQvtC90LTQvtC8LlxyXG5cdCogQHBhcmFtXHRjYWxsYmFjayAtINGE0YPQvdC60YbQuNGPINC+0LHRgNCw0YLQvdC+0LPQviDQstGL0LfQvtCy0LBcclxuXHQqIEBwYXJhbVx0aUFjY291bnQgLSDQmtC+0LvQuNGH0LXRgdGC0LLQviDQstC+0LfQstGA0LDRidCw0LXQvNGL0YUg0LfQsNCy0LXRgNGI0LXQvdC90YvRhSDRgtGD0YDQvdC40YDQvtCyICjQv9C+INGD0LzQvtC70YfQsNC90LjRjiAxKS5cclxuXHQqL1xyXG5cdGdldFRvdXJuYW1lbnRMb2coY2FsbGJhY2ssIGlBY2NvdW50ID0gMSkge1xyXG5cdFx0dGhpcy5vRGF0YUxvYWRlci5yZXF1ZXN0X29iZignZ2V0VG91cm5hbWVudExvZycsIHsgYWNjb3VudDogaUFjY291bnQgfSwgY2FsbGJhY2spO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0KiDQktC+0LfQstGA0LDRidCw0LXRgiDRgNC10LnRgtC40L3QsyDQv9C+0LvRjNC30L7QstCw0YLQtdC70LXQuSDQsiDRgtGD0YDQvdC40YDQtSDRgSDQv9GA0LjQt9C+0LLRi9C8INGE0L7QvdC00L7QvC5cclxuXHQqIEBwYXJhbVx0c1VpZCAtINCY0LTQtdC90YLQuNGE0LjQutCw0YLQvtGAINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjy5cclxuXHQqIEBwYXJhbVx0Y2FsbGJhY2sgLSDRhNGD0L3QutGG0LjRjyDQvtCx0YDQsNGC0L3QvtCz0L4g0LLRi9C30L7QstCwXHJcblx0Ki9cclxuXHRnZXRVc2VyUmF0aW5nKHNVaWQsIGNhbGxiYWNrKSB7XHJcblx0XHR0aGlzLm9EYXRhTG9hZGVyLnJlcXVlc3Rfb2JmKCdnZXRVc2VyUmF0aW5nJywgeyB1aWQ6IHNVaWQgfSwgY2FsbGJhY2spO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0KiDQktC+0LfQstGA0LDRidCw0LXRgiDRgdC/0LjRgdC+0Log0YLQvtCy0LDRgNC+0LIg0LLQvtC30LzQvtC20L3Ri9GFINC00LvRjyDQv9C+0LrRg9C/0LrQuCDRh9C10YDQtdC3INCy0LDQu9GO0YLRgyDRgdC+0YbQuNCw0LvRjNC90L7QuSDRgdC10YLQuC5cclxuXHQqIEBwYXJhbVx0Y2FsbGJhY2sgLSDRhNGD0L3QutGG0LjRjyDQvtCx0YDQsNGC0L3QvtCz0L4g0LLRi9C30L7QstCwXHJcblx0Ki9cclxuXHRnZXRFeHRlbmRlZEdvb2RzKGNhbGxiYWNrLCBlcnJvciA9IG51bGwpIHtcclxuXHRcdHRoaXMub0RhdGFMb2FkZXIucmVxdWVzdF9vYmYoJ2dldEV4dGVuZGVkR29vZHMnLCB7fSwgY2FsbGJhY2ssIGVycm9yKTtcclxuXHR9XHJcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vINCY0LPRgNC+0LogLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcblx0LyoqXHJcblx0KiDQn9C+0LrRg9C/0LDQtdGCINGD0LrQsNC30LDQvdC90L7QtSDQutC+0LvQuNGH0LXRgdGC0LLQviBib29zdCfQvtCyLlxyXG5cdCogQHBhcmFtXHRzVWlkIC0g0JjQtNC10L3RgtC40YTQuNC60LDRgtC+0YAg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPLlxyXG5cdCogQHBhcmFtXHRzTnVtcyAtINCf0LXRgNC10YfQuNGB0LvRj9C10YIg0YfQtdGA0LXQtyDQt9Cw0L/Rj9GC0YPRjiDQvdC+0LzQtdGA0LAgYm9vc3Qn0L7Qsi5cclxuXHQqIEBwYXJhbVx0c0FjY291bnRzIC0g0J/QtdGA0LXRh9C40YHQu9GP0LXRgiDRh9C10YDQtdC3INC30LDQv9GP0YLRg9GOINCyINGB0L7QvtGC0LLQtdGC0YHRgtCy0YPRjtGJ0LjRhSDQv9C+0LfQuNGG0LjRj9GFINC60L7Qu9C40YfQtdGB0YLQstC+INC/0L7QutGD0L/QsNC10LzRi9GFIGJvb3N0J9C+0LIgKNC/0L4g0YPQvNC+0LvRh9Cw0L3QuNGOIDEpLlxyXG5cdCogQHBhcmFtXHRjYWxsYmFjayAtINGE0YPQvdC60YbQuNGPINC+0LHRgNCw0YLQvdC+0LPQviDQstGL0LfQvtCy0LBcclxuXHQqL1xyXG5cdGJ1eUJvb3N0SXRlbXMoc1VpZCwgc051bXMsIHNBY2NvdW50cywgY2FsbGJhY2ssIGVycm9yKSB7XHJcblx0XHR0aGlzLm9EYXRhTG9hZGVyLnJlcXVlc3Rfb2JmKCdidXlCb29zdEl0ZW1zJywgeyB1aWQ6IHNVaWQsIG51bXM6IHNOdW1zLCBhY2NvdW50czogc0FjY291bnRzIH0sIGNhbGxiYWNrLCBlcnJvcik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQqINCf0L7QutGD0L/QsNC10YIg0LHQuNC70LXRgiDQtNC70Y8g0YPRh9Cw0YHRgtC40Y8g0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINCyINGC0YPRgNC90LjRgNC1INGBINC/0YDQuNC30L7QstGL0Lwg0YTQvtC90LTQvtC8LCDQtNCw0L3QvdGL0Lkg0LHQuNC70LXRgiDQtNC10LnRgdGC0LLRg9C10YIg0LTQviDQvtC60L7QvdGH0LDQvdC40Y8g0YLRg9GA0L3QuNGA0LAuXHJcblx0KiBAcGFyYW1cdHNVaWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8uXHJcblx0KiBAcGFyYW1cdGNhbGxiYWNrIC0g0YTRg9C90LrRhtC40Y8g0L7QsdGA0LDRgtC90L7Qs9C+INCy0YvQt9C+0LLQsFxyXG5cdCovXHJcblx0YnV5VG91cm5hbWVudFRpY2tldChzVWlkLCBjYWxsYmFjaykge1xyXG5cdFx0dGhpcy5vRGF0YUxvYWRlci5yZXF1ZXN0X29iZignYnV5VG91cm5hbWVudFRpY2tldCcsIHsgdWlkOiBzVWlkIH0sIGNhbGxiYWNrKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCog0JLQvtC30LLRgNCw0YnQsNC10YIg0YHQv9C40YHQvtC6INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvQtdC5LCDQutC+0YLQvtGA0YvQvCDQvdC10LLQvtC30LzQvtC20L3QviDRgdC00LXQu9Cw0YLRjCDQv9C+0LTQsNGA0LrQuCBib29zdCfQvtCyINC40LvQuCDRjdC90LXRgNCz0LjQuC5cclxuXHQqIEBwYXJhbVx0c1VpZCAtINCY0LTQtdC90YLQuNGE0LjQutCw0YLQvtGAINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjy5cclxuXHQqIEBwYXJhbVx0Y2FsbGJhY2sgLSDRhNGD0L3QutGG0LjRjyDQvtCx0YDQsNGC0L3QvtCz0L4g0LLRi9C30L7QstCwXHJcblx0Ki9cclxuXHRnZXRHaWZ0U3RhdHVzKHNVaWQsIGNhbGxiYWNrLCBlcnJvciA9IG51bGwpIHtcclxuXHRcdHRoaXMub0RhdGFMb2FkZXIucmVxdWVzdF9vYmYoJ2dldEdpZnRTdGF0dXMnLCB7IHVpZDogc1VpZCB9LCBjYWxsYmFjaywgZXJyb3IpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0KiDQktC+0LfQstGA0LDRidCw0LXRgiDRgdC/0LjRgdC+0LogYm9vc3Qn0L7RgiDQutC+0YLQvtGA0YvQtSDQtdGB0YLRjCDRgyDQuNCz0YDQvtC60LAuXHJcblx0KiBAcGFyYW1cdHNVaWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8uXHJcblx0KiBAcGFyYW1cdGNhbGxiYWNrIC0g0YTRg9C90LrRhtC40Y8g0L7QsdGA0LDRgtC90L7Qs9C+INCy0YvQt9C+0LLQsFxyXG5cdCovXHJcblx0Z2V0VXNlckJvb3N0cyhzVWlkLCBjYWxsYmFjaykge1xyXG5cdFx0dGhpcy5vRGF0YUxvYWRlci5yZXF1ZXN0X29iZignZ2V0VXNlckJvb3N0cycsIHsgdWlkOiBzVWlkIH0sIGNhbGxiYWNrKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCog0JLQvtC30LLRgNCw0YnQsNC10YIg0LTQsNC90L3Ri9C1INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRj1xyXG5cdCogQHBhcmFtXHRvR2FtZVVzZXJcdC0g0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GMXHJcblx0KiBAcGFyYW1cdGNhbGxiYWNrIC0g0YTRg9C90LrRhtC40Y8g0L7QsdGA0LDRgtC90L7Qs9C+INCy0YvQt9C+0LLQsFxyXG5cdCovXHJcblx0Z2V0VXNlclByb2ZpbGUob0dhbWVVc2VyLCBjYWxsYmFjaykge1xyXG5cdFx0dmFyIHNGaWRzID0gU3RyaW5nKG9HYW1lVXNlci51aWQpO1xyXG5cdFx0Zm9yICh2YXIgaUluZGV4ID0gMDsgaUluZGV4IDwgb0dhbWVVc2VyLmFBcHBGcmllbmRzLmxlbmd0aDsgaUluZGV4KyspIHtcclxuXHRcdFx0c0ZpZHMgKz0gJywnICsgU3RyaW5nKG9HYW1lVXNlci5hQXBwRnJpZW5kc1tpSW5kZXhdLnVpZCk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5vRGF0YUxvYWRlci5yZXF1ZXN0X29iZignZ2V0VXNlclByb2ZpbGUnLCB7IHVpZHM6IG9HYW1lVXNlci51aWQsIGZpZHM6IHNGaWRzLCBlbnRlcmluZzogeyBuYW1lOiBvR2FtZVVzZXIubmFtZSwgc3VybmFtZTogb0dhbWVVc2VyLnN1cm5hbWUsIGdlbmRlcjogb0dhbWVVc2VyLmdlbmRlciwgY2l0eTogb0dhbWVVc2VyLmNpdHksIGNvdW50cnk6IG9HYW1lVXNlci5jb3VudHJ5IH0gfSwgY2FsbGJhY2spO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0KiDQktC+0LfQstGA0LDRidCw0LXRgiDQtNCw0L3QvdGL0LUg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINC4INC10LPQviDQtNGA0YPQt9C10LlcclxuXHQqIEBwYXJhbVx0b0dhbWVVc2VyXHQtINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjFxyXG5cdCogQHBhcmFtXHRjYWxsYmFjayAtINGE0YPQvdC60YbQuNGPINC+0LHRgNCw0YLQvdC+0LPQviDQstGL0LfQvtCy0LBcclxuXHQqL1xyXG5cdGdldFVzZXJBbmRGcmllbmRQcm9maWxlKG9HYW1lVXNlciwgY2FsbGJhY2spIHtcclxuXHRcdHZhciBzRmlkcyA9IFN0cmluZyhvR2FtZVVzZXIudWlkKTtcclxuXHJcblx0XHRmb3IgKHZhciBpSW5kZXggPSAwOyBpSW5kZXggPCBvR2FtZVVzZXIuYUFwcEZyaWVuZHMubGVuZ3RoOyBpSW5kZXgrKykge1xyXG5cdFx0XHRzRmlkcyArPSAnLCcgKyBvR2FtZVVzZXIuYUFwcEZyaWVuZHNbaUluZGV4XS51aWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5vRGF0YUxvYWRlci5yZXF1ZXN0X29iZignZ2V0VXNlclByb2ZpbGUnLCB7IHVpZHM6IHNGaWRzLCBmaWRzOiBzRmlkcyB9LCBjYWxsYmFjayk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQqINCU0LDRgNC40YIg0Y3QvdC10YDQs9C40Y4g0LTRgNGD0LPQvtC80YMg0LjQs9GA0L7QutGDLCDQv9GA0Lgg0Y3RgtC+0Lwg0LTQsNGA0Y/RidC40Lkg0LjQs9GA0L7QuiDQvdC40LrQsNC60LjRhSDRgdGA0LXQtNGB0YLQsiDQvdCwINGN0YLQviDQvdC1INGC0YDQsNGC0LjRgi4g0JXQtNC40L3RgdGC0LLQtdC90L3QvtC1INC+0LPRgNCw0L3QuNGH0LXQvdC40LUg4oCUINC00LDRgNC40YLRjCDRjdC90LXRgNCz0LjRjiDQvNC+0LbQvdC+INC90LUg0YfQsNGJ0LUgMdCz0L4g0YDQsNC30LAg0LIgMTAg0LzQuNC90YPRgi5cclxuXHQqIEBwYXJhbVx0c0Zyb21VaWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0L7RgiDQutC+0LPQviDRgdC+0L7QsdGJ0LXQvdC40LUuXHJcblx0KiBAcGFyYW1cdHNUb1VpZCAtINCY0LTQtdC90YLQuNGE0LjQutCw0YLQvtGAINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQutC+0YLQvtGA0L7QvNGDINC/0YDQtdC00L3QsNC30L3QsNGH0LXQvdC+INGB0L7QvtCx0YnQtdC90LjQtS5cclxuXHQqIEBwYXJhbVx0Y2FsbGJhY2sgLSDRhNGD0L3QutGG0LjRjyDQvtCx0YDQsNGC0L3QvtCz0L4g0LLRi9C30L7QstCwXHJcblx0KiBAcGFyYW1cdHNNZXNzYWdlIC0g0KLQtdC60YHRgiDQvtGC0L/RgNCw0LLQu9GP0LXQvNC+0LPQviDRgdC+0L7QsdGJ0LXQvdC40Y8sINC80LDQutGB0LjQvNCw0LvRjNC90LDRjyDQtNC70LjQvdCwIDMwMCDRgdC40LzQstC+0LvQvtCyICjQv9C+INGD0LzQvtC70YfQsNC90LjRjiDCq9Cf0YDQuNC90LjQvNCw0Lkg0Y3QvdC10YDQs9C40Y4g0LIg0L/QvtC00LDRgNC+0LohwrspLlxyXG5cdCovXHJcblx0Z2lmdFBvd2VySXRlbShzRnJvbVVpZCwgc1RvVWlkLCBjYWxsYmFjaywgc01lc3NhZ2UgPSBcItCf0YDQuNC90LjQvNCw0Lkg0Y3QvdC10YDQs9C40Y4g0LIg0L/QvtC00LDRgNC+0LpcIikge1xyXG5cdFx0dGhpcy5vRGF0YUxvYWRlci5yZXF1ZXN0X29iZignZ2lmdFBvd2VySXRlbScsIHsgZnJvbV91aWQ6IHNGcm9tVWlkLCB0b191aWQ6IHNUb1VpZCwgbWVzc2FnZTogc01lc3NhZ2UgfSwgY2FsbGJhY2spO1xyXG5cdH1cclxuXHJcblxyXG5cdC8qKlxyXG5cdCog0JTQsNGA0LjRgiBib29zdCDQtNGA0YPQs9C+0LzRgyDQuNCz0YDQvtC60YMsINC/0YDQuCDRjdGC0L7QvCDQtNCw0YDRj9GJ0LjQuSDQuNCz0YDQvtC6INC90LjQutCw0LrQuNGFINGB0YDQtdC00YHRgtCyINC90LAg0Y3RgtC+0YIgYm9vc3Qg0L3QtSDRgtGA0LDRgtC40YIuINCV0LTQuNC90YHRgtCy0LXQvdC90L7QtSDQvtCz0YDQsNC90LjRh9C10L3QuNC1IOKAlCDQtNCw0YDQuNGC0YwgYm9vc3Qn0Ysg0LzQvtC20L3QviDQvdC1INGH0LDRidC1IDHQs9C+INGA0LDQt9CwINCyIDEwINC80LjQvdGD0YIuXHJcblx0KiBAcGFyYW1cdHNGcm9tVWlkIC0g0JjQtNC10L3RgtC40YTQuNC60LDRgtC+0YAg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINC+0YIg0LrQvtCz0L4g0YHQvtC+0LHRidC10L3QuNC1LlxyXG5cdCogQHBhcmFtXHRzVG9VaWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0LrQvtGC0L7RgNC+0LzRgyDQv9GA0LXQtNC90LDQt9C90LDRh9C10L3QviDRgdC+0L7QsdGJ0LXQvdC40LUuXHJcblx0KiBAcGFyYW1cdGlOdW0gLSDQndC+0LzQtdGAIGJvb3N0J9CwLlxyXG5cdCogQHBhcmFtXHRjYWxsYmFjayAtINGE0YPQvdC60YbQuNGPINC+0LHRgNCw0YLQvdC+0LPQviDQstGL0LfQvtCy0LBcclxuXHQqIEBwYXJhbVx0c01lc3NhZ2UgLSDQotC10LrRgdGCINC+0YLQv9GA0LDQstC70Y/QtdC80L7Qs9C+INGB0L7QvtCx0YnQtdC90LjRjywg0LzQsNC60YHQuNC80LDQu9GM0L3QsNGPINC00LvQuNC90LAgMzAwINGB0LjQvNCy0L7Qu9C+0LIgKNC/0L4g0YPQvNC+0LvRh9Cw0L3QuNGOIMKr0J/RgNC40L3QuNC80LDQuSDRjdC90LXRgNCz0LjRjiDQsiDQv9C+0LTQsNGA0L7QuiHCuykuXHJcblx0Ki9cclxuXHRnaWZ0Qm9vc3RJdGVtKHNGcm9tVWlkLCBzVG9VaWQsIGlOdW0sIGNhbGxiYWNrLCBzTWVzc2FnZSA9IFwi0J/RgNC40L3QuNC80LDQuSBib29zdCDQsiDQv9C+0LTQsNGA0L7QuiFcIikge1xyXG5cdFx0dGhpcy5vRGF0YUxvYWRlci5yZXF1ZXN0X29iZignZ2lmdEJvb3N0SXRlbScsIHsgZnJvbV91aWQ6IHNGcm9tVWlkLCB0b191aWQ6IHNUb1VpZCwgbnVtOiBpTnVtLCBtZXNzYWdlOiBzTWVzc2FnZSB9LCBjYWxsYmFjayk7XHJcblx0fVxyXG5cclxuXHJcblxyXG5cdC8qKlxyXG5cdCog0KHQv9C40YHRi9Cy0LDQtdGCIGJvb3N0INGDINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQutCw0Log0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC90YvQuS5cclxuXHQqIEBwYXJhbVx0c1VpZCAtINCY0LTQtdC90YLQuNGE0LjQutCw0YLQvtGAINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjy5cclxuXHQqIEBwYXJhbVx0aU51bSAtINCd0L7QvNC10YAgYm9vc3Qn0LAuXHJcblx0KiBAcGFyYW1cdGNhbGxiYWNrIC0g0YTRg9C90LrRhtC40Y8g0L7QsdGA0LDRgtC90L7Qs9C+INCy0YvQt9C+0LLQsFxyXG5cdCovXHJcblx0dXNlQm9vc3Qoc1VpZCwgaU51bSwgY2FsbGJhY2ssIGVycm9yID0gbnVsbCkge1xyXG5cdFx0dGhpcy5vRGF0YUxvYWRlci5yZXF1ZXN0X29iZigndXNlQm9vc3QnLCB7IHVpZDogc1VpZCwgbnVtOiBpTnVtIH0sIGNhbGxiYWNrKTtcclxuXHR9XHJcblxyXG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vINCh0L7QvtCx0YnQtdC90LjRjyAvLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuXHQvKipcclxuXHQqINCS0L7Qt9Cy0YDQsNGJ0LDQtdGCINGB0L/QuNGB0L7QuiDQvdC10L/RgNC+0YfQuNGC0LDQvdC90YvRhSDRgdC+0L7QsdGJ0LXQvdC40LkuXHJcblx0KiBAcGFyYW1cdHNVaWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8uXHJcblx0KiBAcGFyYW1cdGNhbGxiYWNrIC0g0YTRg9C90LrRhtC40Y8g0L7QsdGA0LDRgtC90L7Qs9C+INCy0YvQt9C+0LLQsFxyXG5cdCovXHJcblx0Z2V0VW5yZWFkTWVzc2FnZShzVWlkLCBjYWxsYmFjaywgZXJyb3IgPSBudWxsKSB7XHJcblx0XHR0aGlzLm9EYXRhTG9hZGVyLnJlcXVlc3Rfb2JmKCdnZXRVbnJlYWRNZXNzYWdlcycsIHsgdWlkOiBzVWlkIH0sIGNhbGxiYWNrLCBlcnJvcik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQqINCe0YLQv9GA0LDQstC70Y/QtdGCINC00YDRg9Cz0L7QvNGDINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjiDRgdC+0L7QsdGJ0LXQvdC40LUg0YEg0L/RgNC+0YHRjNCx0L7QuSDQv9GA0LjRgdC70LDRgtGMINCx0YPRgdGC0LXRgCwg0L/RgNC10LTRi9C00YPRidC10LUg0YHQvtC+0LHRidC10L3QuNC1INC+0LEg0Y3RgtC+0Lwg0LHRg9C00LXRgiDRg9C00LDQu9C10L3Qvi5cclxuXHQqIEBwYXJhbVx0c0Zyb21VaWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0L7RgiDQutC+0LPQviDRgdC+0L7QsdGJ0LXQvdC40LUuXHJcblx0KiBAcGFyYW1cdHNUb1VpZHMgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgNGLINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvQtdC5INC60L7RgtC+0YDQvtC8INC/0YDQtdC00L3QsNC30L3QsNGH0LXQvdC+INGB0L7QvtCx0YnQtdC90LjQtS4oINGH0LXRgNC10Lcg0LfQsNC/0Y/RgtGD0Y4pXHJcblx0KiBAcGFyYW1cdGlJZEJvb3N0IC0g0JjQtNC10L3RgtC40YTQuNC60LDRgtC+0YAg0LHRg9GB0YLQtdGA0LAg0LrQvtGC0L7RgNGL0Lkg0L3QtdC+0LHRhdC+0LTQuNC8LlxyXG5cdCogQHBhcmFtXHRjYWxsYmFjayAtINGE0YPQvdC60YbQuNGPINC+0LHRgNCw0YLQvdC+0LPQviDQstGL0LfQvtCy0LBcclxuXHQqIEBwYXJhbVx0c01lc3NhZ2UgLSDQotC10LrRgdGCINC+0YLQv9GA0LDQstC70Y/QtdC80L7Qs9C+INGB0L7QvtCx0YnQtdC90LjRjywg0LzQsNC60YHQuNC80LDQu9GM0L3QsNGPINC00LvQuNC90LAgMzAwINGB0LjQvNCy0L7Qu9C+0LIuXHJcblx0Ki9cclxuXHRzZW5kQm9vc3RSZXF1ZXN0KHNGcm9tVWlkLCBzVG9VaWRzLCBpSWRCb29zdCwgY2FsbGJhY2ssIHNNZXNzYWdlID0gXCLQndC1INC80L7QsyDQsdGLINGC0Ysg0LzQvdC1INCy0YvRgdC70LDRgtGMIGJvb3N0LlwiKSB7XHJcblx0XHR0aGlzLm9EYXRhTG9hZGVyLnJlcXVlc3Rfb2JmKCdzZW5kQm9vc3RSZXF1ZXN0JywgeyBmcm9tX3VpZDogc0Zyb21VaWQsIHRvX3VpZDogc1RvVWlkcywgbnVtOiBpSWRCb29zdCwgbWVzc2FnZTogc01lc3NhZ2UgfSwgY2FsbGJhY2spO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0KiDQntGC0L/RgNCw0LLQu9GP0LXRgiDQtNGA0YPQs9C+0LzRgyDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y4g0YHQvtC+0LHRidC10L3QuNC1INGBINC/0YDQvtGB0YzQsdC+0Lkg0L/RgNC40YHQu9Cw0YLRjCDRjdC90LXRgNCz0LjRjiwg0L/RgNC10LTRi9C00YPRidC10LUg0YHQvtC+0LHRidC10L3QuNC1INC+0LEg0Y3RgtC+0Lwg0LHRg9C00LXRgiDRg9C00LDQu9C10L3Qvi5cclxuXHQqIEBwYXJhbVx0c0Zyb21VaWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0L7RgiDQutC+0LPQviDRgdC+0L7QsdGJ0LXQvdC40LUuXHJcblx0KiBAcGFyYW1cdHNUb1VpZCAtINCY0LTQtdC90YLQuNGE0LjQutCw0YLQvtGAINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQutC+0YLQvtGA0L7QvNGDINC/0YDQtdC00L3QsNC30L3QsNGH0LXQvdC+INGB0L7QvtCx0YnQtdC90LjQtS5cclxuXHQqIEBwYXJhbVx0Y2FsbGJhY2sgLSDRhNGD0L3QutGG0LjRjyDQvtCx0YDQsNGC0L3QvtCz0L4g0LLRi9C30L7QstCwXHJcblx0KiBAcGFyYW1cdHNNZXNzYWdlIC0g0KLQtdC60YHRgiDQvtGC0L/RgNCw0LLQu9GP0LXQvNC+0LPQviDRgdC+0L7QsdGJ0LXQvdC40Y8sINC80LDQutGB0LjQvNCw0LvRjNC90LDRjyDQtNC70LjQvdCwIDMwMCDRgdC40LzQstC+0LvQvtCyLlxyXG5cdCovXHJcblx0c2VuZFBvd2VyUmVxdWVzdChzRnJvbVVpZCwgc1RvVWlkLCBjYWxsYmFjaywgc01lc3NhZ2UgPSBcItCd0LUg0LzQvtCzINCx0Ysg0YLRiyDQvNC90LUg0LLRi9GB0LvQsNGC0Ywg0Y3QvdC10YDQs9C40LguXCIpIHtcclxuXHRcdHRoaXMub0RhdGFMb2FkZXIucmVxdWVzdF9vYmYoJ3NlbmRQb3dlclJlcXVlc3QnLCB7IGZyb21fdWlkOiBzRnJvbVVpZCwgdG9fdWlkOiBzVG9VaWQsIG1lc3NhZ2U6IHNNZXNzYWdlIH0sIGNhbGxiYWNrKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCog0J/QvtC80LXRh9Cw0LXRgiDRgdC+0L7QsdGJ0LXQvdC40Y8g0LrQsNC6INC/0YDQvtGH0LjRgtCw0L3QvdGL0LUuXHJcblx0KiBAcGFyYW1cdHNVaWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8uXHJcblx0KiBAcGFyYW1cdHNNaWQgLSDQn9C10YDQtdGH0LjRgdC70Y/QtdGCINGH0LXRgNC10Lcg0LfQsNC/0Y/RgtGD0Y4g0LjQtNC10L3RgtC40YTQuNC60LDRgtC+0YDRiyDRgdC+0L7QsdGJ0LXQvdC40LkuXHJcblx0KiBAcGFyYW1cdGNhbGxiYWNrIC0g0YTRg9C90LrRhtC40Y8g0L7QsdGA0LDRgtC90L7Qs9C+INCy0YvQt9C+0LLQsFxyXG5cdCogQHBhcmFtXHRlcnJvciAtINGE0YPQvdC60YbQuNGPINC+0LHRgNCw0LHQvtGC0LrQuCDQvtGI0LjQsdC60LhcclxuXHQqL1xyXG5cdHNldE1lc3NhZ2VzQXNSZWFkKHNVaWQsIHNNaWQsIGNhbGxiYWNrLCBlcnJvciA9IG51bGwpIHtcclxuXHRcdHRoaXMub0RhdGFMb2FkZXIucmVxdWVzdF9vYmYoJ3NldE1lc3NhZ2VzQXNSZWFkJywgeyB1aWQ6IHNVaWQsIG1pZHM6IHNNaWQgfSwgY2FsbGJhY2ssIGVycm9yKTtcclxuXHR9XHJcblxyXG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8g0JzQuNC90Lgg0LjQs9GA0YsgLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcblx0LyoqXHJcblx0KiDQktGL0LfRi9Cy0LDQtdGC0YHRjyDQv9GA0Lgg0YHRgtCw0YDRgtC1INC90L7QstC+0Lkg0LjQs9GA0L7QstC+0Lkg0YHQtdGB0YHQuNC4LCDQv9GA0LjQstC+0LTQuNGCINC6INGD0LzQtdC90YzRiNC10L3QuNGOINC20LjQt9C90Lgg0L3QsCDQtdC00LjQvdC40YbRgy4g0JXRgdC70Lgg0LbQuNC30L3QtdC5INC90LXRgiDQstC+0LfQstGA0LDRidCw0LXRgiDQvtGI0LjQsdC60YMuXHJcblx0KiBAcGFyYW1cdHNVaWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8uXHJcblx0KiBAcGFyYW1cdGNhbGxiYWNrIC0g0YTRg9C90LrRhtC40Y8g0L7QsdGA0LDRgtC90L7Qs9C+INCy0YvQt9C+0LLQsFxyXG5cdCovXHJcblx0c3RhcnRHYW1lKHNVaWQsIGNhbGxiYWNrLCBlcnJvciA9IG51bGwpIHtcclxuXHRcdHRoaXMub0RhdGFMb2FkZXIucmVxdWVzdF9vYmYoJ3N0YXJ0R2FtZScsIHsgdWlkOiBzVWlkIH0sIGNhbGxiYWNrLCBlcnJvcik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQqINCX0LDQv9C40YHRi9Cy0LDQtdGCINGA0LXQt9GD0LvRjNGC0LDRgiDQuNCz0YDRiyDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8uXHJcblx0KiBAcGFyYW1cdHNVaWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8uXHJcblx0KiBAcGFyYW1cdGlTY29yZSAtINCd0LDQsdGA0LDQvdC90YvQtSDQv9C+0LvRjNC30L7QstCw0YLQtdC70LXQvCDQvtGH0LrQuCDQt9CwINCy0YDQtdC80Y8g0LjQs9GA0YsuXHJcblx0KiBAcGFyYW1cdGlYUCAtINCd0LDQsdGA0LDQvdC90YvQuSDQv9C+0LvRjNC30L7QstCw0YLQtdC70LXQvCDQvtC/0YvRgiDQt9CwINC40LPRgNGDLlxyXG5cdCogQHBhcmFtXHRjYWxsYmFjayAtINGE0YPQvdC60YbQuNGPINC+0LHRgNCw0YLQvdC+0LPQviDQstGL0LfQvtCy0LBcclxuXHQqL1xyXG5cdHN0b3JlR2FtZVJlc3VsdChzVWlkLCBpU2NvcmUsIGlYUCwgY2FsbGJhY2ssIGVycm9yID0gbnVsbCkge1xyXG5cdFx0dGhpcy5vRGF0YUxvYWRlci5yZXF1ZXN0X29iZignc3RvcmVHYW1lUmVzdWx0JywgeyB1aWQ6IHNVaWQsIHNjb3JlOiBpU2NvcmUsIGV4cGVyaWVuY2U6IGlYUCB9LCBjYWxsYmFjaywgZXJyb3IpO1xyXG5cdH1cclxuXHJcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vINCk0L7RgtC+0LfQsNCz0LDQtNC60LggLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuXHQvKipcclxuXHQqINCg0LDQt9GA0LXRiNCw0LXRgiDQtNC+0YHRgtGD0L8g0Log0LjQs9GA0L7QstC+0Lkg0LrQsNGC0LXQs9C+0YDQuNC4LiDQldGB0LvQuCDQutCw0YLQtdCz0L7RgNC40Y8g0L/Qu9Cw0YLQvdCw0Y8sINGC0L4g0L7RgdGD0YnQtdGB0YLQstC70Y/QtdGC0YHRjyDQv9C+0LrRg9C/0LrQsCDQtNC+0YHRgtGD0L/QsCDQuiDQvdC10LkuXHJcblx0KiBAcGFyYW1cdHNVaWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8uXHJcblx0KiBAcGFyYW0gICBzQ2F0SWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQutCw0YLQtdCz0L7RgNC40LguXHJcblx0KiBAcGFyYW1cdGNhbGxiYWNrIC0g0YTRg9C90LrRhtC40Y8g0L7QsdGA0LDRgtC90L7Qs9C+INCy0YvQt9C+0LLQsFxyXG5cdCovXHJcblx0cHV6emxlX2J1eUNhdGVnb3J5KHNVaWQsIHNDYXRJZCwgY2FsbGJhY2ssIGVycm9yID0gbnVsbCkge1xyXG5cdFx0dGhpcy5vRGF0YUxvYWRlci5yZXF1ZXN0X29iZigncHV6emxlX2J1eUNhdGVnb3J5JywgeyB1aWQ6IHNVaWQsIGNpZDogc0NhdElkIH0sIGNhbGxiYWNrLCBlcnJvcik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQqINCg0LDQt9GA0LXRiNCw0LXRgiDQtNC+0YHRgtGD0L8g0Log0YPRgNC+0LLQvdGOINCyINC60LDRgtC10LPQvtGA0LjQuC4g0JXRgdC70Lgg0YPRgNC+0LLQtdC90Ywg0LIg0LrQsNGC0LXQs9C+0YDQuNC4INC/0LvQsNGC0L3Ri9C5LCDRgtC+INC+0YHRg9GJ0LXRgdGC0LLQu9GP0LXRgtGB0Y8g0L/QvtC60YPQv9C60LAg0LTQvtGB0YLRg9C/0LAg0Log0L3QtdC80YMuXHJcblx0KiBAcGFyYW1cdHNVaWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8uXHJcblx0KiBAcGFyYW0gICBzQ2F0SWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQutCw0YLQtdCz0L7RgNC40LguXHJcblx0KiBAcGFyYW0gICBzTHZsSWQgLSDQndC+0LzQtdGAINGD0YDQvtCy0L3RjyDQsiDQutCw0YLQtdCz0L7RgNC40LguXHJcblx0KiBAcGFyYW0gICBzUGF5Qm9vc3QgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCBib29zdCfQsCwg0LrQvtGC0L7RgNGL0Lwg0L7Qv9C70LDRh9C40LLQsNC10YIg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GMINCy0LzQtdGB0YLQviDQuNCz0YDQvtCy0L7QuSDQstCw0LvRjtGC0YsuXHJcblx0KiBAcGFyYW1cdGNhbGxiYWNrIC0g0YTRg9C90LrRhtC40Y8g0L7QsdGA0LDRgtC90L7Qs9C+INCy0YvQt9C+0LLQsFxyXG5cdCovXHJcblx0cHV6emxlX2J1eUxldmVsKHNVaWQsIHNDYXRJZCwgc0x2bElkLCBzUGF5Qm9vc3QsIGNhbGxiYWNrLCBlcnJvciA9IG51bGwpIHtcclxuXHRcdGlmIChzUGF5Qm9vc3QgPT0gXCJcIilcclxuXHRcdFx0dGhpcy5vRGF0YUxvYWRlci5yZXF1ZXN0X29iZigncHV6emxlX2J1eUxldmVsJywgeyB1aWQ6IHNVaWQsIGNpZDogc0NhdElkLCBsaWQ6IHNMdmxJZCB9LCBjYWxsYmFjaywgZXJyb3IpO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHR0aGlzLm9EYXRhTG9hZGVyLnJlcXVlc3Rfb2JmKCdwdXp6bGVfYnV5TGV2ZWwnLCB7IHVpZDogc1VpZCwgY2lkOiBzQ2F0SWQsIGxpZDogc0x2bElkLCBwYXlib29zdDogc1BheUJvb3N0IH0sIGNhbGxiYWNrLCBlcnJvcik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQqINCj0LTQsNC70Y/QtdGCINCy0YHQtSDQu9C40YjQvdC40LUg0LHRg9C60LLRiy5cclxuXHQqIEBwYXJhbVx0c1VpZCAtINCY0LTQtdC90YLQuNGE0LjQutCw0YLQvtGAINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjy5cclxuXHQqIEBwYXJhbSAgIHNDYXRJZCAtINCY0LTQtdC90YLQuNGE0LjQutCw0YLQvtGAINC60LDRgtC10LPQvtGA0LjQuC5cclxuXHQqIEBwYXJhbSAgIHNMdmxJZCAtINCd0L7QvNC10YAg0YPRgNC+0LLQvdGPINCyINC60LDRgtC10LPQvtGA0LjQuC5cclxuXHQqIEBwYXJhbSAgIHNJbWdJZCAtINCd0L7QvNC10YAg0LrQsNGA0YLQuNC90LrQuCDQsiDRg9GA0L7QstC90LUuXHJcblx0KiBAcGFyYW1cdGNhbGxiYWNrIC0g0YTRg9C90LrRhtC40Y8g0L7QsdGA0LDRgtC90L7Qs9C+INCy0YvQt9C+0LLQsFxyXG5cdCovXHJcblx0cHV6emxlX2NsZWFyVHJhc2goc1VpZCwgc0NhdElkLCBzTHZsSWQsIHNJbWdJZCwgY2FsbGJhY2ssIGVycm9yID0gbnVsbCkge1xyXG5cdFx0dGhpcy5vRGF0YUxvYWRlci5yZXF1ZXN0X29iZigncHV6emxlX2NsZWFyVHJhc2gnLCB7IHVpZDogc1VpZCwgY2lkOiBzQ2F0SWQsIGxpZDogc0x2bElkLCBpaWQ6IHNJbWdJZCB9LCBjYWxsYmFjaywgZXJyb3IpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0KiDQn9GA0LjQvdC40LzQsNC10YIg0L7RgiDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0L7RgtCy0LXRgiDQuCwg0LIg0YHQu9GD0YfQsNC1INCy0LXRgNC90L7Qs9C+INC+0YLQstC10YLQsCwg0LfQsNCy0LXRgNGI0LDQtdGCINC40LPRgNGDLlxyXG5cdCogQHBhcmFtXHRzVWlkIC0g0JjQtNC10L3RgtC40YTQuNC60LDRgtC+0YAg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPLlxyXG5cdCogQHBhcmFtICAgc0NhdElkIC0g0JjQtNC10L3RgtC40YTQuNC60LDRgtC+0YAg0LrQsNGC0LXQs9C+0YDQuNC4LlxyXG5cdCogQHBhcmFtICAgc0x2bElkIC0g0J3QvtC80LXRgCDRg9GA0L7QstC90Y8g0LIg0LrQsNGC0LXQs9C+0YDQuNC4LlxyXG5cdCogQHBhcmFtICAgc0ltZ0lkIC0g0J3QvtC80LXRgCDQutCw0YDRgtC40L3QutC4INCyINGD0YDQvtCy0L3QtS5cclxuXHQqIEBwYXJhbSAgIHNXb3JkIC0g0J7RgtCy0LXRgiDQvdCwINC30LDQs9Cw0LTQutGDLlxyXG5cdCogQHBhcmFtXHRjYWxsYmFjayAtINGE0YPQvdC60YbQuNGPINC+0LHRgNCw0YLQvdC+0LPQviDQstGL0LfQvtCy0LBcclxuXHQqL1xyXG5cdHB1enpsZV9jb21wbGV0ZWRHYW1lKHNVaWQsIHNDYXRJZCwgc0x2bElkLCBzSW1nSWQsIHNXb3JkLCBjYWxsYmFjaywgZXJyb3IgPSBudWxsKSB7XHJcblx0XHR0aGlzLm9EYXRhTG9hZGVyLnJlcXVlc3Rfb2JmKCdwdXp6bGVfY29tcGxldGVkR2FtZScsIHsgdWlkOiBzVWlkLCBjaWQ6IHNDYXRJZCwgbGlkOiBzTHZsSWQsIGlpZDogc0ltZ0lkLCB3b3JkOiBzV29yZCB9LCBjYWxsYmFjaywgZXJyb3IpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0KiDQktC+0LfQstGA0LDRidCw0LXRgiDRgdC/0LjRgdC+0Log0LLQvtC30LzQvtC20L3Ri9GFINC60LDRgtC10LPQvtGA0LjQuS5cclxuXHQqIEBwYXJhbVx0Y2FsbGJhY2sgLSDRhNGD0L3QutGG0LjRjyDQvtCx0YDQsNGC0L3QvtCz0L4g0LLRi9C30L7QstCwXHJcblx0Ki9cclxuXHRwdXp6bGVfZ2V0Q2F0ZWdvcnlzKGNhbGxiYWNrLCBlcnJvciA9IG51bGwpIHtcclxuXHRcdHRoaXMub0RhdGFMb2FkZXIucmVxdWVzdF9vYmYoJ3B1enpsZV9nZXRDYXRlZ29yeXMnLCB7fSwgY2FsbGJhY2ssIGVycm9yKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCog0JLQvtC30LLRgNCw0YnQsNC10YIg0L3QsNGB0YLRgNC+0LnQutC4INC00LvRjyDQvNC+0LTRg9C70Y8g0YTQvtGC0L7Qt9Cw0LPQsNC00LrQuC5cclxuXHQqIEBwYXJhbVx0Y2FsbGJhY2sgLSDRhNGD0L3QutGG0LjRjyDQvtCx0YDQsNGC0L3QvtCz0L4g0LLRi9C30L7QstCwXHJcblx0Ki9cclxuXHRwdXp6bGVfZ2V0Q29uZmlnKGNhbGxiYWNrLCBlcnJvciA9IG51bGwpIHtcclxuXHRcdHRoaXMub0RhdGFMb2FkZXIucmVxdWVzdF9vYmYoJ3B1enpsZV9nZXRDb25maWcnLCB7fSwgY2FsbGJhY2ssIGVycm9yKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCog0JLQvtC30LLRgNCw0YnQsNC10YIg0YHQv9C40YHQvtC6INC60LDRgNGC0LjQvdC+0Log0L3QsCDRg9GA0L7QstC90LUuXHJcblx0KiBAcGFyYW0gICBzQ2F0SWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQutCw0YLQtdCz0L7RgNC40LguXHJcblx0KiBAcGFyYW1cdHNMdmxJZCAtINCd0L7QvNC10YAg0YPRgNC+0LLQvdGPINCyINC60LDRgtC10LPQvtGA0LjQuC5cclxuXHQqIEBwYXJhbVx0Y2FsbGJhY2sgLSDRhNGD0L3QutGG0LjRjyDQvtCx0YDQsNGC0L3QvtCz0L4g0LLRi9C30L7QstCwXHJcblx0Ki9cclxuXHRwdXp6bGVfZ2V0SW1hZ2VzKHNDYXRJZCwgc0x2bElkLCBjYWxsYmFjaywgZXJyb3IgPSBudWxsKSB7XHJcblx0XHR0aGlzLm9EYXRhTG9hZGVyLnJlcXVlc3Rfb2JmKCdwdXp6bGVfZ2V0SW1hZ2VzJywgeyBsaWQ6IHNMdmxJZCwgY2lkOiBzQ2F0SWQgfSwgY2FsbGJhY2ssIGVycm9yKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCog0JLQvtC30LLRgNCw0YnQsNC10YIg0YHQv9C40YHQvtC6INGD0YDQvtCy0L3QtdC5INC00LvRjyDRg9C60LDQt9Cw0L3QvdC+0Lkg0LrQsNGC0LXQs9C+0YDQuNC4LlxyXG5cdCogQHBhcmFtICAgc0NhdElkIC0g0JjQtNC10L3RgtC40YTQuNC60LDRgtC+0YAg0LrQsNGC0LXQs9C+0YDQuNC4LlxyXG5cdCogQHBhcmFtXHRjYWxsYmFjayAtINGE0YPQvdC60YbQuNGPINC+0LHRgNCw0YLQvdC+0LPQviDQstGL0LfQvtCy0LBcclxuXHQqL1xyXG5cdHB1enpsZV9nZXRMZXZlbHMoc0NhdElkLCBjYWxsYmFjaywgZXJyb3IgPSBudWxsKSB7XHJcblx0XHR0aGlzLm9EYXRhTG9hZGVyLnJlcXVlc3Rfb2JmKCdwdXp6bGVfZ2V0TGV2ZWxzJywgeyBjaWQ6IHNDYXRJZCB9LCBjYWxsYmFjaywgZXJyb3IpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0KiDQn9C+0LrQsNC30YvQstCw0LXRgiDQv9C+0LTQv9C40YHQuCDQuiDQutCw0YDRgtC40L3QutCw0LwuXHJcblx0KiBAcGFyYW1cdHNVaWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8uXHJcblx0KiBAcGFyYW0gICBzQ2F0SWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQutCw0YLQtdCz0L7RgNC40LguXHJcblx0KiBAcGFyYW0gICBzTHZsSWQgLSDQndC+0LzQtdGAINGD0YDQvtCy0L3RjyDQsiDQutCw0YLQtdCz0L7RgNC40LguXHJcblx0KiBAcGFyYW0gICBzSW1nSWQgLSDQndC+0LzQtdGAINC60LDRgNGC0LjQvdC60Lgg0LIg0YPRgNC+0LLQvdC1LlxyXG5cdCogQHBhcmFtXHRjYWxsYmFjayAtINGE0YPQvdC60YbQuNGPINC+0LHRgNCw0YLQvdC+0LPQviDQstGL0LfQvtCy0LBcclxuXHQqL1xyXG5cdHB1enpsZV9nZXRUaXRsZXMoc1VpZCwgc0NhdElkLCBzTHZsSWQsIHNJbWdJZCwgY2FsbGJhY2ssIGVycm9yID0gbnVsbCkge1xyXG5cdFx0dGhpcy5vRGF0YUxvYWRlci5yZXF1ZXN0X29iZigncHV6emxlX2dldFRpdGxlcycsIHsgdWlkOiBzVWlkLCBjaWQ6IHNDYXRJZCwgbGlkOiBzTHZsSWQsIGlpZDogc0ltZ0lkIH0sIGNhbGxiYWNrLCBlcnJvcik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQqINCS0L7Qt9Cy0YDQsNGJ0LDQtdGCINGB0L/QuNGB0L7QuiDQutCw0YLQtdCz0L7RgNC40Lkg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPLCDQutC+0YLQvtGA0YvQtSDQvtC9INC60YPQv9C40Lsg0Lgv0LjQu9C4INC90LDRh9Cw0Lsg0LjQs9GA0LDRgtGMLlxyXG5cdCogQHBhcmFtXHRzVWlkIC0g0JjQtNC10L3RgtC40YTQuNC60LDRgtC+0YAg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPLlxyXG5cdCogQHBhcmFtXHRjYWxsYmFjayAtINGE0YPQvdC60YbQuNGPINC+0LHRgNCw0YLQvdC+0LPQviDQstGL0LfQvtCy0LBcclxuXHQqL1xyXG5cdHB1enpsZV9nZXRVc2VyQ2F0ZWdvcnlzKHNVaWQsIGNhbGxiYWNrLCBlcnJvciA9IG51bGwpIHtcclxuXHRcdHRoaXMub0RhdGFMb2FkZXIucmVxdWVzdF9vYmYoJ3B1enpsZV9nZXRVc2VyQ2F0ZWdvcnlzJywgeyB1aWQ6IHNVaWQgfSwgY2FsbGJhY2ssIGVycm9yKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCog0JLQvtC30LLRgNCw0YnQsNC10YIg0YHQv9C40YHQvtC6INC60LDRgNGC0LjQvdC+0LogKNC90LDRh9Cw0YLRi9C1INC40LvQuCDQt9Cw0LrQvtC90YfQtdC90L3Ri9C1INC90LAg0YPRgNC+0LLQvdC1KSDQuNC80LXRjtGJ0LjRhdGB0Y8g0YMg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPLlxyXG5cdCogQHBhcmFtXHRzVWlkIC0g0JjQtNC10L3RgtC40YTQuNC60LDRgtC+0YAg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPLlxyXG5cdCogQHBhcmFtICAgc0NhdElkIC0g0JjQtNC10L3RgtC40YTQuNC60LDRgtC+0YAg0LrQsNGC0LXQs9C+0YDQuNC4LlxyXG5cdCogQHBhcmFtICAgc0x2bElkIC0g0J3QvtC80LXRgCDRg9GA0L7QstC90Y8g0LIg0LrQsNGC0LXQs9C+0YDQuNC4LlxyXG5cdCogQHBhcmFtXHRjYWxsYmFjayAtINGE0YPQvdC60YbQuNGPINC+0LHRgNCw0YLQvdC+0LPQviDQstGL0LfQvtCy0LBcclxuXHQqL1xyXG5cdHB1enpsZV9nZXRVc2VySW1hZ2Uoc1VpZCwgc0NhdElkLCBzTHZsSWQsIGNhbGxiYWNrLCBlcnJvciA9IG51bGwpIHtcclxuXHRcdHRoaXMub0RhdGFMb2FkZXIucmVxdWVzdF9vYmYoJ3B1enpsZV9nZXRVc2VySW1hZ2VzJywgeyB1aWQ6IHNVaWQsIGNpZDogc0NhdElkLCBsaWQ6IHNMdmxJZCB9LCBjYWxsYmFjaywgZXJyb3IpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0KiDQktC+0LfQstGA0LDRidCw0LXRgiDRgdC/0LjRgdC+0Log0YPRgNC+0LLQvdC10Lkg0LTQu9GPINGD0LrQsNC30LDQvdC90L7QuSDQutCw0YLQtdCz0L7RgNC40Lgg0L/RgNC+0LnQtNC10L3QvdGL0YUv0LTQvtGB0YLRg9C/0L3Ri9GFINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRji5cclxuXHQqIEBwYXJhbVx0c1VpZCAtINCY0LTQtdC90YLQuNGE0LjQutCw0YLQvtGAINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjy5cclxuXHQqIEBwYXJhbSAgIHNDYXRJZCAtINCY0LTQtdC90YLQuNGE0LjQutCw0YLQvtGAINC60LDRgtC10LPQvtGA0LjQuC5cclxuXHQqIEBwYXJhbVx0Y2FsbGJhY2sgLSDRhNGD0L3QutGG0LjRjyDQvtCx0YDQsNGC0L3QvtCz0L4g0LLRi9C30L7QstCwXHJcblx0Ki9cclxuXHRwdXp6bGVfZ2V0VXNlckxldmVscyhzVWlkLCBzQ2F0SWQsIGNhbGxiYWNrLCBlcnJvciA9IG51bGwpIHtcclxuXHRcdHRoaXMub0RhdGFMb2FkZXIucmVxdWVzdF9vYmYoJ3B1enpsZV9nZXRVc2VyTGV2ZWxzJywgeyB1aWQ6IHNVaWQsIGNpZDogc0NhdElkIH0sIGNhbGxiYWNrLCBlcnJvcik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQqINCe0YLQutGA0YvQstCw0LXRgiDRgdC70YPRh9Cw0LnQvdGD0Y4g0L3QtSDQvtGC0LrRgNGL0YLRg9GOINCx0YPQutCy0YMuXHJcblx0KiBAcGFyYW1cdHNVaWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8uXHJcblx0KiBAcGFyYW0gICBzQ2F0SWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQutCw0YLQtdCz0L7RgNC40LguXHJcblx0KiBAcGFyYW0gICBzTHZsSWQgLSDQndC+0LzQtdGAINGD0YDQvtCy0L3RjyDQsiDQutCw0YLQtdCz0L7RgNC40LguXHJcblx0KiBAcGFyYW0gICBzSW1nSWQgLSDQndC+0LzQtdGAINC60LDRgNGC0LjQvdC60Lgg0LIg0YPRgNC+0LLQvdC1LlxyXG5cdCogQHBhcmFtICAgZXhjbCAtINCc0LDRgdC60LAg0LjRgdC60LvRjtGH0LXQvdC40Lk6INC00LvQuNC90LAg0LzQsNGB0LrQuCDQtNC+0LvQttC90LAg0YHQvtCy0L/QsNC00LDRgtGMINGBINC00LvQuNC90L7QuSDRgdC70L7QstCwLCDQsiDQv9C+0LfQuNGG0LjQuCDQs9C00LUg0YHQuNC80LLQvtC7INCy0YvQtNCw0LLQsNGC0Ywg0L3QtSDQvdCw0LTQviDQtNC+0LvQttC10L0g0YHRgtC+0Y/RgtGMIDAsINCz0LTQtSDQstC+0LfQvNC+0LbQvdC+IDEuXHJcblx0KiBAcGFyYW1cdGNhbGxiYWNrIC0g0YTRg9C90LrRhtC40Y8g0L7QsdGA0LDRgtC90L7Qs9C+INCy0YvQt9C+0LLQsFxyXG5cdCovXHJcblx0cHV6emxlX29wZW5DaGFyKHNVaWQsIHNDYXRJZCwgc0x2bElkLCBzSW1nSWQsIHNFeGNsLCBjYWxsYmFjaywgZXJyb3IgPSBudWxsKSB7XHJcblx0XHR0aGlzLm9EYXRhTG9hZGVyLnJlcXVlc3Rfb2JmKCdwdXp6bGVfb3BlbkNoYXInLCB7IHVpZDogc1VpZCwgY2lkOiBzQ2F0SWQsIGxpZDogc0x2bElkLCBpaWQ6IHNJbWdJZCwgZXhjbDogc0V4Y2wgfSwgY2FsbGJhY2ssIGVycm9yKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCog0J3QsNGH0LjQvdCw0LXRgiDQvdC+0LLRg9GOINC40LPRgNGDINC40LvQuCDQstC+0LfQstGA0LDRidCw0LXRgiDQtNCw0L3QvdGL0LUg0L3QsNGH0LDRgtC+0Lkg0LjQs9GA0YssINC10YHQu9C4INGC0LDQutCw0Y8g0LjQvNC10LXRgtGB0Y8uXHJcblx0KiBAcGFyYW1cdHNVaWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8uXHJcblx0KiBAcGFyYW0gICBzQ2F0SWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQutCw0YLQtdCz0L7RgNC40LguXHJcblx0KiBAcGFyYW0gICBzTHZsSWQgLSDQndC+0LzQtdGAINGD0YDQvtCy0L3RjyDQsiDQutCw0YLQtdCz0L7RgNC40LguXHJcblx0KiBAcGFyYW0gICBzSW1nSWQgLSDQndC+0LzQtdGAINC60LDRgNGC0LjQvdC60Lgg0LIg0YPRgNC+0LLQvdC1LlxyXG5cdCogQHBhcmFtXHRjYWxsYmFjayAtINGE0YPQvdC60YbQuNGPINC+0LHRgNCw0YLQvdC+0LPQviDQstGL0LfQvtCy0LBcclxuXHQqL1xyXG5cdHB1enpsZV9vcGVuR2FtZShzVWlkLCBzQ2F0SWQsIHNMdmxJZCwgc0ltZ0lkLCBjYWxsYmFjaywgZXJyb3IgPSBudWxsKSB7XHJcblx0XHR0aGlzLm9EYXRhTG9hZGVyLnJlcXVlc3Rfb2JmKCdwdXp6bGVfb3BlbkdhbWUnLCB7IHVpZDogc1VpZCwgY2lkOiBzQ2F0SWQsIGxpZDogc0x2bElkLCBpaWQ6IHNJbWdJZCB9LCBjYWxsYmFjaywgZXJyb3IpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0KiDQntGC0LrRgNGL0LLQsNC10YIg0YPQutCw0LfQsNC90L3Rg9GOINGH0LDRgdGC0Ywg0LrQsNGA0YLQuNC90LrQuC5cclxuXHQqIEBwYXJhbVx0c1VpZCAtINCY0LTQtdC90YLQuNGE0LjQutCw0YLQvtGAINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjy5cclxuXHQqIEBwYXJhbSAgIHNDYXRJZCAtINCY0LTQtdC90YLQuNGE0LjQutCw0YLQvtGAINC60LDRgtC10LPQvtGA0LjQuC5cclxuXHQqIEBwYXJhbSAgIHNMdmxJZCAtINCd0L7QvNC10YAg0YPRgNC+0LLQvdGPINCyINC60LDRgtC10LPQvtGA0LjQuC5cclxuXHQqIEBwYXJhbSAgIHNJbWdJZCAtINCd0L7QvNC10YAg0LrQsNGA0YLQuNC90LrQuCDQsiDRg9GA0L7QstC90LUuXHJcblx0KiBAcGFyYW0gICB0aWNrIC0g0J3QvtC80LXRgCDQvtGC0LrRgNGL0LLQsNC10LzQvtCz0L4g0LrRg9GB0L7Rh9C60LAg0LrQsNGA0YLQuNC90LrQuC5cclxuXHQqIEBwYXJhbVx0Y2FsbGJhY2sgLSDRhNGD0L3QutGG0LjRjyDQvtCx0YDQsNGC0L3QvtCz0L4g0LLRi9C30L7QstCwXHJcblx0Ki9cclxuXHRwdXp6bGVfb3BlblRpY2soc1VpZCwgc0NhdElkLCBzTHZsSWQsIHNJbWdJZCwgaVRpY2ssIGNhbGxiYWNrLCBlcnJvciA9IG51bGwpIHtcclxuXHRcdHRoaXMub0RhdGFMb2FkZXIucmVxdWVzdF9vYmYoJ3B1enpsZV9vcGVuVGljaycsIHsgdWlkOiBzVWlkLCBjaWQ6IHNDYXRJZCwgbGlkOiBzTHZsSWQsIGlpZDogc0ltZ0lkLCB0aWNrOiBpVGljayB9LCBjYWxsYmFjaywgZXJyb3IpO1xyXG5cdH1cclxuXHJcblxyXG5cdC8qKlxyXG5cdCog0J/RgNC+0L/Rg9GB0LrQsNC10YIg0L3QsNGH0LDRgtGD0Y4g0LjQs9GA0YMuXHJcblx0KiBAcGFyYW1cdHNVaWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8uXHJcblx0KiBAcGFyYW0gICBzQ2F0SWQgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDQutCw0YLQtdCz0L7RgNC40LguXHJcblx0KiBAcGFyYW0gICBzTHZsSWQgLSDQndC+0LzQtdGAINGD0YDQvtCy0L3RjyDQsiDQutCw0YLQtdCz0L7RgNC40LguXHJcblx0KiBAcGFyYW0gICBzSW1nSWQgLSDQndC+0LzQtdGAINC60LDRgNGC0LjQvdC60Lgg0LIg0YPRgNC+0LLQvdC1LlxyXG5cdCogQHBhcmFtXHRjYWxsYmFjayAtINGE0YPQvdC60YbQuNGPINC+0LHRgNCw0YLQvdC+0LPQviDQstGL0LfQvtCy0LBcclxuXHQqL1xyXG5cdHB1enpsZV9za2lwR2FtZShzVWlkLCBzQ2F0SWQsIHNMdmxJZCwgc0ltZ0lkLCBjYWxsYmFjaywgZXJyb3IgPSBudWxsKSB7XHJcblx0XHR0aGlzLm9EYXRhTG9hZGVyLnJlcXVlc3Rfb2JmKCdwdXp6bGVfc2tpcEdhbWUnLCB7IHVpZDogc1VpZCwgY2lkOiBzQ2F0SWQsIGxpZDogc0x2bElkLCBpaWQ6IHNJbWdJZCB9LCBjYWxsYmFjaywgZXJyb3IpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0KiDQn9GA0L7Qv9GD0YHQutCw0LXRgiDRg9GA0L7QstC10L3RjCDQsiDQutCw0YLQtdCz0L7RgNC40LggKNCy0YvQt9GL0LLQsNC10YLRgdGPINCy0YDRg9GH0L3Rg9GOINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvQtdC8LCDQtdGB0LvQuCDQvtC9INGF0L7Rh9C10YIg0L/QtdGA0LXQudGC0Lgg0Log0YHQu9C10LTRg9GO0YnQtdC80YMg0YPRgNC+0LLQvdGOINC90LUg0LTQvtC40LPRgNGL0LLQsNGPINGC0LXQutGD0YnQuNC5LCDQv9GA0Lgg0Y3RgtC+0Lwg0LLQvtC30LzQvtC20L3QvtGB0YLRjCDQtNCw0LLQsNGC0Ywg0L7RgtCy0LXRgtGLINCyINC/0YDQvtC/0YPRidC10L3QvdC+0Lwg0YPRgNC+0LLQvdC1INC+0YHRgtCw0LXRgtGB0Y8pLlxyXG5cdCogQHBhcmFtXHRzVWlkIC0g0JjQtNC10L3RgtC40YTQuNC60LDRgtC+0YAg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPLlxyXG5cdCogQHBhcmFtICAgc0NhdElkIC0g0JjQtNC10L3RgtC40YTQuNC60LDRgtC+0YAg0LrQsNGC0LXQs9C+0YDQuNC4LlxyXG5cdCogQHBhcmFtICAgc0x2bElkIC0g0J3QvtC80LXRgCDRg9GA0L7QstC90Y8g0LIg0LrQsNGC0LXQs9C+0YDQuNC4LlxyXG5cdCogQHBhcmFtXHRjYWxsYmFjayAtINGE0YPQvdC60YbQuNGPINC+0LHRgNCw0YLQvdC+0LPQviDQstGL0LfQvtCy0LBcclxuXHQqL1xyXG5cdHB1enpsZV9za2lwTGV2ZWwoc1VpZCwgc0NhdElkLCBzTHZsSWQsIGNhbGxiYWNrLCBlcnJvciA9IG51bGwpIHtcclxuXHRcdHRoaXMub0RhdGFMb2FkZXIucmVxdWVzdF9vYmYoJ3B1enpsZV9za2lwTGV2ZWwnLCB7IHVpZDogc1VpZCwgY2lkOiBzQ2F0SWQsIGxpZDogc0x2bElkIH0sIGNhbGxiYWNrLCBlcnJvcik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQqINCS0L7Qt9Cy0YDQsNGJ0LDQtdGCINGB0L/QuNGB0L7QuiDQt9Cw0LLQtdGA0YjQtdC90L3Ri9GFINC60LDRgNGC0LjQvdC+0Log0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GP0LzQuC5cclxuXHQqIEBwYXJhbVx0c1VpZHMgLSDQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgNGLINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvQtdC5LlxyXG5cdCogQHBhcmFtICAgc0NhdElkIC0g0JjQtNC10L3RgtC40YTQuNC60LDRgtC+0YAg0LrQsNGC0LXQs9C+0YDQuNC4LlxyXG5cdCogQHBhcmFtICAgc0x2bElkIC0g0J3QvtC80LXRgCDRg9GA0L7QstC90Y8g0LIg0LrQsNGC0LXQs9C+0YDQuNC4LlxyXG5cdCogQHBhcmFtICAgc0ltYWdlSWQgLSDQndC+0LzQtdGAINC60LDRgNGC0LjQvdC60Lgg0LIg0YPRgNC+0LLQvdC1LlxyXG5cdCogQHBhcmFtXHRjYWxsYmFjayAtINGE0YPQvdC60YbQuNGPINC+0LHRgNCw0YLQvdC+0LPQviDQstGL0LfQvtCy0LBcclxuXHQqL1xyXG5cdHB1enpsZV9nZXRDb21wbGV0ZWRHYW1lcyhzVWlkcywgc0NhdElkLCBzTHZsSWQsIHNJbWFnZUlkLCBjYWxsYmFjaywgZXJyb3IgPSBudWxsKSB7XHJcblx0XHRpZiAoc0x2bElkICE9IFwiXCIgJiYgc0ltYWdlSWQgIT0gXCJcIikge1xyXG5cdFx0XHR0aGlzLm9EYXRhTG9hZGVyLnJlcXVlc3Rfb2JmKCdwdXp6bGVfZ2V0Q29tcGxldGVkR2FtZXMnLCB7IHVpZHM6IHNVaWRzLCBjaWQ6IHNDYXRJZCwgbGlkOiBzTHZsSWQsIGlpZDogc0ltYWdlSWQgfSwgY2FsbGJhY2ssIGVycm9yKTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHR0aGlzLm9EYXRhTG9hZGVyLnJlcXVlc3Rfb2JmKCdwdXp6bGVfZ2V0Q29tcGxldGVkR2FtZXMnLCB7IHVpZHM6IHNVaWRzLCBjaWQ6IHNDYXRJZCB9LCBjYWxsYmFjaywgZXJyb3IpO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG4iLCJpbXBvcnQge0FwcH0gZnJvbSAnLi8uLi9hcHAnXHJcbmltcG9ydCBGYWRlT3VuSW4gZnJvbSAnLi8uLi9lZmZlY3RzL2ZhZGVPdXRJbic7XHJcbmltcG9ydCB7IEJ0biB9IGZyb20gJy4uL2d1aS9idG4nO1xyXG5pbXBvcnQgeyBXcm9uZ0Fuc3dlciwgUmlnaHRBc3dlciB9IGZyb20gJy4uL2d1aS9tZXNzYWdlJztcclxuaW1wb3J0IHsgRGF0YUxvYWRlciB9IGZyb20gJy4uL25ldC9EYXRhTG9hZGVyJztcclxuaW1wb3J0IHsgSW1nQnRuIH0gZnJvbSAnLi4vZ3VpL2ltZ0J0bic7XHJcbmltcG9ydCB7IE1vbmV5QnRuIH0gZnJvbSAnLi4vZ3VpL21vbmV5QnRuJztcclxuaW1wb3J0IHsgR2FtZUZhcSB9IGZyb20gJy4uL2ZvdG9Dcm9zcy9nYW1lRmFxJztcclxuXHJcbmxldCBjcm9zc3dvcmQ7XHJcbmxldCBjbHVlUGhvdG87XHJcbmxldCBsZXR0ZXJQYWxldHRlO1xyXG5sZXQgc2VsZWN0ZWRXb3JkID0gbnVsbDtcclxuXHJcbmxldCB3b3Jkc0NvdW50O1xyXG5sZXQgZGF0YSA9IHt9O1xyXG5cclxuXHJcbmZ1bmN0aW9uIGNyb3Nzd29yZFNvbHZlZCgpe1xyXG5cdGJhY2tUb01lbnUoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gYmFja1RvTWVudSgpe1xyXG5cdEFwcC5waGFzZXIuc3RhdGUuc3RhcnQoJ21haW5NZW51Jyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckJvb3N0ZXJzKCl7XHJcblx0bGV0IGJ0bkNvbnQgPSBBcHAucGhhc2VyLmFkZC5ncm91cCgpO1xyXG5cdGJ0bkNvbnQuY3JlYXRlKDAsMCwgJ2d1aV9nYW1lX2J0bicpO1xyXG5cdGJ0bkNvbnQuY3JlYXRlKDk2ICsgMTIsIDAsICdndWlfZ2FtZV9idG4nKTtcclxuXHRidG5Db250LmNyZWF0ZSgoOTYgKyAxMikqMiwgMCwgJ2d1aV9nYW1lX2J0bicpO1xyXG5cdGJ0bkNvbnQuY3JlYXRlKCg5NiArIDEyKSozLCAwLCAnZ3VpX2dhbWVfYnRuJyk7XHJcblx0YnRuQ29udC54ID0gNzUwLTMwNDtcclxuXHRidG5Db250LnkgPSA3MCArIDMwNCArIDE0O1xyXG5cdGJ0bkNvbnQuc2NhbGUuc2V0VG8oMC43MiwgMC43Mik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckNyb3Nzd29yZChwYXJzZWRMZXZlbCl7XHJcblx0Y3Jvc3N3b3JkID0gQXBwLmZhY3RvcnkuY3Jvc3N3b3JkKHBhcnNlZExldmVsKTtcclxuXHRsZXQgY3cgPSBjcm9zc3dvcmQuZ3JhcGg7XHJcblx0Y3cueCA9IDE2O1xyXG5cdGN3LnkgPSA3MDtcclxuXHQvL2FkZCBtb3VzZURvd24gZXZlbnQgaGFuZGxlciAocGhhc2VyIHdheSlcclxuXHRjdy5jaGlsZHJlbi5mb3JFYWNoKHdvcmRHciA9PiB7XHJcblx0XHR3b3JkR3IuY2hpbGRyZW4uZm9yRWFjaChsZXR0ZXJHciA9PntcclxuXHRcdFx0bGV0dGVyR3Iub25DaGlsZElucHV0RG93bi5hZGQoKHMsbCkgPT4ge1xyXG5cdFx0XHRcdGxldCB0YXJnZXRXb3JkID0gcy5wYXJlbnQucGFyZW50LmRhdGEuaW5zdGFuY2U7XHJcblxyXG5cdFx0XHRcdGlmKHNlbGVjdGVkV29yZD09dGFyZ2V0V29yZCl7XHJcblx0XHRcdFx0XHRsZXQgbGV0dGVyID0gcy5wYXJlbnQuZGF0YS5pbnN0YW5jZTtcclxuXHJcblx0XHRcdFx0XHRpZihsZXR0ZXIubGFiZWwubGVuZ3RoID09IDAgfHwgbGV0dGVyLnN0YXRlID09ICdibG9jaycpXHJcblx0XHRcdFx0XHRcdHJldHVybjtcclxuXHJcblx0XHRcdFx0XHRzZWxlY3RlZFdvcmQuZmlsbEF0KGxldHRlci5pZCwgJycpO1xyXG5cdFx0XHRcdFx0bGV0dGVyLl9wYWxldHRlLnNob3coKTtcclxuXHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZihzZWxlY3RlZFdvcmQpe1xyXG5cdFx0XHRcdFx0c2VsZWN0ZWRXb3JkLmZyZWUoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0c2VsZWN0ZWRXb3JkID0gdGFyZ2V0V29yZDtcclxuXHRcdFx0XHRzZWxlY3RlZFdvcmQuc2V0U3RhdGUoJ292ZXInKTtcclxuXHRcdFx0XHRjdy5icmluZ1RvVG9wKHNlbGVjdGVkV29yZC5ncmFwaCk7XHJcblx0XHRcdFx0bGV0dGVyUGFsZXR0ZS5nZW5lcmF0ZShzZWxlY3RlZFdvcmQudGV4dCk7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coc2VsZWN0ZWRXb3JkLnRleHQpO1xyXG5cclxuXHRcdFx0XHRGYWRlT3VuSW4oQXBwLnBoYXNlciwgY2x1ZVBob3RvLnBob3RvLCAoKSA9PiBjbHVlUGhvdG8uc2V0UGhvdG8oJ3BpYycrc2VsZWN0ZWRXb3JkLmlkKSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckxldHRlclBhbGV0dGUoKXtcclxuXHRsZXR0ZXJQYWxldHRlID0gQXBwLmZhY3RvcnkubGV0dGVyUGFsZXR0ZSgxNjQsIDY1MCAtIDE0MiwgOCwgMik7XHJcblx0bGV0IHJpZ2h0QXN3ZXI7XHJcblx0bGV0IHdyb25nQW5zd2VyO1xyXG5cclxuXHRsZXR0ZXJQYWxldHRlLmdyYXBoLmNoaWxkcmVuLmZvckVhY2gobGV0dGVyID0+IHtcclxuXHRcdGxldHRlci5vbkNoaWxkSW5wdXREb3duLmFkZCgocyxsKSA9PiB7XHJcblx0XHRcdGxldCBuZXh0TGV0dGVyID0gc2VsZWN0ZWRXb3JkLmZpbGwobGV0dGVyLmRhdGEuaW5zdGFuY2UubGFiZWwsIGxldHRlci5kYXRhLmluc3RhbmNlKTtcclxuXHRcdFx0aWYobmV4dExldHRlcil7XHJcblx0XHRcdFx0bGV0IGNyb3NzID0gY3Jvc3N3b3JkLm1hcFsobmV4dExldHRlci5ncmFwaC5wYXJlbnQueCArIG5leHRMZXR0ZXIuZ3JhcGgueCkgLyBzZWxlY3RlZFdvcmQubHddWyhuZXh0TGV0dGVyLmdyYXBoLnBhcmVudC55ICsgbmV4dExldHRlci5ncmFwaC55KSAvIHNlbGVjdGVkV29yZC5saF07XHJcblx0XHRcdFx0Ly9jb25zb2xlLmxvZyhjcm9zcyk7XHJcblxyXG5cdFx0XHRcdGxldHRlci5kYXRhLmluc3RhbmNlLmhpZGUoKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYoc2VsZWN0ZWRXb3JkLmlzRmlsbGVkKCkgJiYgbmV4dExldHRlcil7XHJcblx0XHRcdFx0aWYoc2VsZWN0ZWRXb3JkLmlzQ29ycmVjdCgpKXtcclxuXHRcdFx0XHRcdHNlbGVjdGVkV29yZC5zZXRTdGF0ZSgnYmxvY2snKTtcclxuXHJcblx0XHRcdFx0XHRmb3IobGV0IGk9MDsgaTwgc2VsZWN0ZWRXb3JkLnRleHQubGVuZ3RoOyBpKyspe1xyXG5cdFx0XHRcdFx0XHRsZXQgY3Jvc3MgPSBjcm9zc3dvcmQubWFwW3NlbGVjdGVkV29yZC5ncmFwaC54IC8gc2VsZWN0ZWRXb3JkLmx3ICsgaSpzZWxlY3RlZFdvcmQuZGlyZWN0aW9uXVtzZWxlY3RlZFdvcmQuZ3JhcGgueSAvIHNlbGVjdGVkV29yZC5saCArIGkqKCFzZWxlY3RlZFdvcmQuZGlyZWN0aW9uKV07XHJcblx0XHRcdFx0XHRcdGxldCBvcmlnID0gY3Jvc3MuZmluZChsZXR0ZXIgPT4ge3JldHVybiBsZXR0ZXIucGFyZW50LmRhdGEuaW5zdGFuY2UuaWQgPT0gc2VsZWN0ZWRXb3JkLmlkfSk7XHJcblxyXG5cdFx0XHRcdFx0XHRjcm9zcy5mb3JFYWNoKGxldHRlciA9PiB7XHJcblx0XHRcdFx0XHRcdFx0aWYobGV0dGVyLnBhcmVudC5kYXRhLmluc3RhbmNlLmlkIT1zZWxlY3RlZFdvcmQuaWQpe1xyXG5cdFx0XHRcdFx0XHRcdFx0bGV0dGVyLnBhcmVudC5kYXRhLmluc3RhbmNlLmZpbGxBdChsZXR0ZXIuZGF0YS5pbnN0YW5jZS5pZCwgb3JpZy5kYXRhLmluc3RhbmNlLmxhYmVsKTtcclxuXHRcdFx0XHRcdFx0XHRcdGxldHRlci5kYXRhLmluc3RhbmNlLnNldFN0YXRlKCdibG9jaycpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSlcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZighcmlnaHRBc3dlcikge1xyXG5cdFx0XHRcdFx0XHRyaWdodEFzd2VyID0gbmV3IFJpZ2h0QXN3ZXIoc2VsZWN0ZWRXb3JkLnRleHQpO1xyXG5cdFx0XHRcdFx0XHRyaWdodEFzd2VyLmdyYXBoLnggPSAwO1xyXG5cdFx0XHRcdFx0XHRyaWdodEFzd2VyLmdyYXBoLnkgPSAwO1xyXG5cclxuXHRcdFx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0cmlnaHRBc3dlci5ncmFwaC5kZXN0cm95KCk7XHJcblx0XHRcdFx0XHRcdFx0cmlnaHRBc3dlciA9IG51bGw7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC0td29yZHNDb3VudDtcclxuXHRcdFx0XHRcdFx0XHRpZih3b3Jkc0NvdW50ID09IDApe1xyXG5cdFx0XHRcdFx0XHRcdFx0Y3Jvc3N3b3JkU29sdmVkKCk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9LCAyMDAwKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRcdGlmKCF3cm9uZ0Fuc3dlcil7XHJcblx0XHRcdFx0XHRcdHdyb25nQW5zd2VyID0gbmV3IFdyb25nQW5zd2VyKCk7XHJcblx0XHRcdFx0XHRcdHdyb25nQW5zd2VyLmdyYXBoLmdyYXBoLnggPSAyODY7XHJcblx0XHRcdFx0XHRcdHdyb25nQW5zd2VyLmdyYXBoLmdyYXBoLnkgPSA0NjU7XHJcblxyXG5cdFx0XHRcdFx0XHR3cm9uZ0Fuc3dlci5ncmFwaC5jYWxsYmFjayA9ICgpPT57IFxyXG5cdFx0XHRcdFx0XHRcdHdyb25nQW5zd2VyLmdyYXBoLmdyYXBoLmRlc3Ryb3koKTsgXHJcblx0XHRcdFx0XHRcdFx0d3JvbmdBbnN3ZXIgPSBudWxsO1xyXG5cdFx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVx0XHRcdFx0XHRcclxuXHRcdH0pO1xyXG5cdH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJHVUkoKXtcclxuXHRsZXQgc2FsZUJ0biA9IG5ldyBJbWdCdG4oJ2J0bl9hY3Rpb25fbm9ybWFsJywnYnRuX2FjdGlvbl9vdmVyJyk7XHJcblx0c2FsZUJ0bi5ncmFwaC54ID0gMTI7XHJcblx0c2FsZUJ0bi5ncmFwaC55ID0gODtcclxuXHJcblx0bGV0IGZhcUJ0biA9IG5ldyBJbWdCdG4oJ2J0bl9oZWxwX25vcm1hbCcsJ2J0bl9oZWxwX292ZXInKTtcclxuXHRmYXFCdG4uZ3JhcGgueCA9IDU2ODtcclxuXHRmYXFCdG4uZ3JhcGgueSA9IDg7XHJcblxyXG5cdGZhcUJ0bi5jYWxsYmFjayA9ICgpPT57XHJcblx0XHRsZXQgZmFxID0gbmV3IEdhbWVGYXEoKTtcclxuXHRcdGZhcS5vbkNsb3NlID0gKCk9PntcclxuXHRcdFx0ZmFxLmdyYXBoLmRlc3Ryb3koKTtcclxuXHRcdFx0ZmFxID0gbnVsbDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGxldCBzbmRCdG4gPSBuZXcgSW1nQnRuKCdidG5fc291bmRfb25fbm9ybWFsJywnYnRuX3NvdW5kX29uX292ZXInKTtcclxuXHRzbmRCdG4uZ3JhcGgueCA9IDcwNDtcclxuXHRzbmRCdG4uZ3JhcGgueSA9IDg7XHJcblxyXG5cdGxldCBtb25leUJ0biA9IG5ldyBNb25leUJ0bigpO1xyXG5cdG1vbmV5QnRuLmdyYXBoLnggPSAyOTI7XHJcblx0bW9uZXlCdG4uZ3JhcGgueSA9IDY7XHJcblxyXG5cdGxldCBiYWNrQnRuID0gbmV3IEltZ0J0bignYnRuX2V4aXRfZ2FtZV9ub3JtYWwnLCdidG5fZXhpdF9nYW1lX292ZXInLCBiYWNrVG9NZW51KTtcclxuXHRiYWNrQnRuLmdyYXBoLnggPSAxMDtcclxuXHRiYWNrQnRuLmdyYXBoLnkgPSA2MDA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnNlTGV2ZWwoKXtcclxuXHR2YXIgeG1sID0gQXBwLnBoYXNlci5jYWNoZS5nZXRYTUwoJ2xldmVsJyk7XHJcblx0XHJcblx0bGV0IHBhcnNlZExldmVsID0gW107XHJcblx0bGV0IGNvdW50ID0gMDtcclxuXHR4bWwucXVlcnlTZWxlY3RvckFsbCgnY3Jvc3N3b3JkPndvcmQnKS5mb3JFYWNoKCh3b3JkLCBpKSA9PiB7XHJcblx0XHQvL2NvbnNvbGUubG9nKHdvcmQpO1xyXG5cdFx0bGV0IHcgPSB7XHJcblx0XHRcdGlkOiBpKzEsXHJcblx0XHRcdGltZzogd29yZC5xdWVyeVNlbGVjdG9yKCdpbWFnZTEnKS50ZXh0Q29udGVudCxcclxuXHRcdFx0dGV4dDogd29yZC5xdWVyeVNlbGVjdG9yKCd3b3JkJykudGV4dENvbnRlbnQsXHJcblx0XHRcdHBvczoge1xyXG5cdFx0XHRcdHg6IHBhcnNlSW50KHdvcmQucXVlcnlTZWxlY3RvcigneHAxJykudGV4dENvbnRlbnQpLFxyXG5cdFx0XHRcdHk6IHBhcnNlSW50KHdvcmQucXVlcnlTZWxlY3RvcigneXAxJykudGV4dENvbnRlbnQpLFxyXG5cdFx0XHRcdHgyOiBwYXJzZUludCh3b3JkLnF1ZXJ5U2VsZWN0b3IoJ3hwMicpLnRleHRDb250ZW50KSxcclxuXHRcdFx0XHR5MjogcGFyc2VJbnQod29yZC5xdWVyeVNlbGVjdG9yKCd5cDInKS50ZXh0Q29udGVudClcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHcuZGlyZWN0aW9uID0gKHcucG9zLnggPT0gdy5wb3MueDIgPyAwIDogMSk7IC8vIDAgLSB2ZXJ0aWNhbCwgMSAtIGhvcml6b250YWxcclxuXHRcdFxyXG5cdFx0cGFyc2VkTGV2ZWwucHVzaCh3KTtcclxuXHRcdEFwcC5waGFzZXIubG9hZC5pbWFnZSgncGljJysoKytjb3VudCksIGAke0RhdGFMb2FkZXIuU0VSVkVSX0lNR1NfVVJMfS8ke3cuaW1nfWApO1xyXG5cdH0pO1xyXG5cclxuXHRyZXR1cm4gcGFyc2VkTGV2ZWw7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdhbWVTdGF0ZSgpIHtcdFxyXG5cdHJldHVybiB7XHJcblx0XHRwcmVsb2FkOiBmdW5jdGlvbiAoKSB7XHRcdFxyXG5cdFx0XHQvL2d1aVxyXG5cdFx0XHQvL3BoYXNlci5sb2FkLmltYWdlKCdndWlfZ2FtZV9idG4nLCAnLi9kYXRhL0J1dHRvbnNOb3JtYWwucG5nJyk7XHJcblx0XHRcdGxldCBtaXNzaW9uX3N0YXQgPSBBcHAuc3RvcmFnZS5nZW5lcmFsRGF0YVsnbWlzc2lvbl9zdGF0J10uZmluZCggbSA9PiBtLmlkID09IEFwcC5zdG9yYWdlLm1pc3Npb25JZCk7XHJcblx0XHRcdC8vJHttaXNzaW9uX3N0YXQucGF0aH1cclxuXHRcdFx0Ly9BcHAucGhhc2VyLmxvYWQueG1sKCdsZXZlbCcsICcuL2RhdGEvbGV2ZWxzLzkwMS54bWwnLCBmYWxzZSk7XHJcblx0XHRcdEFwcC5waGFzZXIubG9hZC54bWwoJ2xldmVsJywgYCR7RGF0YUxvYWRlci5TRVJWRVJfTEVWRUxTX1VSTH0vJHttaXNzaW9uX3N0YXQucGF0aH1gLCBmYWxzZSk7XHJcblx0XHR9LFxyXG5cdFx0Y3JlYXRlOiBmdW5jdGlvbigpe1xyXG5cdFx0XHRBcHAucGhhc2VyLmFkZC5zcHJpdGUoMCwgMCwgJ2JnJyk7XHJcblx0XHRcdFxyXG5cdFx0XHRjbHVlUGhvdG8gPSBBcHAuZmFjdG9yeS5waG90byg3NTAgLSAzMDQsIDcwKTtcdFx0XHJcblx0XHRcdFxyXG5cdFx0XHRyZW5kZXJCb29zdGVycygpO1xyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0bGV0IHBhcnNlZExldmVsID0gcGFyc2VMZXZlbCgpO1xyXG5cclxuXHRcdFx0d29yZHNDb3VudCA9IHBhcnNlZExldmVsLmxlbmd0aDtcclxuXHJcblx0XHRcdHJlbmRlckNyb3Nzd29yZChwYXJzZWRMZXZlbCk7XHJcblxyXG5cdFx0XHRyZW5kZXJMZXR0ZXJQYWxldHRlKCk7XHJcblxyXG5cdFx0XHRBcHAucGhhc2VyLmxvYWQub25Mb2FkQ29tcGxldGUuYWRkT25jZSgoKT0+IHtcclxuXHRcdFx0XHRzZWxlY3RlZFdvcmQgPSBjcm9zc3dvcmQuZ3JhcGguY2hpbGRyZW5bMF0uZGF0YS5pbnN0YW5jZTtcclxuXHRcdFx0XHRzZWxlY3RlZFdvcmQuc2V0U3RhdGUoJ292ZXInKTtcclxuXHRcdFx0XHRjcm9zc3dvcmQuZ3JhcGguYnJpbmdUb1RvcChzZWxlY3RlZFdvcmQuZ3JhcGgpO1xyXG5cdFx0XHRcdGxldHRlclBhbGV0dGUuZ2VuZXJhdGUoc2VsZWN0ZWRXb3JkLnRleHQpO1xyXG5cdFx0XHRcdGNsdWVQaG90by5zZXRQaG90bygncGljJytzZWxlY3RlZFdvcmQuaWQpO1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLmxvZyhzZWxlY3RlZFdvcmQudGV4dCk7XHJcblx0XHRcdH0sIHRoaXMpO1xyXG5cdFx0XHRcclxuXHRcdFx0cmVuZGVyR1VJKCk7XHJcblx0XHRcdFxyXG5cdFx0XHRBcHAucGhhc2VyLmxvYWQuc3RhcnQoKTtcclxuXHRcdH0sXHJcblx0XHR1cGRhdGU6IGZ1bmN0aW9uKCl7XHJcblxyXG5cdFx0fSxcclxuXHRcdHJlbmRlcjogZnVuY3Rpb24oKXtcclxuXHJcblx0XHR9XHJcblx0fVxyXG59XHJcbiIsImltcG9ydCB7IEFwcCB9IGZyb20gXCIuLi9hcHBcIjtcclxuaW1wb3J0IHtBc3NldFNlcnZpY2V9IGZyb20gJy4vLi4vdXRpbHMvYXNzZXRTZXJ2aWNlJztcclxuaW1wb3J0IHsgU2VsZWN0TGV2ZWxCdG4gfSBmcm9tIFwiLi4vZ3VpL3NlbGVjdExldmVsQnRuXCI7XHJcbmltcG9ydCB7IEJ0biB9IGZyb20gXCIuLi9ndWkvYnRuXCI7XHJcbmltcG9ydCB7IFN0YWdlc0xpc3QgfSBmcm9tIFwiLi4vZ3VpL3N0YWdlc0xpc3RcIjtcclxuaW1wb3J0IHsgSW1nQnRuIH0gZnJvbSBcIi4uL2d1aS9pbWdCdG5cIjtcclxuaW1wb3J0IHsgTW9uZXlCdG4gfSBmcm9tIFwiLi4vZ3VpL21vbmV5QnRuXCI7XHJcbmltcG9ydCB7IEdhbWVGYXEgfSBmcm9tIFwiLi4vZm90b0Nyb3NzL2dhbWVGYXFcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybntcclxuXHRcdHByZWxvYWQ6KCk9PntcclxuXHRcdFx0XHJcblx0XHR9LFxyXG5cdFx0Y3JlYXRlOigpPT57XHJcblx0XHRcdEFwcC5waGFzZXIuYWRkLnNwcml0ZSgwLCAwLCAnYmcnKTtcclxuXHJcblx0XHRcdGxldCBzdGFnZXMgPSBuZXcgU3RhZ2VzTGlzdCgpO1xyXG5cdFx0XHRcclxuXHRcdFx0c3RhZ2VzLmdyYXBoLnggPSA3MDtcclxuXHRcdFx0c3RhZ2VzLmdyYXBoLnkgPSAyMDA7XHJcblxyXG5cdFx0XHRzdGFnZXMuZmlsbChBcHAuc3RvcmFnZS5nZW5lcmFsRGF0YSk7XHJcblx0XHRcdEFwcC5zdG9yYWdlLm9uR2VuZXJhbERhdGEuYWRkT25jZSgoZGF0YSk9PiBzdGFnZXMuZmlsbChkYXRhKSk7XHJcblxyXG5cclxuXHRcdFx0bGV0IHNhbGVCdG4gPSBuZXcgSW1nQnRuKCdidG5fYWN0aW9uX25vcm1hbCcsJ2J0bl9hY3Rpb25fb3ZlcicpO1xyXG5cdFx0XHRzYWxlQnRuLmdyYXBoLnggPSAxMjtcclxuXHRcdFx0c2FsZUJ0bi5ncmFwaC55ID0gODtcclxuXHJcblx0XHRcdGxldCBmYXFCdG4gPSBuZXcgSW1nQnRuKCdidG5faGVscF9ub3JtYWwnLCdidG5faGVscF9vdmVyJyk7XHJcblx0XHRcdGZhcUJ0bi5ncmFwaC54ID0gNTY4O1xyXG5cdFx0XHRmYXFCdG4uZ3JhcGgueSA9IDg7XHJcblxyXG5cdFx0XHRmYXFCdG4uY2FsbGJhY2sgPSAoKT0+e1xyXG5cdFx0XHRcdGxldCBmYXEgPSBuZXcgR2FtZUZhcSgpO1xyXG5cdFx0XHRcdGZhcS5vbkNsb3NlID0gKCk9PntcclxuXHRcdFx0XHRcdGZhcS5ncmFwaC5kZXN0cm95KCk7XHJcblx0XHRcdFx0XHRmYXEgPSBudWxsO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0bGV0IHNuZEJ0biA9IG5ldyBJbWdCdG4oJ2J0bl9zb3VuZF9vbl9ub3JtYWwnLCdidG5fc291bmRfb25fb3ZlcicpO1xyXG5cdFx0XHRzbmRCdG4uZ3JhcGgueCA9IDcwNDtcclxuXHRcdFx0c25kQnRuLmdyYXBoLnkgPSA4O1xyXG5cclxuXHRcdFx0bGV0IG1vbmV5QnRuID0gbmV3IE1vbmV5QnRuKCk7XHJcblx0XHRcdG1vbmV5QnRuLmdyYXBoLnggPSAyOTI7XHJcblx0XHRcdG1vbmV5QnRuLmdyYXBoLnkgPSA2O1xyXG5cdFx0fSxcclxuXHRcdHVwZGF0ZTooKT0+e30sXHJcblx0XHRyZW5kZXI6KCk9Pnt9XHJcblx0fVxyXG59IiwiaW1wb3J0IHtBcHB9IGZyb20gJy4vLi4vYXBwJztcclxuXHJcbmxldCBpbnN0YW5jZSA9IG51bGw7XHJcblxyXG5leHBvcnQgY2xhc3MgQXNzZXRTZXJ2aWNle1xyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICBpZihpbnN0YW5jZSlcclxuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xyXG5cclxuICAgICAgICBpbnN0YW5jZSA9IHRoaXM7XHJcbiAgICAgICAgXHJcbiAgICAgICAgQXBwLnBoYXNlci5sb2FkLmltYWdlKCdiZycsICcuL2RhdGEvQmFja2dyb3VuZC5wbmcnKTsvL3QzXHJcbiAgICAgICAgQXBwLnBoYXNlci5sb2FkLmltYWdlKCdiZ19mb3QnLCAnLi9kYXRhL0JhY2tncm91bmRGb3QucG5nJyk7XHJcbiAgICAgICAgQXBwLnBoYXNlci5sb2FkLmltYWdlKCdsZXR0ZXJfZW1wdHknLCAnLi9kYXRhL0xldHRlcjh4OC5wbmcnKTtcclxuICAgICAgICBBcHAucGhhc2VyLmxvYWQuaW1hZ2UoJ2xldHRlcl9vdmVyJywgJy4vZGF0YS9MZXR0ZXI4eDhzZWxlY3RlZC5wbmcnKTtcclxuICAgICAgICBBcHAucGhhc2VyLmxvYWQuaW1hZ2UoJ2xldHRlcl9ibG9jaycsICcuL2RhdGEvTGV0dGVyOHg4YmxvY2tlZC5wbmcnKTtcclxuICAgICAgICBcclxuICAgICAgICBBcHAucGhhc2VyLmxvYWQuaW1hZ2UoJ3R1dF9va19ub3JtYWwnLCAnLi9kYXRhL3R1dG9yaWFsL2J0bl9va19ub3JtYWwucG5nJyk7XHJcbiAgICAgICAgQXBwLnBoYXNlci5sb2FkLmltYWdlKCd0dXRfb2tfb3ZlcicsICcuL2RhdGEvdHV0b3JpYWwvYnRuX29rX292ZXIucG5nJyk7XHJcbiAgICAgICAgQXBwLnBoYXNlci5sb2FkLmltYWdlKCd0dXRfYmcnLCAnLi9kYXRhL3R1dG9yaWFsL2JnLnBuZycpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIEFwcC5waGFzZXIubG9hZC5hdGxhc1hNTCgnYXNzZXRzJywgJy4vZGF0YS9zcHJpdGVzLnBuZycsICcuL2RhdGEvc3ByaXRlcy54bWwnKTtcclxuICAgICAgICBBcHAucGhhc2VyLmxvYWQuanNvbigndHV0b3JpYWwnLCAnLi9kYXRhL3R1dG9yaWFsLmpzb24nKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldChuYW1lKXtcclxuICAgICAgICByZXR1cm4ge2F0bGFzOidhc3NldHMnLCBrZXk6IGAke25hbWV9LnBuZ2B9O1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHtBcHB9IGZyb20gJy4vLi4vYXBwJztcclxuXHJcbmxldCBpbnN0YW5jZSA9IG51bGw7XHJcblxyXG5leHBvcnQgY2xhc3MgQXNzZXRTZXJ2aWNle1xyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICBpZihpbnN0YW5jZSlcclxuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xyXG5cclxuICAgICAgICBpbnN0YW5jZSA9IHRoaXM7XHJcbiAgICAgICAgXHJcbiAgICAgICAgQXBwLnBoYXNlci5sb2FkLmltYWdlKCdiZycsICcuL2RhdGEvQmFja2dyb3VuZC5wbmcnKTsvL3QzXHJcbiAgICAgICAgQXBwLnBoYXNlci5sb2FkLmltYWdlKCdiZ19mb3QnLCAnLi9kYXRhL0JhY2tncm91bmRGb3QucG5nJyk7XHJcbiAgICAgICAgQXBwLnBoYXNlci5sb2FkLmltYWdlKCdsZXR0ZXJfZW1wdHknLCAnLi9kYXRhL0xldHRlcjh4OC5wbmcnKTtcclxuICAgICAgICBBcHAucGhhc2VyLmxvYWQuaW1hZ2UoJ2xldHRlcl9vdmVyJywgJy4vZGF0YS9MZXR0ZXI4eDhzZWxlY3RlZC5wbmcnKTtcclxuICAgICAgICBBcHAucGhhc2VyLmxvYWQuaW1hZ2UoJ2xldHRlcl9ibG9jaycsICcuL2RhdGEvTGV0dGVyOHg4YmxvY2tlZC5wbmcnKTtcclxuICAgICAgICBcclxuICAgICAgICBBcHAucGhhc2VyLmxvYWQuaW1hZ2UoJ3R1dF9va19ub3JtYWwnLCAnLi9kYXRhL3R1dG9yaWFsL2J0bl9va19ub3JtYWwucG5nJyk7XHJcbiAgICAgICAgQXBwLnBoYXNlci5sb2FkLmltYWdlKCd0dXRfb2tfb3ZlcicsICcuL2RhdGEvdHV0b3JpYWwvYnRuX29rX292ZXIucG5nJyk7XHJcbiAgICAgICAgQXBwLnBoYXNlci5sb2FkLmltYWdlKCd0dXRfYmcnLCAnLi9kYXRhL3R1dG9yaWFsL2JnLnBuZycpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIEFwcC5waGFzZXIubG9hZC5hdGxhc1hNTCgnYXNzZXRzJywgJy4vZGF0YS9zcHJpdGVzLnBuZycsICcuL2RhdGEvc3ByaXRlcy54bWwnKTtcclxuICAgICAgICBBcHAucGhhc2VyLmxvYWQuanNvbigndHV0b3JpYWwnLCAnLi9kYXRhL3R1dG9yaWFsLmpzb24nKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldChuYW1lKXtcclxuICAgICAgICByZXR1cm4ge2F0bGFzOidhc3NldHMnLCBrZXk6IGAke25hbWV9LnBuZ2B9O1xyXG4gICAgfVxyXG59Il19
